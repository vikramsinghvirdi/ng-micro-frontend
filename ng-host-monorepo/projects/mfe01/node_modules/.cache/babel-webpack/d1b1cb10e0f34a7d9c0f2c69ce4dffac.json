{"ast":null,"code":"import { isTshirtSize as i, replaceWord as e, unsetElementStyles as t, pxToRem as a, updateElementStyles as n } from \"@cds/core/internal\";\nimport r from \"ramda/es/isNil.js\";\nvar u;\n\nfunction l(e) {\n  return r(e) || \"\" === e ? u.NilSizeValue : i(e) ? u.ValidSizeString : !isNaN(parseInt(e, 10)) && e.match(/^[0-9 ]+$/) ? u.ValidNumericString : u.BadSizeValue;\n}\n\nfunction d(i) {\n  return r(i) || \"\" === i ? \"\" : e(i, \"fit\");\n}\n\nfunction h(i, e) {\n  const h = l(d(e)),\n        c = !r(e) && e.indexOf(\"fit\") > -1;\n  let s = \"\";\n\n  switch (h) {\n    case u.ValidNumericString:\n      return s = a(parseInt(e)), void (c ? n(i, [\"width\", \"auto\"], [\"height\", \"auto\"], [\"min-width\", s], [\"min-height\", s]) : n(i, [\"width\", s], [\"height\", s], [\"min-width\", s], [\"min-height\", s]));\n\n    case u.ValidSizeString:\n    case u.NilSizeValue:\n      return void t(i, \"width\", \"height\", \"min-width\", \"min-height\");\n\n    case u.BadSizeValue:\n    default:\n      return;\n  }\n}\n\n!function (i) {\n  i.BadSizeValue = \"bad-value\", i.ValidSizeString = \"value-is-string\", i.ValidNumericString = \"value-is-numeric\", i.NilSizeValue = \"value-is-nil\";\n}(u || (u = {}));\nexport { u as SizeUpdateStrategies, d as getSizeValue, l as getUpdateSizeStrategy, h as updateIconSizeStyle }; //# sourceMappingURL=icon.classnames.js.map","map":null,"metadata":{},"sourceType":"module"}