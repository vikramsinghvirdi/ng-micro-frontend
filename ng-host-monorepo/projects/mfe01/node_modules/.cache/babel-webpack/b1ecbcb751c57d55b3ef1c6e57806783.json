{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Directive, NgModule, Optional, Input, Injectable, InjectionToken, Component, ChangeDetectionStrategy, EventEmitter, Inject, Output, ContentChildren, ChangeDetectorRef, PLATFORM_ID, ViewChild, HostBinding, HostListener, Renderer2, ElementRef, ViewContainerRef, TemplateRef, SkipSelf, ContentChild, ComponentFactoryResolver, Type, Injector, Self, Attribute, RendererFactory2, IterableDiffers, LOCALE_ID, NgZone } from '@angular/core';\nimport * as i1 from '@angular/common';\nimport { CommonModule, isPlatformBrowser, DOCUMENT, NgForOf, getLocaleDayNames, FormStyle, TranslationWidth, getLocaleMonthNames, getLocaleFirstDayOfWeek, getLocaleDateFormat, FormatWidth } from '@angular/common';\nimport { ClarityIcons, angleIcon, exclamationCircleIcon, checkCircleIcon, ellipsisHorizontalIcon, windowCloseIcon, eventIcon, calendarIcon, eyeHideIcon, eyeIcon, ellipsisVerticalIcon, viewColumnsIcon, arrowIcon, timesIcon, stepForward2Icon, angleDoubleIcon, filterGridCircleIcon, filterGridIcon, infoCircleIcon, exclamationTriangleIcon, circleIcon, dotCircleIcon, errorStandardIcon, successStandardIcon } from '@cds/core/icon';\nimport { map, tap, startWith, distinctUntilChanged, pairwise, filter, debounceTime, take, first, switchMap, takeUntil } from 'rxjs/operators';\nimport { Subject, BehaviorSubject, Observable, fromEvent, isObservable, of, ReplaySubject, combineLatest } from 'rxjs';\nimport { trigger, transition, style, animate, keyframes, state } from '@angular/animations';\nimport { FormControl, FormGroup, FormGroupName, NgModelGroup, FormGroupDirective, NgForm, NgControl, FormsModule, SelectMultipleControlValueAccessor } from '@angular/forms';\nimport { FocusTrapTrackerService, createId, isFocusable, isHTMLElement } from '@cds/core/internal';\nimport '@cds/core/internal-components/close-button/register.js';\nimport '@cds/core/icon/register';\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nimport * as ɵngcc2 from '@angular/forms';\nimport * as ɵngcc3 from 'rxjs';\nconst _c0 = [\"*\"];\n\nfunction ClrAccordionPanel_ng_container_0_div_1_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r7 = ɵngcc0.ɵɵnextContext(3);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r7.commonStrings.keys.danger);\n  }\n}\n\nfunction ClrAccordionPanel_ng_container_0_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 14);\n    ɵngcc0.ɵɵtemplate(1, ClrAccordionPanel_ng_container_0_div_1_ng_container_1_Template, 2, 1, \"ng-container\", 0);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const panel_r1 = ɵngcc0.ɵɵnextContext().$implicit;\n    const ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", panel_r1.status === ctx_r2.AccordionStatus.Error);\n  }\n}\n\nfunction ClrAccordionPanel_ng_container_0_ng_container_8_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r4.commonStrings.keys.danger);\n  }\n}\n\nfunction ClrAccordionPanel_ng_container_0_ng_container_9_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r5 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r5.commonStrings.keys.success);\n  }\n}\n\nfunction ClrAccordionPanel_ng_container_0_div_18_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"div\", 15);\n    ɵngcc0.ɵɵlistener(\"@toggle.done\", function ClrAccordionPanel_ng_container_0_div_18_Template_div_animation_toggle_done_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r11);\n      const panel_r1 = ɵngcc0.ɵɵnextContext().$implicit;\n      const ctx_r9 = ɵngcc0.ɵɵnextContext();\n      return ctx_r9.collapsePanelOnAnimationDone(panel_r1);\n    });\n    ɵngcc0.ɵɵelementStart(1, \"div\", 16);\n    ɵngcc0.ɵɵprojection(2, 2);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    ɵngcc0.ɵɵproperty(\"@toggle\", undefined);\n  }\n}\n\nfunction ClrAccordionPanel_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r13 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtemplate(1, ClrAccordionPanel_ng_container_0_div_1_Template, 2, 1, \"div\", 1);\n    ɵngcc0.ɵɵelementStart(2, \"div\", 2);\n    ɵngcc0.ɵɵelementStart(3, \"div\", 3);\n    ɵngcc0.ɵɵelementStart(4, \"button\", 4, 5);\n    ɵngcc0.ɵɵlistener(\"click\", function ClrAccordionPanel_ng_container_0_Template_button_click_4_listener() {\n      ɵngcc0.ɵɵrestoreView(_r13);\n      const ctx_r12 = ɵngcc0.ɵɵnextContext();\n      return ctx_r12.togglePanel();\n    });\n    ɵngcc0.ɵɵpipe(6, \"async\");\n    ɵngcc0.ɵɵelementStart(7, \"span\", 6);\n    ɵngcc0.ɵɵtemplate(8, ClrAccordionPanel_ng_container_0_ng_container_8_Template, 2, 1, \"ng-container\", 0);\n    ɵngcc0.ɵɵtemplate(9, ClrAccordionPanel_ng_container_0_ng_container_9_Template, 2, 1, \"ng-container\", 0);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementStart(10, \"span\", 7);\n    ɵngcc0.ɵɵelement(11, \"cds-icon\", 8);\n    ɵngcc0.ɵɵelement(12, \"span\", 9);\n    ɵngcc0.ɵɵelement(13, \"cds-icon\", 10);\n    ɵngcc0.ɵɵelement(14, \"cds-icon\", 11);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵprojection(15);\n    ɵngcc0.ɵɵprojection(16, 1);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementStart(17, \"div\", 12);\n    ɵngcc0.ɵɵtemplate(18, ClrAccordionPanel_ng_container_0_div_18_Template, 3, 1, \"div\", 13);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const panel_r1 = ctx.$implicit;\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    let tmp_2_0;\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", panel_r1.status !== ctx_r0.AccordionStatus.Inactive);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngClass\", ctx_r0.getPanelStateClasses(panel_r1));\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵclassProp(\"clr-accordion-header-has-description\", ((tmp_2_0 = ɵngcc0.ɵɵpipeBind1(6, 16, ctx_r0.accordionDescription.changes)) == null ? null : tmp_2_0.length) || ctx_r0.accordionDescription.length);\n    ɵngcc0.ɵɵproperty(\"id\", ctx_r0.getAccordionHeaderId(panel_r1.templateId))(\"disabled\", ctx_r0.isAccordion && panel_r1.disabled);\n    ɵngcc0.ɵɵattribute(\"aria-disabled\", !ctx_r0.isAccordion && panel_r1.disabled)(\"aria-controls\", ctx_r0.getAccordionContentId(panel_r1.templateId))(\"aria-expanded\", panel_r1.open);\n    ɵngcc0.ɵɵadvance(4);\n    ɵngcc0.ɵɵproperty(\"ngIf\", panel_r1.status === ctx_r0.AccordionStatus.Error);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", panel_r1.status === ctx_r0.AccordionStatus.Complete);\n    ɵngcc0.ɵɵadvance(8);\n    ɵngcc0.ɵɵproperty(\"@skipInitialRender\", undefined)(\"id\", ctx_r0.getAccordionContentId(panel_r1.templateId));\n    ɵngcc0.ɵɵattribute(\"aria-hidden\", !panel_r1.open)(\"aria-labelledby\", ctx_r0.getAccordionHeaderId(panel_r1.templateId));\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", panel_r1.open);\n  }\n}\n\nconst _c1 = [[[\"clr-accordion-title\"], [\"clr-step-title\"]], [[\"clr-accordion-description\"], [\"clr-step-description\"]], \"*\"];\nconst _c2 = [\"clr-accordion-title, clr-step-title\", \"clr-accordion-description, clr-step-description\", \"*\"];\nconst _c3 = [\"headerButton\"];\n\nfunction ClrStepperPanel_ng_container_0_div_1_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r7 = ɵngcc0.ɵɵnextContext(3);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r7.commonStrings.keys.danger);\n  }\n}\n\nfunction ClrStepperPanel_ng_container_0_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 14);\n    ɵngcc0.ɵɵtemplate(1, ClrStepperPanel_ng_container_0_div_1_ng_container_1_Template, 2, 1, \"ng-container\", 0);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const panel_r1 = ɵngcc0.ɵɵnextContext().$implicit;\n    const ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", panel_r1.status === ctx_r2.AccordionStatus.Error);\n  }\n}\n\nfunction ClrStepperPanel_ng_container_0_ng_container_8_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r4.commonStrings.keys.danger);\n  }\n}\n\nfunction ClrStepperPanel_ng_container_0_ng_container_9_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r5 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r5.commonStrings.keys.success);\n  }\n}\n\nfunction ClrStepperPanel_ng_container_0_div_18_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"div\", 15);\n    ɵngcc0.ɵɵlistener(\"@toggle.done\", function ClrStepperPanel_ng_container_0_div_18_Template_div_animation_toggle_done_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r11);\n      const panel_r1 = ɵngcc0.ɵɵnextContext().$implicit;\n      const ctx_r9 = ɵngcc0.ɵɵnextContext();\n      return ctx_r9.collapsePanelOnAnimationDone(panel_r1);\n    });\n    ɵngcc0.ɵɵelementStart(1, \"div\", 16);\n    ɵngcc0.ɵɵprojection(2, 2);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    ɵngcc0.ɵɵproperty(\"@toggle\", undefined);\n  }\n}\n\nfunction ClrStepperPanel_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r13 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtemplate(1, ClrStepperPanel_ng_container_0_div_1_Template, 2, 1, \"div\", 1);\n    ɵngcc0.ɵɵelementStart(2, \"div\", 2);\n    ɵngcc0.ɵɵelementStart(3, \"div\", 3);\n    ɵngcc0.ɵɵelementStart(4, \"button\", 4, 5);\n    ɵngcc0.ɵɵlistener(\"click\", function ClrStepperPanel_ng_container_0_Template_button_click_4_listener() {\n      ɵngcc0.ɵɵrestoreView(_r13);\n      const ctx_r12 = ɵngcc0.ɵɵnextContext();\n      return ctx_r12.togglePanel();\n    });\n    ɵngcc0.ɵɵpipe(6, \"async\");\n    ɵngcc0.ɵɵelementStart(7, \"span\", 6);\n    ɵngcc0.ɵɵtemplate(8, ClrStepperPanel_ng_container_0_ng_container_8_Template, 2, 1, \"ng-container\", 0);\n    ɵngcc0.ɵɵtemplate(9, ClrStepperPanel_ng_container_0_ng_container_9_Template, 2, 1, \"ng-container\", 0);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementStart(10, \"span\", 7);\n    ɵngcc0.ɵɵelement(11, \"cds-icon\", 8);\n    ɵngcc0.ɵɵelement(12, \"span\", 9);\n    ɵngcc0.ɵɵelement(13, \"cds-icon\", 10);\n    ɵngcc0.ɵɵelement(14, \"cds-icon\", 11);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵprojection(15);\n    ɵngcc0.ɵɵprojection(16, 1);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementStart(17, \"div\", 12);\n    ɵngcc0.ɵɵtemplate(18, ClrStepperPanel_ng_container_0_div_18_Template, 3, 1, \"div\", 13);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const panel_r1 = ctx.$implicit;\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    let tmp_2_0;\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", panel_r1.status !== ctx_r0.AccordionStatus.Inactive);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngClass\", ctx_r0.getPanelStateClasses(panel_r1));\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵclassProp(\"clr-accordion-header-has-description\", ((tmp_2_0 = ɵngcc0.ɵɵpipeBind1(6, 16, ctx_r0.accordionDescription.changes)) == null ? null : tmp_2_0.length) || ctx_r0.accordionDescription.length);\n    ɵngcc0.ɵɵproperty(\"id\", ctx_r0.getAccordionHeaderId(panel_r1.templateId))(\"disabled\", ctx_r0.isAccordion && panel_r1.disabled);\n    ɵngcc0.ɵɵattribute(\"aria-disabled\", !ctx_r0.isAccordion && panel_r1.disabled)(\"aria-controls\", ctx_r0.getAccordionContentId(panel_r1.templateId))(\"aria-expanded\", panel_r1.open);\n    ɵngcc0.ɵɵadvance(4);\n    ɵngcc0.ɵɵproperty(\"ngIf\", panel_r1.status === ctx_r0.AccordionStatus.Error);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", panel_r1.status === ctx_r0.AccordionStatus.Complete);\n    ɵngcc0.ɵɵadvance(8);\n    ɵngcc0.ɵɵproperty(\"@skipInitialRender\", undefined)(\"id\", ctx_r0.getAccordionContentId(panel_r1.templateId));\n    ɵngcc0.ɵɵattribute(\"aria-hidden\", !panel_r1.open)(\"aria-labelledby\", ctx_r0.getAccordionHeaderId(panel_r1.templateId));\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", panel_r1.open);\n  }\n}\n\nconst _c4 = [\"clrStepper\", \"\"];\nconst _c5 = [\"buttonProjectedRef\"];\n\nfunction ClrButton_ng_template_0_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"span\", 3);\n  }\n}\n\nfunction ClrButton_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"button\", 1);\n    ɵngcc0.ɵɵlistener(\"click\", function ClrButton_ng_template_0_Template_button_click_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r4);\n      const ctx_r3 = ɵngcc0.ɵɵnextContext();\n      return ctx_r3.emitClick($event);\n    });\n    ɵngcc0.ɵɵtemplate(1, ClrButton_ng_template_0_span_1_Template, 1, 0, \"span\", 2);\n    ɵngcc0.ɵɵprojection(2);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵclassMap(ctx_r1.classNames);\n    ɵngcc0.ɵɵattribute(\"type\", ctx_r1.type)(\"name\", ctx_r1.name)(\"disabled\", ctx_r1.disabled)(\"id\", ctx_r1.id);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r1.loading);\n  }\n}\n\nfunction ClrButtonGroup_ng_container_0_ng_template_1_Template(rf, ctx) {}\n\nfunction ClrButtonGroup_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtemplate(1, ClrButtonGroup_ng_container_0_ng_template_1_Template, 0, 0, \"ng-template\", 3);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const inlineButton_r4 = ctx.$implicit;\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", inlineButton_r4.templateRef);\n  }\n}\n\nfunction ClrButtonGroup_ng_container_1_div_5_ng_template_1_Template(rf, ctx) {}\n\nfunction ClrButtonGroup_ng_container_1_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 9);\n    ɵngcc0.ɵɵtemplate(1, ClrButtonGroup_ng_container_1_div_5_ng_template_1_Template, 0, 0, \"ng-template\", 3);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r7 = ɵngcc0.ɵɵnextContext(2);\n\n    const _r2 = ɵngcc0.ɵɵreference(3);\n\n    ɵngcc0.ɵɵproperty(\"id\", ctx_r7.popoverId);\n    ɵngcc0.ɵɵattribute(\"id\", ctx_r7.popoverId)(\"aria-hidden\", !ctx_r7.open);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", _r2);\n  }\n}\n\nfunction ClrButtonGroup_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵelementStart(1, \"div\", 4, 5);\n    ɵngcc0.ɵɵelementStart(3, \"button\", 6);\n    ɵngcc0.ɵɵelement(4, \"cds-icon\", 7);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵtemplate(5, ClrButtonGroup_ng_container_1_div_5_Template, 2, 4, \"div\", 8);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngClass\", ctx_r1.menuPosition);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵattribute(\"aria-controls\", ctx_r1.popoverId)(\"aria-expanded\", ctx_r1.open)(\"aria-label\", ctx_r1.commonStrings.keys.rowActions);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵattribute(\"title\", ctx_r1.commonStrings.keys.more);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"clrPopoverContent\", ctx_r1.open)(\"clrPopoverContentAt\", ctx_r1.popoverPosition)(\"clrPopoverContentOutsideClickToClose\", true)(\"clrPopoverContentScrollToClose\", true);\n  }\n}\n\nfunction ClrButtonGroup_ng_template_2_ng_container_0_ng_template_1_Template(rf, ctx) {}\n\nfunction ClrButtonGroup_ng_template_2_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtemplate(1, ClrButtonGroup_ng_template_2_ng_container_0_ng_template_1_Template, 0, 0, \"ng-template\", 3);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const menuButton_r10 = ctx.$implicit;\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", menuButton_r10.templateRef);\n  }\n}\n\nfunction ClrButtonGroup_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵtemplate(0, ClrButtonGroup_ng_template_2_ng_container_0_Template, 2, 1, \"ng-container\", 0);\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngForOf\", ctx_r3.menuButtons);\n  }\n}\n\nconst _c6 = [\"clrLoading\", \"\"];\n\nfunction ClrLoadingButton_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\");\n    ɵngcc0.ɵɵelement(1, \"span\", 2);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"@spinner\", undefined);\n  }\n}\n\nfunction ClrLoadingButton_span_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"span\");\n    ɵngcc0.ɵɵelementStart(1, \"span\", 3);\n    ɵngcc0.ɵɵlistener(\"@validated.done\", function ClrLoadingButton_span_2_Template_span_animation_validated_done_1_listener() {\n      ɵngcc0.ɵɵrestoreView(_r4);\n      const ctx_r3 = ɵngcc0.ɵɵnextContext();\n      return ctx_r3.loadingStateChange(ctx_r3.buttonState.DEFAULT);\n    });\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"@validated\", undefined);\n  }\n}\n\nfunction ClrLoadingButton_span_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\");\n    ɵngcc0.ɵɵprojection(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    ɵngcc0.ɵɵproperty(\"@defaultButton\", undefined);\n  }\n}\n\nfunction ClrControlContainer_label_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"label\");\n  }\n}\n\nfunction ClrControlContainer_cds_icon_5_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"cds-icon\", 5);\n  }\n}\n\nfunction ClrControlContainer_cds_icon_6_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"cds-icon\", 6);\n  }\n}\n\nfunction ClrControlContainer_ng_content_7_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵprojection(0, 2, [\"*ngIf\", \"showHelper\"]);\n  }\n}\n\nfunction ClrControlContainer_ng_content_8_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵprojection(0, 3, [\"*ngIf\", \"showInvalid\"]);\n  }\n}\n\nfunction ClrControlContainer_ng_content_9_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵprojection(0, 4, [\"*ngIf\", \"showValid\"]);\n  }\n}\n\nconst _c7 = [[[\"label\"]], \"*\", [[\"clr-control-helper\"]], [[\"clr-control-error\"]], [[\"clr-control-success\"]]];\nconst _c8 = [\"label\", \"*\", \"clr-control-helper\", \"clr-control-error\", \"clr-control-success\"];\n\nfunction ClrCheckboxWrapper_label_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"label\");\n  }\n}\n\nconst _c9 = [[[\"\", \"clrCheckbox\", \"\"], [\"\", \"clrToggle\", \"\"]], [[\"label\"]]];\nconst _c10 = [\"[clrCheckbox],[clrToggle]\", \"label\"];\n\nfunction ClrCheckboxContainer_label_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"label\");\n  }\n}\n\nfunction ClrCheckboxContainer_ng_content_5_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵprojection(0, 2, [\"*ngIf\", \"showHelper\"]);\n  }\n}\n\nfunction ClrCheckboxContainer_cds_icon_6_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"cds-icon\", 5);\n  }\n}\n\nfunction ClrCheckboxContainer_cds_icon_7_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"cds-icon\", 6);\n  }\n}\n\nfunction ClrCheckboxContainer_ng_content_8_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵprojection(0, 3, [\"*ngIf\", \"showInvalid\"]);\n  }\n}\n\nfunction ClrCheckboxContainer_ng_content_9_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵprojection(0, 4, [\"*ngIf\", \"showValid\"]);\n  }\n}\n\nconst _c11 = [[[\"label\"]], [[\"clr-checkbox-wrapper\"], [\"clr-toggle-wrapper\"]], [[\"clr-control-helper\"]], [[\"clr-control-error\"]], [[\"clr-control-success\"]]];\nconst _c12 = [\"label\", \"clr-checkbox-wrapper,clr-toggle-wrapper\", \"clr-control-helper\", \"clr-control-error\", \"clr-control-success\"];\nconst _c13 = [\"clrKeyFocus\", \"\"];\nconst _c14 = [\"clrRovingTabindex\", \"\"];\nconst _c15 = [\"controlContainer\"];\n\nfunction ClrComboboxContainer_label_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"label\");\n  }\n}\n\nfunction ClrComboboxContainer_cds_icon_5_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"cds-icon\", 5);\n  }\n}\n\nfunction ClrComboboxContainer_cds_icon_6_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"cds-icon\", 6);\n  }\n}\n\nfunction ClrComboboxContainer_ng_content_7_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵprojection(0, 2, [\"*ngIf\", \"showHelper\"]);\n  }\n}\n\nfunction ClrComboboxContainer_ng_content_8_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵprojection(0, 3, [\"*ngIf\", \"showInvalid\"]);\n  }\n}\n\nfunction ClrComboboxContainer_ng_content_9_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵprojection(0, 4, [\"*ngIf\", \"showValid\"]);\n  }\n}\n\nconst _c16 = [[[\"label\"]], [[\"clr-combobox\"]], [[\"clr-control-helper\"]], [[\"clr-control-error\"]], [[\"clr-control-success\"]]];\nconst _c17 = [\"label\", \"clr-combobox\", \"clr-control-helper\", \"clr-control-error\", \"clr-control-success\"];\nconst _c18 = [\"textboxInput\"];\nconst _c19 = [\"trigger\"];\n\nconst _c20 = function (a0) {\n  return {\n    $implicit: a0\n  };\n};\n\nfunction ClrCombobox_span_1_span_1_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainer(0, 18);\n  }\n\n  if (rf & 2) {\n    const i_r6 = ɵngcc0.ɵɵnextContext().index;\n    const ctx_r7 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r7.optionSelected.template)(\"ngTemplateOutletContext\", ɵngcc0.ɵɵpureFunction1(2, _c20, ctx_r7.optionSelectionService.selectionModel.model[i_r6]));\n  }\n}\n\nfunction ClrCombobox_span_1_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r10 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"span\", 12);\n    ɵngcc0.ɵɵelementStart(1, \"span\", 13);\n    ɵngcc0.ɵɵelementStart(2, \"span\", 14);\n    ɵngcc0.ɵɵtemplate(3, ClrCombobox_span_1_span_1_ng_container_3_Template, 1, 4, \"ng-container\", 15);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementStart(4, \"span\", 13);\n    ɵngcc0.ɵɵelementStart(5, \"button\", 16);\n    ɵngcc0.ɵɵlistener(\"click\", function ClrCombobox_span_1_span_1_Template_button_click_5_listener() {\n      const restoredCtx = ɵngcc0.ɵɵrestoreView(_r10);\n      const item_r5 = restoredCtx.$implicit;\n      const ctx_r9 = ɵngcc0.ɵɵnextContext(2);\n      return ctx_r9.unselect(item_r5);\n    });\n    ɵngcc0.ɵɵelement(6, \"cds-icon\", 17);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const i_r6 = ctx.index;\n    const ctx_r4 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(3);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r4.optionSelected);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"disabled\", (ctx_r4.control == null ? null : ctx_r4.control.disabled) ? true : null);\n    ɵngcc0.ɵɵattribute(\"aria-label\", ctx_r4.commonStrings.keys.comboboxDelete + \" \" + ctx_r4.optionSelectionService.selectionModel.toString(ctx_r4.displayField, i_r6));\n  }\n}\n\nfunction ClrCombobox_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 10);\n    ɵngcc0.ɵɵtemplate(1, ClrCombobox_span_1_span_1_Template, 7, 3, \"span\", 11);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"clrRovingTabindexDisabled\", ctx_r0.control == null ? null : ctx_r0.control.disabled);\n    ɵngcc0.ɵɵattribute(\"aria-label\", ctx_r0.getSelectionAriaLabel())(\"aria-disabled\", (ctx_r0.control == null ? null : ctx_r0.control.disabled) ? true : null);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", ctx_r0.multiSelectModel);\n  }\n}\n\nfunction ClrCombobox_div_9_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 19);\n    ɵngcc0.ɵɵprojection(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n}\n\nfunction ClrOption_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 1);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r0.commonStrings.keys.comboboxSelected);\n  }\n}\n\nfunction ClrOptions_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 2);\n    ɵngcc0.ɵɵelementStart(1, \"clr-spinner\", 3);\n    ɵngcc0.ɵɵtext(2);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementStart(3, \"span\", 4);\n    ɵngcc0.ɵɵtext(4);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", ctx_r0.commonStrings.keys.loading, \" \");\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", ctx_r0.searchText(ctx_r0.optionSelectionService.currentInput), \" \");\n  }\n}\n\nfunction ClrOptions_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\");\n    ɵngcc0.ɵɵelementStart(1, \"span\", 5);\n    ɵngcc0.ɵɵtext(2);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", ctx_r1.commonStrings.keys.comboboxNoResults, \" \");\n  }\n}\n\nfunction ClrInputContainer_label_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"label\");\n  }\n}\n\nfunction ClrInputContainer_cds_icon_5_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"cds-icon\", 5);\n  }\n}\n\nfunction ClrInputContainer_cds_icon_6_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"cds-icon\", 6);\n  }\n}\n\nfunction ClrInputContainer_ng_content_7_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵprojection(0, 2, [\"*ngIf\", \"showHelper\"]);\n  }\n}\n\nfunction ClrInputContainer_ng_content_8_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵprojection(0, 3, [\"*ngIf\", \"showInvalid\"]);\n  }\n}\n\nfunction ClrInputContainer_ng_content_9_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵprojection(0, 4, [\"*ngIf\", \"showValid\"]);\n  }\n}\n\nconst _c21 = [[[\"label\"]], [[\"\", \"clrInput\", \"\"]], [[\"clr-control-helper\"]], [[\"clr-control-error\"]], [[\"clr-control-success\"]]];\nconst _c22 = [\"label\", \"[clrInput]\", \"clr-control-helper\", \"clr-control-error\", \"clr-control-success\"];\n\nfunction ClrDatalistContainer_label_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"label\");\n  }\n}\n\nfunction ClrDatalistContainer_cds_icon_7_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"cds-icon\", 6);\n  }\n}\n\nfunction ClrDatalistContainer_cds_icon_8_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"cds-icon\", 7);\n  }\n}\n\nfunction ClrDatalistContainer_ng_content_9_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵprojection(0, 3, [\"*ngIf\", \"showHelper\"]);\n  }\n}\n\nfunction ClrDatalistContainer_ng_content_10_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵprojection(0, 4, [\"*ngIf\", \"showInvalid\"]);\n  }\n}\n\nfunction ClrDatalistContainer_ng_content_11_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵprojection(0, 5, [\"*ngIf\", \"showValid\"]);\n  }\n}\n\nconst _c23 = [[[\"label\"]], [[\"\", \"clrDatalistInput\", \"\"]], [[\"datalist\"]], [[\"clr-control-helper\"]], [[\"clr-control-error\"]], [[\"clr-control-success\"]]];\nconst _c24 = [\"label\", \"[clrDatalistInput]\", \"datalist\", \"clr-control-helper\", \"clr-control-error\", \"clr-control-success\"];\n\nfunction ClrCalendar_th_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"th\", 4);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const day_r2 = ctx.$implicit;\n    ɵngcc0.ɵɵattribute(\"aria-label\", day_r2.day);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", day_r2.narrow, \" \");\n  }\n}\n\nfunction ClrCalendar_tr_3_td_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"td\", 7);\n    ɵngcc0.ɵɵelement(1, \"clr-day\", 8);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const dayView_r5 = ctx.$implicit;\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"clrDayView\", dayView_r5);\n  }\n}\n\nfunction ClrCalendar_tr_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"tr\", 5);\n    ɵngcc0.ɵɵtemplate(1, ClrCalendar_tr_3_td_1_Template, 2, 1, \"td\", 6);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const row_r3 = ctx.$implicit;\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", row_r3);\n  }\n}\n\nconst _c25 = [\"actionButton\"];\n\nfunction ClrDateContainer_label_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"label\");\n  }\n}\n\nfunction ClrDateContainer_button_6_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"button\", 8, 9);\n    ɵngcc0.ɵɵelement(2, \"cds-icon\", 10);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"disabled\", ctx_r1.isInputDateDisabled);\n  }\n}\n\nfunction ClrDateContainer_clr_datepicker_view_manager_7_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"clr-datepicker-view-manager\", 11);\n  }\n}\n\nfunction ClrDateContainer_cds_icon_8_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"cds-icon\", 12);\n  }\n}\n\nfunction ClrDateContainer_cds_icon_9_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"cds-icon\", 13);\n  }\n}\n\nfunction ClrDateContainer_ng_content_10_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵprojection(0, 2, [\"*ngIf\", \"showHelper\"]);\n  }\n}\n\nfunction ClrDateContainer_ng_content_11_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵprojection(0, 3, [\"*ngIf\", \"showInvalid\"]);\n  }\n}\n\nfunction ClrDateContainer_ng_content_12_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵprojection(0, 4, [\"*ngIf\", \"showValid\"]);\n  }\n}\n\nconst _c26 = [[[\"label\"]], [[\"\", \"clrDate\", \"\"]], [[\"clr-control-helper\"]], [[\"clr-control-error\"]], [[\"clr-control-success\"]]];\nconst _c27 = [\"label\", \"[clrDate]\", \"clr-control-helper\", \"clr-control-error\", \"clr-control-success\"];\n\nfunction ClrDatepickerViewManager_clr_monthpicker_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"clr-monthpicker\");\n  }\n}\n\nfunction ClrDatepickerViewManager_clr_yearpicker_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"clr-yearpicker\");\n  }\n}\n\nfunction ClrDatepickerViewManager_clr_daypicker_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"clr-daypicker\");\n  }\n}\n\nfunction ClrMonthpicker_button_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r4 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"button\", 1);\n    ɵngcc0.ɵɵlistener(\"click\", function ClrMonthpicker_button_0_Template_button_click_0_listener() {\n      const restoredCtx = ɵngcc0.ɵɵrestoreView(_r4);\n      const monthIndex_r2 = restoredCtx.index;\n      const ctx_r3 = ɵngcc0.ɵɵnextContext();\n      return ctx_r3.changeMonth(monthIndex_r2);\n    });\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const month_r1 = ctx.$implicit;\n    const monthIndex_r2 = ctx.index;\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵclassProp(\"is-selected\", monthIndex_r2 === ctx_r0.calendarMonthIndex);\n    ɵngcc0.ɵɵattribute(\"tabindex\", ctx_r0.getTabIndex(monthIndex_r2));\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", month_r1, \" \");\n  }\n}\n\nfunction ClrYearpicker_button_8_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"button\", 7);\n    ɵngcc0.ɵɵlistener(\"click\", function ClrYearpicker_button_8_Template_button_click_0_listener() {\n      const restoredCtx = ɵngcc0.ɵɵrestoreView(_r3);\n      const year_r1 = restoredCtx.$implicit;\n      const ctx_r2 = ɵngcc0.ɵɵnextContext();\n      return ctx_r2.changeYear(year_r1);\n    });\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const year_r1 = ctx.$implicit;\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵclassProp(\"is-selected\", year_r1 === ctx_r0.calendarYear);\n    ɵngcc0.ɵɵattribute(\"tabindex\", ctx_r0.getTabIndex(year_r1));\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", year_r1, \" \");\n  }\n}\n\nfunction ClrPasswordContainer_label_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"label\");\n  }\n}\n\nfunction ClrPasswordContainer_button_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"button\", 7);\n    ɵngcc0.ɵɵlistener(\"click\", function ClrPasswordContainer_button_6_Template_button_click_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r8);\n      const ctx_r7 = ɵngcc0.ɵɵnextContext();\n      return ctx_r7.toggle();\n    });\n    ɵngcc0.ɵɵelement(1, \"cds-icon\", 8);\n    ɵngcc0.ɵɵelementStart(2, \"span\", 9);\n    ɵngcc0.ɵɵtext(3);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"disabled\", ctx_r1.control == null ? null : ctx_r1.control.disabled);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵattribute(\"shape\", ctx_r1.show ? \"eye-hide\" : \"eye\");\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", ctx_r1.show ? ctx_r1.commonStrings.keys.passwordHide : ctx_r1.commonStrings.keys.passwordShow, \" \");\n  }\n}\n\nfunction ClrPasswordContainer_cds_icon_7_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"cds-icon\", 10);\n  }\n}\n\nfunction ClrPasswordContainer_cds_icon_8_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"cds-icon\", 11);\n  }\n}\n\nfunction ClrPasswordContainer_ng_content_9_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵprojection(0, 2, [\"*ngIf\", \"showHelper\"]);\n  }\n}\n\nfunction ClrPasswordContainer_ng_content_10_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵprojection(0, 3, [\"*ngIf\", \"showInvalid\"]);\n  }\n}\n\nfunction ClrPasswordContainer_ng_content_11_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵprojection(0, 4, [\"*ngIf\", \"showValid\"]);\n  }\n}\n\nconst _c28 = [[[\"label\"]], [[\"\", \"clrPassword\", \"\"]], [[\"clr-control-helper\"]], [[\"clr-control-error\"]], [[\"clr-control-success\"]]];\nconst _c29 = [\"label\", \"[clrPassword]\", \"clr-control-helper\", \"clr-control-error\", \"clr-control-success\"];\n\nfunction ClrRadioWrapper_label_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"label\");\n  }\n}\n\nconst _c30 = [[[\"\", \"clrRadio\", \"\"]], [[\"label\"]]];\nconst _c31 = [\"[clrRadio]\", \"label\"];\n\nfunction ClrRadioContainer_label_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"label\");\n  }\n}\n\nfunction ClrRadioContainer_ng_content_5_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵprojection(0, 2, [\"*ngIf\", \"showHelper\"]);\n  }\n}\n\nfunction ClrRadioContainer_cds_icon_6_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"cds-icon\", 5);\n  }\n}\n\nfunction ClrRadioContainer_cds_icon_7_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"cds-icon\", 6);\n  }\n}\n\nfunction ClrRadioContainer_ng_content_8_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵprojection(0, 3, [\"*ngIf\", \"showInvalid\"]);\n  }\n}\n\nfunction ClrRadioContainer_ng_content_9_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵprojection(0, 4, [\"*ngIf\", \"showValid\"]);\n  }\n}\n\nconst _c32 = [[[\"label\"]], [[\"clr-radio-wrapper\"]], [[\"clr-control-helper\"]], [[\"clr-control-error\"]], [[\"clr-control-success\"]]];\nconst _c33 = [\"label\", \"clr-radio-wrapper\", \"clr-control-helper\", \"clr-control-error\", \"clr-control-success\"];\n\nfunction ClrRangeContainer_label_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"label\");\n  }\n}\n\nfunction ClrRangeContainer_span_5_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"span\", 6);\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"width\", ctx_r1.getRangeProgressFillWidth());\n  }\n}\n\nfunction ClrRangeContainer_cds_icon_6_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"cds-icon\", 7);\n  }\n}\n\nfunction ClrRangeContainer_cds_icon_7_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"cds-icon\", 8);\n  }\n}\n\nfunction ClrRangeContainer_ng_content_8_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵprojection(0, 2, [\"*ngIf\", \"showHelper\"]);\n  }\n}\n\nfunction ClrRangeContainer_ng_content_9_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵprojection(0, 3, [\"*ngIf\", \"showInvalid\"]);\n  }\n}\n\nfunction ClrRangeContainer_ng_content_10_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵprojection(0, 4, [\"*ngIf\", \"showValid\"]);\n  }\n}\n\nconst _c34 = [[[\"label\"]], [[\"\", \"clrRange\", \"\"]], [[\"clr-control-helper\"]], [[\"clr-control-error\"]], [[\"clr-control-success\"]]];\nconst _c35 = [\"label\", \"[clrRange]\", \"clr-control-helper\", \"clr-control-error\", \"clr-control-success\"];\n\nfunction ClrSelectContainer_label_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"label\");\n  }\n}\n\nfunction ClrSelectContainer_cds_icon_5_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"cds-icon\", 5);\n  }\n}\n\nfunction ClrSelectContainer_cds_icon_6_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"cds-icon\", 6);\n  }\n}\n\nfunction ClrSelectContainer_ng_content_7_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵprojection(0, 2, [\"*ngIf\", \"showHelper\"]);\n  }\n}\n\nfunction ClrSelectContainer_ng_content_8_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵprojection(0, 3, [\"*ngIf\", \"showInvalid\"]);\n  }\n}\n\nfunction ClrSelectContainer_ng_content_9_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵprojection(0, 4, [\"*ngIf\", \"showValid\"]);\n  }\n}\n\nconst _c36 = [[[\"label\"]], [[\"\", \"clrSelect\", \"\"]], [[\"clr-control-helper\"]], [[\"clr-control-error\"]], [[\"clr-control-success\"]]];\nconst _c37 = [\"label\", \"[clrSelect]\", \"clr-control-helper\", \"clr-control-error\", \"clr-control-success\"];\n\nfunction ClrTextareaContainer_label_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"label\");\n  }\n}\n\nfunction ClrTextareaContainer_cds_icon_5_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"cds-icon\", 5);\n  }\n}\n\nfunction ClrTextareaContainer_cds_icon_6_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"cds-icon\", 6);\n  }\n}\n\nfunction ClrTextareaContainer_ng_content_7_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵprojection(0, 2, [\"*ngIf\", \"showHelper\"]);\n  }\n}\n\nfunction ClrTextareaContainer_ng_content_8_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵprojection(0, 3, [\"*ngIf\", \"showInvalid\"]);\n  }\n}\n\nfunction ClrTextareaContainer_ng_content_9_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵprojection(0, 4, [\"*ngIf\", \"showValid\"]);\n  }\n}\n\nconst _c38 = [[[\"label\"]], [[\"\", \"clrTextarea\", \"\"]], [[\"clr-control-helper\"]], [[\"clr-control-error\"]], [[\"clr-control-success\"]]];\nconst _c39 = [\"label\", \"[clrTextarea]\", \"clr-control-helper\", \"clr-control-error\", \"clr-control-success\"];\nconst _c40 = [\"anchor\"];\n\nfunction ClrDatagridFilter_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 4);\n    ɵngcc0.ɵɵelementStart(1, \"div\", 5);\n    ɵngcc0.ɵɵelementStart(2, \"button\", 6);\n    ɵngcc0.ɵɵelement(3, \"cds-icon\", 7);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵprojection(4);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"id\", ctx_r1.popoverId);\n    ɵngcc0.ɵɵattribute(\"aria-label\", ctx_r1.commonStrings.keys.datagridFilterDialogAriaLabel);\n    ɵngcc0.ɵɵadvance(3);\n    ɵngcc0.ɵɵattribute(\"title\", ctx_r1.commonStrings.keys.close);\n  }\n}\n\nconst _c41 = [\"input_low\"];\nconst _c42 = [\"input\"];\nconst _c43 = [\"columnPortal\"];\n\nfunction WrappedColumn_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵprojection(0);\n  }\n}\n\nfunction ClrDatagridColumn_button_1_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainer(0);\n  }\n}\n\nfunction ClrDatagridColumn_button_1_cds_icon_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"cds-icon\", 10);\n  }\n\n  if (rf & 2) {\n    const ctx_r8 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵattribute(\"direction\", ctx_r8.sortDirection);\n  }\n}\n\nfunction ClrDatagridColumn_button_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r10 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"button\", 7);\n    ɵngcc0.ɵɵlistener(\"click\", function ClrDatagridColumn_button_1_Template_button_click_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r10);\n      const ctx_r9 = ɵngcc0.ɵɵnextContext();\n      return ctx_r9.sort();\n    });\n    ɵngcc0.ɵɵtemplate(1, ClrDatagridColumn_button_1_ng_container_1_Template, 1, 0, \"ng-container\", 8);\n    ɵngcc0.ɵɵtemplate(2, ClrDatagridColumn_button_1_cds_icon_2_Template, 1, 1, \"cds-icon\", 9);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n\n    const _r3 = ɵngcc0.ɵɵreference(6);\n\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", _r3);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r0.sortDirection);\n  }\n}\n\nfunction ClrDatagridColumn_clr_dg_string_filter_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r12 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"clr-dg-string-filter\", 11);\n    ɵngcc0.ɵɵlistener(\"clrFilterValueChange\", function ClrDatagridColumn_clr_dg_string_filter_3_Template_clr_dg_string_filter_clrFilterValueChange_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r12);\n      const ctx_r11 = ɵngcc0.ɵɵnextContext();\n      return ctx_r11.filterValue = $event;\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"clrFilterPlaceholder\", ctx_r1.filterStringPlaceholderValue)(\"clrDgStringFilter\", ctx_r1.registered)(\"clrFilterValue\", ctx_r1.filterValue);\n  }\n}\n\nfunction ClrDatagridColumn_clr_dg_numeric_filter_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r14 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"clr-dg-numeric-filter\", 12);\n    ɵngcc0.ɵɵlistener(\"clrFilterValueChange\", function ClrDatagridColumn_clr_dg_numeric_filter_4_Template_clr_dg_numeric_filter_clrFilterValueChange_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r14);\n      const ctx_r13 = ɵngcc0.ɵɵnextContext();\n      return ctx_r13.filterValue = $event;\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"clrFilterMaxPlaceholder\", ctx_r2.filterMaxPlaceholderValue)(\"clrFilterMinPlaceholder\", ctx_r2.filterMinPlaceholderValue)(\"clrDgNumericFilter\", ctx_r2.registered)(\"clrFilterValue\", ctx_r2.filterValue);\n  }\n}\n\nfunction ClrDatagridColumn_ng_template_5_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵprojection(0, 1);\n  }\n}\n\nfunction ClrDatagridColumn_span_7_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainer(0);\n  }\n}\n\nfunction ClrDatagridColumn_span_7_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 13);\n    ɵngcc0.ɵɵtemplate(1, ClrDatagridColumn_span_7_ng_container_1_Template, 1, 0, \"ng-container\", 8);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    ɵngcc0.ɵɵnextContext();\n\n    const _r3 = ɵngcc0.ɵɵreference(6);\n\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", _r3);\n  }\n}\n\nfunction ClrDatagridColumn_clr_dg_column_separator_8_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"clr-dg-column-separator\");\n  }\n}\n\nconst _c44 = [[[\"clr-dg-filter\"], [\"clr-dg-string-filter\"], [\"clr-dg-numeric-filter\"]], \"*\"];\nconst _c45 = [\"clr-dg-filter, clr-dg-string-filter, clr-dg-numeric-filter\", \"*\"];\n\nfunction ClrDatagridPlaceholder_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"div\", 4);\n  }\n}\n\nfunction ClrDatagridPlaceholder_ng_content_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵprojection(0, 0, [\"*ngIf\", \"emptyDatagrid\"]);\n  }\n}\n\nfunction ClrSignpost_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵelementStart(1, \"button\", 1);\n    ɵngcc0.ɵɵelement(2, \"cds-icon\", 2);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵattribute(\"title\", ctx_r0.commonStrings.keys.info);\n  }\n}\n\nconst _c46 = [\"cellPortal\"];\n\nfunction WrappedCell_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵprojection(0);\n  }\n}\n\nconst _c47 = [\"rowPortal\"];\n\nfunction WrappedRow_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵprojection(0);\n  }\n}\n\nconst _c48 = [\"detailButton\"];\nconst _c49 = [\"stickyCells\"];\nconst _c50 = [\"scrollableCells\"];\nconst _c51 = [\"calculatedCells\"];\n\nfunction ClrDatagridRow_label_0_clr_expandable_animation_1_ng_template_1_Template(rf, ctx) {}\n\nfunction ClrDatagridRow_label_0_clr_expandable_animation_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"clr-expandable-animation\", 7);\n    ɵngcc0.ɵɵtemplate(1, ClrDatagridRow_label_0_clr_expandable_animation_1_ng_template_1_Template, 0, 0, \"ng-template\", 8);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r8 = ɵngcc0.ɵɵnextContext(2);\n\n    const _r5 = ɵngcc0.ɵɵreference(6);\n\n    ɵngcc0.ɵɵproperty(\"clrExpandTrigger\", ctx_r8.expandAnimationTrigger);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", _r5);\n  }\n}\n\nfunction ClrDatagridRow_label_0_2_ng_template_0_Template(rf, ctx) {}\n\nfunction ClrDatagridRow_label_0_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵtemplate(0, ClrDatagridRow_label_0_2_ng_template_0_Template, 0, 0, \"ng-template\", 8);\n  }\n\n  if (rf & 2) {\n    ɵngcc0.ɵɵnextContext(2);\n\n    const _r5 = ɵngcc0.ɵɵreference(6);\n\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", _r5);\n  }\n}\n\nfunction ClrDatagridRow_label_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r13 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"label\", 6);\n    ɵngcc0.ɵɵlistener(\"mousedown\", function ClrDatagridRow_label_0_Template_label_mousedown_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r13);\n      const ctx_r12 = ɵngcc0.ɵɵnextContext();\n      return ctx_r12.clearRanges($event);\n    });\n    ɵngcc0.ɵɵtemplate(1, ClrDatagridRow_label_0_clr_expandable_animation_1_Template, 2, 2, \"clr-expandable-animation\", 1);\n    ɵngcc0.ɵɵtemplate(2, ClrDatagridRow_label_0_2_Template, 1, 1, undefined, 2);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r0.expand.expandable);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", !ctx_r0.expand.expandable);\n  }\n}\n\nfunction ClrDatagridRow_clr_expandable_animation_1_ng_template_1_Template(rf, ctx) {}\n\nfunction ClrDatagridRow_clr_expandable_animation_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"clr-expandable-animation\", 7);\n    ɵngcc0.ɵɵtemplate(1, ClrDatagridRow_clr_expandable_animation_1_ng_template_1_Template, 0, 0, \"ng-template\", 8);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n\n    const _r5 = ɵngcc0.ɵɵreference(6);\n\n    ɵngcc0.ɵɵproperty(\"clrExpandTrigger\", ctx_r1.expandAnimationTrigger);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", _r5);\n  }\n}\n\nfunction ClrDatagridRow_2_ng_template_0_Template(rf, ctx) {}\n\nfunction ClrDatagridRow_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵtemplate(0, ClrDatagridRow_2_ng_template_0_Template, 0, 0, \"ng-template\", 8);\n  }\n\n  if (rf & 2) {\n    ɵngcc0.ɵɵnextContext();\n\n    const _r5 = ɵngcc0.ɵɵreference(6);\n\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", _r5);\n  }\n}\n\nfunction ClrDatagridRow_ng_template_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵprojection(0);\n  }\n}\n\nconst _c52 = function (a0) {\n  return {\n    \"clr-form-control-disabled\": a0\n  };\n};\n\nfunction ClrDatagridRow_ng_template_5_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r26 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"div\", 19);\n    ɵngcc0.ɵɵelementStart(1, \"div\", 20);\n    ɵngcc0.ɵɵelementStart(2, \"input\", 21);\n    ɵngcc0.ɵɵlistener(\"ngModelChange\", function ClrDatagridRow_ng_template_5_div_4_Template_input_ngModelChange_2_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r26);\n      const ctx_r25 = ɵngcc0.ɵɵnextContext(2);\n      return ctx_r25.toggle($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementStart(3, \"label\", 22);\n    ɵngcc0.ɵɵlistener(\"click\", function ClrDatagridRow_ng_template_5_div_4_Template_label_click_3_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r26);\n      const ctx_r27 = ɵngcc0.ɵɵnextContext(2);\n      return ctx_r27.clearRanges($event);\n    });\n    ɵngcc0.ɵɵelementStart(4, \"span\", 23);\n    ɵngcc0.ɵɵtext(5);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r17 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction1(8, _c52, !ctx_r17.clrDgSelectable));\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngModel\", ctx_r17.selected)(\"id\", ctx_r17.checkboxId);\n    ɵngcc0.ɵɵattribute(\"disabled\", ctx_r17.clrDgSelectable ? null : true)(\"aria-disabled\", ctx_r17.clrDgSelectable ? null : true)(\"aria-label\", ctx_r17.commonStrings.keys.select);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"for\", ctx_r17.checkboxId);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r17.commonStrings.keys.select);\n  }\n}\n\nfunction ClrDatagridRow_ng_template_5_div_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r29 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"div\", 19);\n    ɵngcc0.ɵɵelementStart(1, \"input\", 24);\n    ɵngcc0.ɵɵlistener(\"ngModelChange\", function ClrDatagridRow_ng_template_5_div_5_Template_input_ngModelChange_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r29);\n      const ctx_r28 = ɵngcc0.ɵɵnextContext(2);\n      return ctx_r28.selection.currentSingle = $event;\n    });\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r18 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction1(9, _c52, !ctx_r18.clrDgSelectable));\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"id\", ctx_r18.radioId)(\"name\", ctx_r18.selection.id + \"-radio\")(\"value\", ctx_r18.item)(\"ngModel\", ctx_r18.selection.currentSingle)(\"checked\", ctx_r18.selection.currentSingle === ctx_r18.item);\n    ɵngcc0.ɵɵattribute(\"disabled\", ctx_r18.clrDgSelectable ? null : true)(\"aria-disabled\", ctx_r18.clrDgSelectable ? null : true)(\"aria-label\", ctx_r18.commonStrings.keys.select);\n  }\n}\n\nfunction ClrDatagridRow_ng_template_5_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 25);\n    ɵngcc0.ɵɵprojection(1, 2);\n    ɵngcc0.ɵɵelementEnd();\n  }\n}\n\nfunction ClrDatagridRow_ng_template_5_div_7_ng_container_1_button_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r34 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"button\", 29);\n    ɵngcc0.ɵɵlistener(\"click\", function ClrDatagridRow_ng_template_5_div_7_ng_container_1_button_1_Template_button_click_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r34);\n      const ctx_r33 = ɵngcc0.ɵɵnextContext(4);\n      return ctx_r33.toggleExpand();\n    });\n    ɵngcc0.ɵɵelement(1, \"cds-icon\", 30);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r31 = ɵngcc0.ɵɵnextContext(4);\n    ɵngcc0.ɵɵattribute(\"aria-expanded\", ctx_r31.expand.expanded)(\"aria-label\", ctx_r31.expand.expanded ? ctx_r31.clrDgDetailCloseLabel : ctx_r31.clrDgDetailOpenLabel)(\"aria-controls\", ctx_r31.expandableId);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵattribute(\"direction\", ctx_r31.expand.expanded ? \"down\" : \"right\")(\"title\", ctx_r31.expand.expanded ? ctx_r31.commonStrings.keys.collapse : ctx_r31.commonStrings.keys.expand);\n  }\n}\n\nfunction ClrDatagridRow_ng_template_5_div_7_ng_container_1_clr_spinner_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"clr-spinner\", 31);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r32 = ɵngcc0.ɵɵnextContext(4);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r32.commonStrings.keys.loading);\n  }\n}\n\nfunction ClrDatagridRow_ng_template_5_div_7_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtemplate(1, ClrDatagridRow_ng_template_5_div_7_ng_container_1_button_1_Template, 2, 5, \"button\", 27);\n    ɵngcc0.ɵɵtemplate(2, ClrDatagridRow_ng_template_5_div_7_ng_container_1_clr_spinner_2_Template, 2, 1, \"clr-spinner\", 28);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r30 = ɵngcc0.ɵɵnextContext(3);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", !ctx_r30.expand.loading);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r30.expand.loading);\n  }\n}\n\nfunction ClrDatagridRow_ng_template_5_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 26);\n    ɵngcc0.ɵɵtemplate(1, ClrDatagridRow_ng_template_5_div_7_ng_container_1_Template, 3, 2, \"ng-container\", 2);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r20 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r20.expand.expandable);\n  }\n}\n\nfunction ClrDatagridRow_ng_template_5_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r37 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"div\", 32);\n    ɵngcc0.ɵɵelementStart(1, \"button\", 33, 34);\n    ɵngcc0.ɵɵlistener(\"click\", function ClrDatagridRow_ng_template_5_div_8_Template_button_click_1_listener() {\n      ɵngcc0.ɵɵrestoreView(_r37);\n\n      const _r35 = ɵngcc0.ɵɵreference(2);\n\n      const ctx_r36 = ɵngcc0.ɵɵnextContext(2);\n      return ctx_r36.detailService.toggle(ctx_r36.item, _r35);\n    });\n    ɵngcc0.ɵɵelement(3, \"cds-icon\", 35);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r21 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵclassProp(\"is-open\", ctx_r21.detailService.isRowOpen(ctx_r21.item));\n    ɵngcc0.ɵɵattribute(\"aria-label\", ctx_r21.detailService.isOpen ? ctx_r21.clrDgDetailCloseLabel : ctx_r21.clrDgDetailOpenLabel)(\"aria-expanded\", ctx_r21.detailService.isOpen)(\"aria-controls\", ctx_r21.detailService.id);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵattribute(\"direction\", ctx_r21.detailService.isRowOpen(ctx_r21.item) ? \"left\" : \"right\")(\"title\", ctx_r21.detailService.isRowOpen(ctx_r21.item) ? ctx_r21.commonStrings.keys.close : ctx_r21.commonStrings.keys.open);\n  }\n}\n\nfunction ClrDatagridRow_ng_template_5_14_ng_template_0_Template(rf, ctx) {}\n\nfunction ClrDatagridRow_ng_template_5_14_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵtemplate(0, ClrDatagridRow_ng_template_5_14_ng_template_0_Template, 0, 0, \"ng-template\", 8);\n  }\n\n  if (rf & 2) {\n    ɵngcc0.ɵɵnextContext(2);\n\n    const _r3 = ɵngcc0.ɵɵreference(4);\n\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", _r3);\n  }\n}\n\nfunction ClrDatagridRow_ng_template_5_15_ng_template_0_Template(rf, ctx) {}\n\nfunction ClrDatagridRow_ng_template_5_15_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵtemplate(0, ClrDatagridRow_ng_template_5_15_ng_template_0_Template, 0, 0, \"ng-template\", 8);\n  }\n\n  if (rf & 2) {\n    ɵngcc0.ɵɵnextContext(2);\n\n    const _r3 = ɵngcc0.ɵɵreference(4);\n\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", _r3);\n  }\n}\n\nconst _c53 = function (a0) {\n  return {\n    \"is-replaced\": a0\n  };\n};\n\nfunction ClrDatagridRow_ng_template_5_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 9);\n    ɵngcc0.ɵɵelementStart(1, \"div\", 10);\n    ɵngcc0.ɵɵelementContainerStart(2, null, 11);\n    ɵngcc0.ɵɵtemplate(4, ClrDatagridRow_ng_template_5_div_4_Template, 6, 10, \"div\", 12);\n    ɵngcc0.ɵɵtemplate(5, ClrDatagridRow_ng_template_5_div_5_Template, 2, 11, \"div\", 12);\n    ɵngcc0.ɵɵtemplate(6, ClrDatagridRow_ng_template_5_div_6_Template, 2, 0, \"div\", 13);\n    ɵngcc0.ɵɵtemplate(7, ClrDatagridRow_ng_template_5_div_7_Template, 2, 1, \"div\", 14);\n    ɵngcc0.ɵɵtemplate(8, ClrDatagridRow_ng_template_5_div_8_Template, 4, 7, \"div\", 15);\n    ɵngcc0.ɵɵelementContainerEnd();\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementStart(9, \"div\", 16);\n    ɵngcc0.ɵɵelementStart(10, \"div\", 17);\n    ɵngcc0.ɵɵprojection(11, 1);\n    ɵngcc0.ɵɵelementContainer(12, null, 18);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵtemplate(14, ClrDatagridRow_ng_template_5_14_Template, 1, 1, undefined, 2);\n    ɵngcc0.ɵɵtemplate(15, ClrDatagridRow_ng_template_5_15_Template, 1, 1, undefined, 2);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r6 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵclassProp(\"datagrid-row-detail-open\", ctx_r6.detailService.isRowOpen(ctx_r6.item));\n    ɵngcc0.ɵɵproperty(\"id\", ctx_r6.id);\n    ɵngcc0.ɵɵadvance(4);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r6.selection.selectionType === ctx_r6.SELECTION_TYPE.Multi);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r6.selection.selectionType === ctx_r6.SELECTION_TYPE.Single);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r6.rowActionService.hasActionableRow);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r6.globalExpandable.hasExpandableRow);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r6.detailService.enabled);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngClass\", ɵngcc0.ɵɵpureFunction1(11, _c53, ctx_r6.replaced && ctx_r6.expanded));\n    ɵngcc0.ɵɵadvance(5);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r6.replaced && !ctx_r6.expand.loading);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", !ctx_r6.replaced && !ctx_r6.expand.loading);\n  }\n}\n\nconst _c54 = [[[\"clr-dg-row-detail\"]], [[\"clr-dg-cell\"]], [[\"clr-dg-action-overflow\"]]];\nconst _c55 = [\"clr-dg-row-detail\", \"clr-dg-cell\", \"clr-dg-action-overflow\"];\nconst _c56 = [\"scrollableColumns\"];\nconst _c57 = [\"datagridTable\"];\nconst _c58 = [\"projectedDisplayColumns\"];\nconst _c59 = [\"projectedCalculationColumns\"];\nconst _c60 = [\"displayedRows\"];\nconst _c61 = [\"calculationRows\"];\n\nfunction ClrDatagrid_div_12_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r13 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"div\", 24);\n    ɵngcc0.ɵɵlistener(\"keydown.space\", function ClrDatagrid_div_12_Template_div_keydown_space_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r13);\n      const ctx_r12 = ɵngcc0.ɵɵnextContext();\n      ctx_r12.allSelected = !ctx_r12.allSelected;\n      return $event.preventDefault();\n    });\n    ɵngcc0.ɵɵelementStart(1, \"div\", 25);\n    ɵngcc0.ɵɵelementStart(2, \"input\", 26);\n    ɵngcc0.ɵɵlistener(\"ngModelChange\", function ClrDatagrid_div_12_Template_input_ngModelChange_2_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r13);\n      const ctx_r14 = ɵngcc0.ɵɵnextContext();\n      return ctx_r14.allSelected = $event;\n    });\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementStart(3, \"label\", 27);\n    ɵngcc0.ɵɵelementStart(4, \"span\", 28);\n    ɵngcc0.ɵɵtext(5);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelement(6, \"div\", 29);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"id\", ctx_r2.selectAllId)(\"ngModel\", ctx_r2.allSelected);\n    ɵngcc0.ɵɵattribute(\"aria-label\", ctx_r2.commonStrings.keys.selectAll);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"for\", ctx_r2.selectAllId);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r2.commonStrings.keys.selectAll);\n  }\n}\n\nfunction ClrDatagrid_div_13_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 30);\n    ɵngcc0.ɵɵelement(1, \"div\", 29);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵattribute(\"aria-label\", ctx_r3.clrDgSingleSelectionAriaLabel);\n  }\n}\n\nfunction ClrDatagrid_div_14_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 31);\n    ɵngcc0.ɵɵelement(1, \"div\", 29);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵattribute(\"aria-label\", ctx_r4.clrDgSingleActionableAriaLabel);\n  }\n}\n\nfunction ClrDatagrid_div_15_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 32);\n    ɵngcc0.ɵɵelement(1, \"div\", 29);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r5 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵattribute(\"aria-label\", ctx_r5.clrDetailExpandableAriaLabel);\n  }\n}\n\nfunction ClrDatagrid_clr_dg_placeholder_22_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"clr-dg-placeholder\");\n  }\n}\n\nfunction ClrDatagrid_div_24_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 33);\n    ɵngcc0.ɵɵelementStart(1, \"clr-spinner\", 34);\n    ɵngcc0.ɵɵtext(2, \"Loading\");\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n}\n\nconst _c62 = [[[\"clr-dg-action-bar\"]], [[\"clr-dg-placeholder\"]], [[\"clr-dg-footer\"]], [[\"\", \"clrIfDetail\", \"\"], [\"clr-dg-detail\"]]];\nconst _c63 = [\"clr-dg-action-bar\", \"clr-dg-placeholder\", \"clr-dg-footer\", \"[clrIfDetail],clr-dg-detail\"];\n\nfunction ClrDatagridActionOverflow_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"div\", 4);\n    ɵngcc0.ɵɵlistener(\"click\", function ClrDatagridActionOverflow_div_3_Template_div_click_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r3);\n      const ctx_r2 = ɵngcc0.ɵɵnextContext();\n      return ctx_r2.closeOverflowContent($event);\n    });\n    ɵngcc0.ɵɵprojection(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"id\", ctx_r1.popoverId);\n    ɵngcc0.ɵɵattribute(\"aria-hidden\", !ctx_r1.open)(\"id\", ctx_r1.popoverId);\n  }\n}\n\nconst _c64 = [\"resizeTracker\"];\nconst _c65 = [\"columnHandle\"];\nconst _c66 = [\"allSelected\"];\n\nfunction ClrDatagridColumnToggle_div_2_ng_container_5_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵelementStart(1, \"h2\");\n    ɵngcc0.ɵɵtext(2);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r2.commonStrings.keys.showColumns);\n  }\n}\n\nfunction ClrDatagridColumnToggle_div_2_li_10_ng_template_4_Template(rf, ctx) {}\n\nfunction ClrDatagridColumnToggle_div_2_li_10_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r8 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"li\");\n    ɵngcc0.ɵɵelementStart(1, \"clr-checkbox-wrapper\");\n    ɵngcc0.ɵɵelementStart(2, \"input\", 14);\n    ɵngcc0.ɵɵlistener(\"ngModelChange\", function ClrDatagridColumnToggle_div_2_li_10_Template_input_ngModelChange_2_listener($event) {\n      const restoredCtx = ɵngcc0.ɵɵrestoreView(_r8);\n      const columnState_r5 = restoredCtx.$implicit;\n      const ctx_r7 = ɵngcc0.ɵɵnextContext(2);\n      return ctx_r7.toggleColumnState(columnState_r5, !$event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementStart(3, \"label\");\n    ɵngcc0.ɵɵtemplate(4, ClrDatagridColumnToggle_div_2_li_10_ng_template_4_Template, 0, 0, \"ng-template\", 15);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const columnState_r5 = ctx.$implicit;\n    const ctx_r3 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"disabled\", ctx_r3.hasOnlyOneVisibleColumn && !columnState_r5.hidden)(\"ngModel\", !columnState_r5.hidden);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", columnState_r5.titleTemplateRef);\n  }\n}\n\nfunction ClrDatagridColumnToggle_div_2_clr_dg_column_toggle_button_13_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r10 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"clr-dg-column-toggle-button\", 16);\n    ɵngcc0.ɵɵlistener(\"clrAllSelected\", function ClrDatagridColumnToggle_div_2_clr_dg_column_toggle_button_13_Template_clr_dg_column_toggle_button_clrAllSelected_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r10);\n      const ctx_r9 = ɵngcc0.ɵɵnextContext(2);\n      return ctx_r9.allColumnsSelected();\n    });\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", ctx_r4.commonStrings.keys.selectAll, \" \");\n  }\n}\n\nfunction ClrDatagridColumnToggle_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 3);\n    ɵngcc0.ɵɵelementStart(1, \"div\", 4);\n    ɵngcc0.ɵɵelementStart(2, \"div\", 5, 6);\n    ɵngcc0.ɵɵtext(4);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵtemplate(5, ClrDatagridColumnToggle_div_2_ng_container_5_Template, 3, 1, \"ng-container\", 7);\n    ɵngcc0.ɵɵprojection(6);\n    ɵngcc0.ɵɵelementStart(7, \"button\", 8);\n    ɵngcc0.ɵɵelement(8, \"cds-icon\", 9);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementStart(9, \"ul\", 10);\n    ɵngcc0.ɵɵtemplate(10, ClrDatagridColumnToggle_div_2_li_10_Template, 5, 3, \"li\", 11);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementStart(11, \"div\", 12);\n    ɵngcc0.ɵɵprojection(12, 1);\n    ɵngcc0.ɵɵtemplate(13, ClrDatagridColumnToggle_div_2_clr_dg_column_toggle_button_13_Template, 2, 1, \"clr-dg-column-toggle-button\", 13);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"id\", ctx_r0.popoverId);\n    ɵngcc0.ɵɵattribute(\"aria-label\", ctx_r0.commonStrings.keys.showColumnsMenuDescription);\n    ɵngcc0.ɵɵadvance(4);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r0.commonStrings.keys.allColumnsSelected);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", !ctx_r0.customToggleTitle);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵattribute(\"aria-label\", ctx_r0.commonStrings.keys.close)(\"title\", ctx_r0.commonStrings.keys.close);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵattribute(\"title\", ctx_r0.commonStrings.keys.close);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", ctx_r0.hideableColumnStates)(\"ngForTrackBy\", ctx_r0.trackByFn);\n    ɵngcc0.ɵɵadvance(3);\n    ɵngcc0.ɵɵproperty(\"ngIf\", !ctx_r0.customToggleButton);\n  }\n}\n\nconst _c67 = [[[\"clr-dg-column-toggle-title\"]], [[\"clr-dg-column-toggle-button\"]]];\nconst _c68 = [\"clr-dg-column-toggle-title\", \"clr-dg-column-toggle-button\"];\n\nconst _c69 = function () {\n  return {\n    strict: false\n  };\n};\n\nfunction ClrDatagridDetail_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 1);\n    ɵngcc0.ɵɵelementStart(1, \"div\", 2);\n    ɵngcc0.ɵɵtext(2);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵprojection(3);\n    ɵngcc0.ɵɵelementStart(4, \"div\", 2);\n    ɵngcc0.ɵɵtext(5);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"clrFocusTrap\", ɵngcc0.ɵɵpureFunction0(5, _c69))(\"id\", ctx_r0.detailService.id);\n    ɵngcc0.ɵɵattribute(\"aria-describedby\", ctx_r0.header ? ctx_r0.header.titleId : \"\");\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r0.commonStrings.keys.detailPaneStart);\n    ɵngcc0.ɵɵadvance(3);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r0.commonStrings.keys.detailPaneEnd);\n  }\n}\n\nfunction ClrDatagridFooter_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵelementStart(1, \"div\", 1);\n    ɵngcc0.ɵɵelementStart(2, \"clr-checkbox-wrapper\", 2);\n    ɵngcc0.ɵɵelement(3, \"input\", 3);\n    ɵngcc0.ɵɵelementStart(4, \"label\");\n    ɵngcc0.ɵɵtext(5);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(5);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r0.selection.current.length);\n  }\n}\n\nfunction ClrDatagridFooter_ng_container_1_clr_dg_column_toggle_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"clr-dg-column-toggle\");\n  }\n}\n\nfunction ClrDatagridFooter_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵprojection(1, 1);\n    ɵngcc0.ɵɵtemplate(2, ClrDatagridFooter_ng_container_1_clr_dg_column_toggle_2_Template, 1, 0, \"clr-dg-column-toggle\", 0);\n    ɵngcc0.ɵɵelementStart(3, \"div\", 4);\n    ɵngcc0.ɵɵprojection(4, 2);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r1.hasHideableColumns && !ctx_r1.toggle);\n  }\n}\n\nconst _c70 = [[[\"clr-dg-pagination\"]], [[\"clr-dg-column-toggle\"]], \"*\"];\nconst _c71 = [\"clr-dg-pagination\", \"clr-dg-column-toggle\", \"*\"];\n\nfunction ClrDatagridPageSize_option_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"option\", 3);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const option_r1 = ctx.$implicit;\n    ɵngcc0.ɵɵproperty(\"ngValue\", option_r1);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(option_r1);\n  }\n}\n\nconst _c72 = [\"currentPageInput\"];\n\nfunction ClrDatagridPagination_ng_container_0_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 4);\n    ɵngcc0.ɵɵprojection(1, 1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n}\n\nfunction ClrDatagridPagination_ng_container_0_div_4_input_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"input\", 16, 17);\n    ɵngcc0.ɵɵlistener(\"keydown.enter\", function ClrDatagridPagination_ng_container_0_div_4_input_5_Template_input_keydown_enter_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r9);\n      const ctx_r8 = ɵngcc0.ɵɵnextContext(3);\n      return ctx_r8.updateCurrentPage($event);\n    })(\"blur\", function ClrDatagridPagination_ng_container_0_div_4_input_5_Template_input_blur_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r9);\n      const ctx_r10 = ɵngcc0.ɵɵnextContext(3);\n      return ctx_r10.updateCurrentPage($event);\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = ɵngcc0.ɵɵnextContext(3);\n    ɵngcc0.ɵɵproperty(\"size\", ctx_r4.page.last.toString().length)(\"value\", ctx_r4.page.current);\n    ɵngcc0.ɵɵattribute(\"aria-label\", ctx_r4.commonStrings.keys.currentPage);\n  }\n}\n\nfunction ClrDatagridPagination_ng_container_0_div_4_ng_template_6_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\");\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r6 = ɵngcc0.ɵɵnextContext(3);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r6.page.current);\n  }\n}\n\nfunction ClrDatagridPagination_ng_container_0_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r12 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"div\", 5);\n    ɵngcc0.ɵɵelementStart(1, \"button\", 6);\n    ɵngcc0.ɵɵlistener(\"click\", function ClrDatagridPagination_ng_container_0_div_4_Template_button_click_1_listener() {\n      ɵngcc0.ɵɵrestoreView(_r12);\n      const ctx_r11 = ɵngcc0.ɵɵnextContext(2);\n      return ctx_r11.page.current = 1;\n    });\n    ɵngcc0.ɵɵelement(2, \"cds-icon\", 7);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementStart(3, \"button\", 8);\n    ɵngcc0.ɵɵlistener(\"click\", function ClrDatagridPagination_ng_container_0_div_4_Template_button_click_3_listener() {\n      ɵngcc0.ɵɵrestoreView(_r12);\n      const ctx_r13 = ɵngcc0.ɵɵnextContext(2);\n      return ctx_r13.page.current = ctx_r13.page.current - 1;\n    });\n    ɵngcc0.ɵɵelement(4, \"cds-icon\", 9);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵtemplate(5, ClrDatagridPagination_ng_container_0_div_4_input_5_Template, 2, 3, \"input\", 10);\n    ɵngcc0.ɵɵtemplate(6, ClrDatagridPagination_ng_container_0_div_4_ng_template_6_Template, 2, 1, \"ng-template\", null, 11, ɵngcc0.ɵɵtemplateRefExtractor);\n    ɵngcc0.ɵɵtext(8, \" \\u00A0/\\u00A0\");\n    ɵngcc0.ɵɵelementStart(9, \"span\");\n    ɵngcc0.ɵɵtext(10);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementStart(11, \"button\", 12);\n    ɵngcc0.ɵɵlistener(\"click\", function ClrDatagridPagination_ng_container_0_div_4_Template_button_click_11_listener() {\n      ɵngcc0.ɵɵrestoreView(_r12);\n      const ctx_r14 = ɵngcc0.ɵɵnextContext(2);\n      return ctx_r14.page.current = ctx_r14.page.current + 1;\n    });\n    ɵngcc0.ɵɵelement(12, \"cds-icon\", 13);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementStart(13, \"button\", 14);\n    ɵngcc0.ɵɵlistener(\"click\", function ClrDatagridPagination_ng_container_0_div_4_Template_button_click_13_listener() {\n      ɵngcc0.ɵɵrestoreView(_r12);\n      const ctx_r15 = ɵngcc0.ɵɵnextContext(2);\n      return ctx_r15.page.current = ctx_r15.page.last;\n    });\n    ɵngcc0.ɵɵelement(14, \"cds-icon\", 15);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const _r5 = ɵngcc0.ɵɵreference(7);\n\n    const ctx_r3 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"disabled\", ctx_r3.page.current <= 1);\n    ɵngcc0.ɵɵattribute(\"aria-label\", ctx_r3.commonStrings.keys.firstPage);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"disabled\", ctx_r3.page.current <= 1);\n    ɵngcc0.ɵɵattribute(\"aria-label\", ctx_r3.commonStrings.keys.previousPage);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngIf\", !ctx_r3.disableCurrentPageInput)(\"ngIfElse\", _r5);\n    ɵngcc0.ɵɵadvance(4);\n    ɵngcc0.ɵɵattribute(\"aria-label\", ctx_r3.commonStrings.keys.totalPages);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r3.page.last);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"disabled\", ctx_r3.page.current >= ctx_r3.page.last);\n    ɵngcc0.ɵɵattribute(\"aria-label\", ctx_r3.commonStrings.keys.nextPage);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"disabled\", ctx_r3.page.current >= ctx_r3.page.last);\n    ɵngcc0.ɵɵattribute(\"aria-label\", ctx_r3.commonStrings.keys.lastPage);\n  }\n}\n\nfunction ClrDatagridPagination_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtemplate(1, ClrDatagridPagination_ng_container_0_div_1_Template, 2, 0, \"div\", 1);\n    ɵngcc0.ɵɵelementStart(2, \"div\", 2);\n    ɵngcc0.ɵɵprojection(3);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵtemplate(4, ClrDatagridPagination_ng_container_0_div_4_Template, 15, 12, \"div\", 3);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r0._pageSizeComponent);\n    ɵngcc0.ɵɵadvance(3);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r0.page.last > 1);\n  }\n}\n\nfunction ClrDatagridPagination_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r17 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵelementStart(1, \"div\", 18);\n    ɵngcc0.ɵɵtext(2);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementStart(3, \"div\", 5);\n    ɵngcc0.ɵɵelementStart(4, \"button\", 8);\n    ɵngcc0.ɵɵlistener(\"click\", function ClrDatagridPagination_ng_container_1_Template_button_click_4_listener() {\n      ɵngcc0.ɵɵrestoreView(_r17);\n      const ctx_r16 = ɵngcc0.ɵɵnextContext();\n      return ctx_r16.page.current = ctx_r16.page.current - 1;\n    });\n    ɵngcc0.ɵɵelement(5, \"cds-icon\", 9);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementStart(6, \"span\");\n    ɵngcc0.ɵɵtext(7);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementStart(8, \"button\", 12);\n    ɵngcc0.ɵɵlistener(\"click\", function ClrDatagridPagination_ng_container_1_Template_button_click_8_listener() {\n      ɵngcc0.ɵɵrestoreView(_r17);\n      const ctx_r18 = ɵngcc0.ɵɵnextContext();\n      return ctx_r18.page.current = ctx_r18.page.current + 1;\n    });\n    ɵngcc0.ɵɵelement(9, \"cds-icon\", 13);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵtextInterpolate3(\" \", ctx_r1.page.firstItem + 1, \"-\", ctx_r1.page.lastItem + 1, \" / \", ctx_r1.page.totalItems, \" \");\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"disabled\", ctx_r1.page.current <= 1);\n    ɵngcc0.ɵɵattribute(\"aria-label\", ctx_r1.commonStrings.keys.previousPage);\n    ɵngcc0.ɵɵadvance(3);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r1.page.current);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"disabled\", ctx_r1.page.current >= ctx_r1.page.last);\n    ɵngcc0.ɵɵattribute(\"aria-label\", ctx_r1.commonStrings.keys.nextPage);\n  }\n}\n\nconst _c73 = [\"*\", [[\"clr-dg-page-size\"]]];\nconst _c74 = [\"*\", \"clr-dg-page-size\"];\n\nfunction ClrStackBlock_cds_icon_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"cds-icon\", 7);\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵattribute(\"direction\", ctx_r0.caretDirection);\n  }\n}\n\nfunction ClrStackBlock_span_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\", 8);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r1.commonStrings.keys.stackViewChanged);\n  }\n}\n\nfunction ClrStackBlock_div_8_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 9);\n    ɵngcc0.ɵɵprojection(1, 2);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵstyleProp(\"height\", ctx_r2.expanded ? \"auto\" : 0);\n    ɵngcc0.ɵɵattribute(\"id\", ctx_r2.getStackChildrenId())(\"aria-labelledby\", ctx_r2.labelledById);\n  }\n}\n\nconst _c75 = [[[\"clr-stack-label\"]], \"*\", [[\"clr-stack-block\"]]];\nconst _c76 = [\"clr-stack-label\", \"*\", \"clr-stack-block\"];\nconst _c77 = \"[_nghost-%COMP%] {\\n        display: block;\\n      }\";\nconst _c78 = [[[\"clr-stack-header\"]], \"*\"];\nconst _c79 = [\"clr-stack-header\", \"*\"];\n\nfunction ClrStackHeader_button_5_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r2 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"button\", 4);\n    ɵngcc0.ɵɵlistener(\"click\", function ClrStackHeader_button_5_Template_button_click_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r2);\n      const ctx_r1 = ɵngcc0.ɵɵnextContext();\n      return ctx_r1.stackView.editing = !ctx_r1.stackView.editing;\n    });\n    ɵngcc0.ɵɵtext(1, \" Edit \");\n    ɵngcc0.ɵɵelementEnd();\n  }\n}\n\nconst _c80 = [\"*\", [[\"\", 8, \"stack-action\"]]];\nconst _c81 = [\"*\", \".stack-action\"];\n\nfunction ClrStackInput_span_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\");\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r0.model);\n  }\n}\n\nfunction ClrStackInput_input_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"input\", 2);\n    ɵngcc0.ɵɵlistener(\"ngModelChange\", function ClrStackInput_input_1_Template_input_ngModelChange_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r3);\n      const ctx_r2 = ɵngcc0.ɵɵnextContext();\n      return ctx_r2.model = $event;\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"type\", ctx_r1.type)(\"ngModel\", ctx_r1.model);\n  }\n}\n\nfunction ClrStackSelect_span_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\");\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r0.model);\n  }\n}\n\nfunction ClrStackSelect_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"div\", 2);\n    ɵngcc0.ɵɵelementStart(1, \"select\", 3);\n    ɵngcc0.ɵɵlistener(\"ngModelChange\", function ClrStackSelect_div_1_Template_select_ngModelChange_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r3);\n      const ctx_r2 = ɵngcc0.ɵɵnextContext();\n      return ctx_r2.model = $event;\n    });\n    ɵngcc0.ɵɵprojection(2);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngModel\", ctx_r1.model);\n  }\n}\n\nfunction RecursiveChildren_ng_container_0_ng_container_1_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainer(0);\n  }\n}\n\nfunction RecursiveChildren_ng_container_0_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtemplate(1, RecursiveChildren_ng_container_0_ng_container_1_ng_container_1_Template, 1, 0, \"ng-container\", 2);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const child_r2 = ctx.$implicit;\n    const ctx_r1 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r1.featuresService.recursion.template)(\"ngTemplateOutletContext\", ctx_r1.getContext(child_r2));\n  }\n}\n\nfunction RecursiveChildren_ng_container_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtemplate(1, RecursiveChildren_ng_container_0_ng_container_1_Template, 2, 2, \"ng-container\", 1);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", (ctx_r0.parent == null ? null : ctx_r0.parent.children) || ctx_r0.children);\n  }\n}\n\nconst _c82 = [\"contentContainer\"];\n\nfunction ClrTreeNode_button_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"button\", 9);\n    ɵngcc0.ɵɵlistener(\"click\", function ClrTreeNode_button_2_Template_button_click_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r6);\n      const ctx_r5 = ɵngcc0.ɵɵnextContext();\n      return ctx_r5.expandService.toggle();\n    })(\"focus\", function ClrTreeNode_button_2_Template_button_focus_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r6);\n      const ctx_r7 = ɵngcc0.ɵɵnextContext();\n      return ctx_r7.focusTreeNode();\n    });\n    ɵngcc0.ɵɵelement(1, \"cds-icon\", 10);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵattribute(\"direction\", ctx_r1.expandService.expanded ? \"down\" : \"right\");\n  }\n}\n\nfunction ClrTreeNode_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 11);\n    ɵngcc0.ɵɵelement(1, \"span\", 12);\n    ɵngcc0.ɵɵelementEnd();\n  }\n}\n\nfunction ClrTreeNode_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r9 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"div\", 13);\n    ɵngcc0.ɵɵelementStart(1, \"input\", 14);\n    ɵngcc0.ɵɵlistener(\"change\", function ClrTreeNode_div_4_Template_input_change_1_listener() {\n      ɵngcc0.ɵɵrestoreView(_r9);\n      const ctx_r8 = ɵngcc0.ɵɵnextContext();\n      return ctx_r8._model.toggleSelection(ctx_r8.featuresService.eager);\n    })(\"focus\", function ClrTreeNode_div_4_Template_input_focus_1_listener() {\n      ɵngcc0.ɵɵrestoreView(_r9);\n      const ctx_r10 = ɵngcc0.ɵɵnextContext();\n      return ctx_r10.focusTreeNode();\n    });\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelement(2, \"label\", 15);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵpropertyInterpolate1(\"id\", \"\", ctx_r3.nodeId, \"-check\");\n    ɵngcc0.ɵɵproperty(\"checked\", ctx_r3._model.selected.value === ctx_r3.STATES.SELECTED)(\"indeterminate\", ctx_r3._model.selected.value === ctx_r3.STATES.INDETERMINATE);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵpropertyInterpolate1(\"for\", \"\", ctx_r3.nodeId, \"-check\");\n  }\n}\n\nfunction ClrTreeNode_div_7_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\");\n    ɵngcc0.ɵɵtext(1, \"selected\");\n    ɵngcc0.ɵɵelementEnd();\n  }\n}\n\nfunction ClrTreeNode_div_7_span_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\");\n    ɵngcc0.ɵɵtext(1, \"unselected\");\n    ɵngcc0.ɵɵelementEnd();\n  }\n}\n\nfunction ClrTreeNode_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 16);\n    ɵngcc0.ɵɵtemplate(1, ClrTreeNode_div_7_span_1_Template, 2, 0, \"span\", 17);\n    ɵngcc0.ɵɵtemplate(2, ClrTreeNode_div_7_span_2_Template, 2, 0, \"span\", 17);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r4.ariaSelected);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", !ctx_r4.ariaSelected);\n  }\n}\n\nconst _c83 = [\"*\", [[\"clr-tree-node\"]], [[\"\", \"clrIfExpanded\", \"\"]]];\nconst _c84 = [\"*\", \"clr-tree-node\", \"[clrIfExpanded]\"];\n\nfunction ClrTree_clr_recursive_children_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"clr-recursive-children\", 1);\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"children\", ctx_r0.featuresService.recursion.root);\n  }\n}\n\nfunction ClrAlert_div_0_button_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"button\", 4);\n    ɵngcc0.ɵɵlistener(\"click\", function ClrAlert_div_0_button_3_Template_button_click_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r3);\n      const ctx_r2 = ɵngcc0.ɵɵnextContext(2);\n      return ctx_r2.close();\n    });\n    ɵngcc0.ɵɵelement(1, \"cds-icon\", 5);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵattribute(\"aria-label\", ctx_r1.clrCloseButtonAriaLabel);\n  }\n}\n\nfunction ClrAlert_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 1);\n    ɵngcc0.ɵɵelementStart(1, \"div\", 2);\n    ɵngcc0.ɵɵprojection(2);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵtemplate(3, ClrAlert_div_0_button_3_Template, 2, 1, \"button\", 3);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵclassProp(\"alert-hidden\", ctx_r0.hidden)(\"alert-sm\", ctx_r0.isSmall)(\"alert-app-level\", ctx_r0.isAppLevel);\n    ɵngcc0.ɵɵproperty(\"ngClass\", ctx_r0.alertClass);\n    ɵngcc0.ɵɵadvance(3);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r0.closable);\n  }\n}\n\nfunction ClrAlerts_clr_alerts_pager_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"clr-alerts-pager\", 1);\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"clrCurrentAlertIndex\", ctx_r0.currentAlertIndex);\n  }\n}\n\nconst _c85 = [[[\"clr-alert\"]]];\nconst _c86 = [\"clr-alert\"];\n\nfunction ClrHeader_button_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"button\", 3);\n    ɵngcc0.ɵɵlistener(\"click\", function ClrHeader_button_0_Template_button_click_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r3);\n      const ctx_r2 = ɵngcc0.ɵɵnextContext();\n      return ctx_r2.toggleNav(ctx_r2.responsiveNavCodes.NAV_LEVEL_1);\n    })(\"click\", function ClrHeader_button_0_Template_button_click_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r3);\n      const ctx_r4 = ɵngcc0.ɵɵnextContext();\n      return ctx_r4.openNav(ctx_r4.responsiveNavCodes.NAV_LEVEL_1);\n    });\n    ɵngcc0.ɵɵelement(1, \"span\");\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵattribute(\"aria-label\", ctx_r0.openNavLevel !== ctx_r0.responsiveNavCodes.NAV_LEVEL_1 ? ctx_r0.commonStrings.keys.open : ctx_r0.commonStrings.keys.close)(\"aria-expanded\", ctx_r0.openNavLevel === 1 ? \"true\" : \"false\");\n  }\n}\n\nfunction ClrHeader_button_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"button\", 4);\n    ɵngcc0.ɵɵlistener(\"click\", function ClrHeader_button_2_Template_button_click_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r6);\n      const ctx_r5 = ɵngcc0.ɵɵnextContext();\n      return ctx_r5.openNav(ctx_r5.responsiveNavCodes.NAV_LEVEL_2);\n    });\n    ɵngcc0.ɵɵelement(1, \"span\");\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵattribute(\"aria-label\", ctx_r1.openNavLevel !== ctx_r1.responsiveNavCodes.NAV_LEVEL_2 ? ctx_r1.commonStrings.keys.open : ctx_r1.commonStrings.keys.close)(\"aria-expanded\", ctx_r1.openNavLevel === 2 ? \"true\" : \"false\");\n  }\n}\n\nfunction TemplateRefContainer_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵprojection(0);\n  }\n}\n\nconst _c87 = [\"tabContentProjectedRef\"];\n\nfunction ClrTabContent_ng_template_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"section\", 1);\n    ɵngcc0.ɵɵprojection(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵclassProp(\"active\", ctx_r1.active);\n    ɵngcc0.ɵɵproperty(\"id\", ctx_r1.tabContentId)(\"hidden\", !ctx_r1.active);\n    ɵngcc0.ɵɵattribute(\"aria-labelledby\", ctx_r1.ariaLabelledBy)(\"aria-hidden\", !ctx_r1.active);\n  }\n}\n\nconst _c88 = [\"tabContentViewContainer\"];\n\nfunction ClrTabs_ng_container_1_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵelementStart(1, \"li\", 4);\n    ɵngcc0.ɵɵelementContainer(2, 5);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const link_r3 = ɵngcc0.ɵɵnextContext().$implicit;\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", link_r3.templateRefContainer.template);\n  }\n}\n\nfunction ClrTabs_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtemplate(1, ClrTabs_ng_container_1_ng_container_1_Template, 3, 1, \"ng-container\", 2);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const link_r3 = ctx.$implicit;\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", link_r3.tabsId === ctx_r0.tabsId && !link_r3.inOverflow);\n  }\n}\n\nfunction ClrTabs_ng_container_2_clr_tab_overflow_content_6_ng_container_1_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainer(0, 5);\n  }\n\n  if (rf & 2) {\n    const link_r9 = ɵngcc0.ɵɵnextContext().$implicit;\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", link_r9.templateRefContainer.template);\n  }\n}\n\nfunction ClrTabs_ng_container_2_clr_tab_overflow_content_6_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵtemplate(1, ClrTabs_ng_container_2_clr_tab_overflow_content_6_ng_container_1_ng_container_1_Template, 1, 1, \"ng-container\", 13);\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const link_r9 = ctx.$implicit;\n    const ctx_r8 = ɵngcc0.ɵɵnextContext(3);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", link_r9.tabsId === ctx_r8.tabsId && link_r9.inOverflow);\n  }\n}\n\nfunction ClrTabs_ng_container_2_clr_tab_overflow_content_6_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r13 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"clr-tab-overflow-content\", 12);\n    ɵngcc0.ɵɵlistener(\"keydown.esc\", function ClrTabs_ng_container_2_clr_tab_overflow_content_6_Template_clr_tab_overflow_content_keydown_esc_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r13);\n      const ctx_r12 = ɵngcc0.ɵɵnextContext(2);\n      return ctx_r12.closeOnEscapeKey();\n    }, false, ɵngcc0.ɵɵresolveDocument)(\"click\", function ClrTabs_ng_container_2_clr_tab_overflow_content_6_Template_clr_tab_overflow_content_click_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r13);\n      ɵngcc0.ɵɵnextContext();\n\n      const _r6 = ɵngcc0.ɵɵreference(4);\n\n      const ctx_r14 = ɵngcc0.ɵɵnextContext();\n      return ctx_r14.closeOnOutsideClick($event, _r6);\n    }, false, ɵngcc0.ɵɵresolveDocument)(\"focusout\", function ClrTabs_ng_container_2_clr_tab_overflow_content_6_Template_clr_tab_overflow_content_focusout_0_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r13);\n      const ctx_r15 = ɵngcc0.ɵɵnextContext(2);\n      return ctx_r15.closeOnFocusOut($event);\n    });\n    ɵngcc0.ɵɵtemplate(1, ClrTabs_ng_container_2_clr_tab_overflow_content_6_ng_container_1_Template, 2, 1, \"ng-container\", 1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r7 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngForOf\", ctx_r7.tabLinkDirectives);\n  }\n}\n\nfunction ClrTabs_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r17 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵelementStart(1, \"div\", 6);\n    ɵngcc0.ɵɵelementStart(2, \"li\", 7);\n    ɵngcc0.ɵɵelementStart(3, \"button\", 8, 9);\n    ɵngcc0.ɵɵlistener(\"mousedown\", function ClrTabs_ng_container_2_Template_button_mousedown_3_listener() {\n      ɵngcc0.ɵɵrestoreView(_r17);\n      const ctx_r16 = ɵngcc0.ɵɵnextContext();\n      return ctx_r16._mousedown = true;\n    })(\"focus\", function ClrTabs_ng_container_2_Template_button_focus_3_listener() {\n      ɵngcc0.ɵɵrestoreView(_r17);\n      const ctx_r18 = ɵngcc0.ɵɵnextContext();\n      return ctx_r18.openOverflowOnFocus();\n    })(\"click\", function ClrTabs_ng_container_2_Template_button_click_3_listener() {\n      ɵngcc0.ɵɵrestoreView(_r17);\n      const ctx_r19 = ɵngcc0.ɵɵnextContext();\n      return ctx_r19.toggleOverflowOnClick();\n    });\n    ɵngcc0.ɵɵelement(5, \"cds-icon\", 10);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵtemplate(6, ClrTabs_ng_container_2_clr_tab_overflow_content_6_Template, 2, 1, \"clr-tab-overflow-content\", 11);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵclassProp(\"open\", ctx_r1.toggleService.open);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵclassProp(\"active\", ctx_r1.activeTabInOverflow)(\"open\", ctx_r1.toggleService.open);\n    ɵngcc0.ɵɵattribute(\"tabindex\", ctx_r1.activeTabInOverflow && !ctx_r1.toggleService.open ? 0 : -1)(\"title\", ctx_r1.commonStrings.keys.more);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵattribute(\"title\", ctx_r1.commonStrings.keys.more);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r1.toggleService.open);\n  }\n}\n\nfunction ClrVerticalNav_button_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"button\", 3);\n    ɵngcc0.ɵɵlistener(\"click\", function ClrVerticalNav_button_0_Template_button_click_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r3);\n      const ctx_r2 = ɵngcc0.ɵɵnextContext();\n      return ctx_r2.toggleByButton();\n    });\n    ɵngcc0.ɵɵelement(1, \"cds-icon\", 4);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵclassProp(\"on-collapse\", ctx_r0.collapsed);\n    ɵngcc0.ɵɵattribute(\"aria-expanded\", ctx_r0.ariaExpanded)(\"aria-label\", ctx_r0.commonStrings.keys.verticalNavToggle);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵattribute(\"direction\", ctx_r0.collapsed ? \"right\" : \"left\")(\"title\", ctx_r0.collapsed ? ctx_r0.commonStrings.keys.expand : ctx_r0.commonStrings.keys.collapse);\n  }\n}\n\nfunction ClrVerticalNav_button_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"button\", 5);\n    ɵngcc0.ɵɵlistener(\"click\", function ClrVerticalNav_button_3_Template_button_click_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r5);\n      const ctx_r4 = ɵngcc0.ɵɵnextContext();\n      return ctx_r4.collapsed = false;\n    });\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵattribute(\"aria-label\", ctx_r1.commonStrings.keys.verticalNavToggle);\n  }\n}\n\nconst _c89 = [[[\"\", \"clrVerticalNavLink\", \"\"]], [[\"\", \"clrVerticalNavIcon\", \"\"]], \"*\", [[\"\", \"clrIfExpanded\", \"\"], [\"clr-vertical-nav-group-children\"]]];\nconst _c90 = [\"[clrVerticalNavLink]\", \"[clrVerticalNavIcon]\", \"*\", \"[clrIfExpanded], clr-vertical-nav-group-children\"];\nconst _c91 = [\"clrVerticalNavLink\", \"\"];\nconst _c92 = [[[\"\", \"clrVerticalNavIcon\", \"\"]], \"*\"];\nconst _c93 = [\"[clrVerticalNavIcon]\", \"*\"];\n\nfunction ClrModal_div_0_button_10_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"button\", 11);\n    ɵngcc0.ɵɵlistener(\"click\", function ClrModal_div_0_button_10_Template_button_click_0_listener() {\n      ɵngcc0.ɵɵrestoreView(_r3);\n      const ctx_r2 = ɵngcc0.ɵɵnextContext(2);\n      return ctx_r2.close();\n    });\n    ɵngcc0.ɵɵelement(1, \"cds-icon\", 12);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵattribute(\"aria-label\", ctx_r1.commonStrings.keys.close);\n  }\n}\n\nfunction ClrModal_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = ɵngcc0.ɵɵgetCurrentView();\n\n    ɵngcc0.ɵɵelementStart(0, \"div\", 1);\n    ɵngcc0.ɵɵelementStart(1, \"div\", 2);\n    ɵngcc0.ɵɵlistener(\"@fadeDown.done\", function ClrModal_div_0_Template_div_animation_fadeDown_done_1_listener($event) {\n      ɵngcc0.ɵɵrestoreView(_r5);\n      const ctx_r4 = ɵngcc0.ɵɵnextContext();\n      return ctx_r4.fadeDone($event);\n    });\n    ɵngcc0.ɵɵelementStart(2, \"div\", 3);\n    ɵngcc0.ɵɵtext(3);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementStart(4, \"div\", 4);\n    ɵngcc0.ɵɵprojection(5);\n    ɵngcc0.ɵɵelementStart(6, \"div\", 5);\n    ɵngcc0.ɵɵelementStart(7, \"div\", 6);\n    ɵngcc0.ɵɵelementStart(8, \"div\", 7);\n    ɵngcc0.ɵɵprojection(9, 1);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵtemplate(10, ClrModal_div_0_button_10_Template, 2, 1, \"button\", 8);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementStart(11, \"div\", 9);\n    ɵngcc0.ɵɵprojection(12, 2);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵprojection(13, 3);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementStart(14, \"div\", 3);\n    ɵngcc0.ɵɵtext(15);\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementStart(16, \"div\", 10);\n    ɵngcc0.ɵɵlistener(\"click\", function ClrModal_div_0_Template_div_click_16_listener() {\n      ɵngcc0.ɵɵrestoreView(_r5);\n      const ctx_r6 = ɵngcc0.ɵɵnextContext();\n      return ctx_r6.staticBackdrop || ctx_r6.close();\n    });\n    ɵngcc0.ɵɵelementEnd();\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵclassProp(\"modal-sm\", ctx_r0.size == \"sm\")(\"modal-lg\", ctx_r0.size == \"lg\")(\"modal-xl\", ctx_r0.size == \"xl\");\n    ɵngcc0.ɵɵproperty(\"@fadeDown\", ctx_r0.skipAnimation);\n    ɵngcc0.ɵɵattribute(\"aria-hidden\", !ctx_r0._open)(\"aria-labelledby\", ctx_r0.modalId);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r0.commonStrings.keys.modalContentStart);\n    ɵngcc0.ɵɵadvance(5);\n    ɵngcc0.ɵɵpropertyInterpolate(\"id\", ctx_r0.modalId);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r0.closable);\n    ɵngcc0.ɵɵadvance(5);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r0.commonStrings.keys.modalContentEnd);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"@fade\", undefined);\n  }\n}\n\nconst _c94 = [[[\"\", 8, \"modal-nav\"]], [[\"\", 8, \"modal-title\"]], [[\"\", 8, \"modal-body\"]], [[\"\", 8, \"modal-footer\"]]];\nconst _c95 = [\".modal-nav\", \".modal-title\", \".modal-body\", \".modal-footer\"];\n\nfunction ClrProgressBar_span_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"span\");\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate(ctx_r0.displayValue);\n  }\n}\n\nfunction ClrTimelineStep_ng_container_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementContainerStart(0);\n    ɵngcc0.ɵɵelement(1, \"cds-icon\");\n    ɵngcc0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵattribute(\"status\", ctx_r0.iconStatus)(\"shape\", ctx_r0.iconShape)(\"aria-label\", ctx_r0.iconAriaLabel)(\"aria-current\", ctx_r0.iconAriaCurrent);\n  }\n}\n\nfunction ClrTimelineStep_ng_template_7_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"clr-spinner\", 4);\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵattribute(\"aria-label\", ctx_r2.iconAriaLabel);\n  }\n}\n\nconst _c96 = [[[\"clr-timeline-step-header\"]], [[\"clr-timeline-step-title\"]], [[\"clr-timeline-step-description\"]]];\nconst _c97 = [\"clr-timeline-step-header\", \"clr-timeline-step-title\", \"clr-timeline-step-description\"];\nconst _c98 = [\"wizardTitle\"];\n\nfunction ClrWizard_ng_template_8_Template(rf, ctx) {}\n\nfunction ClrWizard_div_9_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\");\n    ɵngcc0.ɵɵprojection(1, 2);\n    ɵngcc0.ɵɵelementEnd();\n  }\n}\n\nfunction ClrWizard_div_9_div_2_ng_template_1_Template(rf, ctx) {}\n\nfunction ClrWizard_div_9_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\");\n    ɵngcc0.ɵɵtemplate(1, ClrWizard_div_9_div_2_ng_template_1_Template, 0, 0, \"ng-template\", 6);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r6 = ɵngcc0.ɵɵnextContext(2);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r6.navService.currentPage.headerActions);\n  }\n}\n\nfunction ClrWizard_div_9_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 13);\n    ɵngcc0.ɵɵtemplate(1, ClrWizard_div_9_div_1_Template, 2, 0, \"div\", 14);\n    ɵngcc0.ɵɵtemplate(2, ClrWizard_div_9_div_2_Template, 2, 1, \"div\", 14);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r2.headerActionService.showWizardHeaderActions);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngIf\", ctx_r2.headerActionService.currentPageHasHeaderActions);\n  }\n}\n\nfunction ClrWizard_div_15_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 15);\n    ɵngcc0.ɵɵprojection(1, 3);\n    ɵngcc0.ɵɵelementEnd();\n  }\n}\n\nfunction ClrWizard_div_16_ng_template_1_Template(rf, ctx) {}\n\nfunction ClrWizard_div_16_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 15);\n    ɵngcc0.ɵɵtemplate(1, ClrWizard_div_16_ng_template_1_Template, 0, 0, \"ng-template\", 6);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r4.navService.currentPage.buttons);\n  }\n}\n\nconst _c99 = [[[\"clr-wizard-title\"]], \"*\", [[\"clr-wizard-header-action\"]], [[\"clr-wizard-button\"]]];\nconst _c100 = [\"clr-wizard-title\", \"*\", \"clr-wizard-header-action\", \"clr-wizard-button\"];\n\nfunction ClrWizardStepnav_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelementStart(0, \"div\", 2);\n    ɵngcc0.ɵɵtext(1);\n    ɵngcc0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const page_r1 = ctx.$implicit;\n    const i_r2 = ctx.index;\n    ɵngcc0.ɵɵproperty(\"page\", page_r1);\n    ɵngcc0.ɵɵadvance(1);\n    ɵngcc0.ɵɵtextInterpolate1(\" \", i_r2 + 1, \" \");\n  }\n}\n\nconst _c101 = [\"clr-wizard-stepnav-item\", \"\"];\n\nfunction ClrWizardStepnavItem_cds_icon_2_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"cds-icon\", 6);\n  }\n}\n\nfunction ClrWizardStepnavItem_ng_content_3_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵprojection(0, 0, [\"*ngIf\", \"!hasError\"]);\n  }\n}\n\nfunction ClrWizardStepnavItem_ng_template_5_Template(rf, ctx) {}\n\nlet ClrIconCustomTag = /*#__PURE__*/(() => {\n  class ClrIconCustomTag {}\n\n  ClrIconCustomTag.ɵfac = function ClrIconCustomTag_Factory(t) {\n    return new (t || ClrIconCustomTag)();\n  };\n\n  ClrIconCustomTag.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: ClrIconCustomTag,\n    selectors: [[\"clr-icon\"]]\n  });\n  return ClrIconCustomTag;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet CdsIconCustomTag = /*#__PURE__*/(() => {\n  class CdsIconCustomTag {}\n\n  CdsIconCustomTag.ɵfac = function CdsIconCustomTag_Factory(t) {\n    return new (t || CdsIconCustomTag)();\n  };\n\n  CdsIconCustomTag.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: CdsIconCustomTag,\n    selectors: [[\"cds-icon\"]]\n  });\n  return CdsIconCustomTag;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nconst CLR_ICON_DIRECTIVES = [ClrIconCustomTag, CdsIconCustomTag];\nlet ClrIconModule = /*#__PURE__*/(() => {\n  class ClrIconModule {}\n\n  ClrIconModule.ɵfac = function ClrIconModule_Factory(t) {\n    return new (t || ClrIconModule)();\n  };\n\n  ClrIconModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: ClrIconModule\n  });\n  ClrIconModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule]]\n  });\n  return ClrIconModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ClrIconModule, {\n    declarations: function () {\n      return [ClrIconCustomTag, CdsIconCustomTag];\n    },\n    imports: function () {\n      return [CommonModule];\n    },\n    exports: function () {\n      return [ClrIconCustomTag, CdsIconCustomTag];\n    }\n  });\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/**\n * This is an abstract class because we need it to still be a valid token for dependency injection after transpiling.\n * This does not mean you should extend it, simply implementing it is fine.\n */\n\n\nclass LoadingListener {}\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nvar ClrLoadingState = /*#__PURE__*/(() => {\n  (function (ClrLoadingState) {\n    ClrLoadingState[ClrLoadingState[\"DEFAULT\"] = 0] = \"DEFAULT\";\n    ClrLoadingState[ClrLoadingState[\"LOADING\"] = 1] = \"LOADING\";\n    ClrLoadingState[ClrLoadingState[\"SUCCESS\"] = 2] = \"SUCCESS\";\n    ClrLoadingState[ClrLoadingState[\"ERROR\"] = 3] = \"ERROR\";\n  })(ClrLoadingState || (ClrLoadingState = {}));\n\n  return ClrLoadingState;\n})();\nlet ClrLoading = /*#__PURE__*/(() => {\n  class ClrLoading {\n    // We find the first parent that handles something loading\n    constructor(listener) {\n      this.listener = listener;\n      this._loadingState = ClrLoadingState.DEFAULT;\n    }\n\n    get loadingState() {\n      return this._loadingState;\n    }\n\n    set loadingState(value) {\n      if (value === true) {\n        value = ClrLoadingState.LOADING;\n      } else if (!value) {\n        value = ClrLoadingState.DEFAULT;\n      }\n\n      if (value === this._loadingState) {\n        return;\n      }\n\n      this._loadingState = value;\n\n      if (this.listener) {\n        this.listener.loadingStateChange(value);\n      }\n    }\n\n    ngOnDestroy() {\n      this.loadingState = ClrLoadingState.DEFAULT;\n    }\n\n  }\n\n  ClrLoading.ɵfac = function ClrLoading_Factory(t) {\n    return new (t || ClrLoading)(ɵngcc0.ɵɵdirectiveInject(LoadingListener, 8));\n  };\n\n  ClrLoading.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: ClrLoading,\n    selectors: [[\"\", \"clrLoading\", \"\"]],\n    inputs: {\n      loadingState: [\"clrLoading\", \"loadingState\"]\n    }\n  });\n  return ClrLoading;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet IfExpandService = /*#__PURE__*/(() => {\n  class IfExpandService {\n    constructor() {\n      this.expandable = 0;\n      this._loading = false;\n      this._expanded = false;\n      this._expandChange = new Subject();\n    }\n\n    get loading() {\n      return this._loading;\n    }\n\n    set loading(value) {\n      value = !!value;\n\n      if (value !== this._loading) {\n        this._loading = value;\n      }\n    }\n\n    get expanded() {\n      return this._expanded;\n    }\n\n    set expanded(value) {\n      value = !!value;\n\n      if (value !== this._expanded) {\n        this._expanded = value;\n\n        this._expandChange.next(value);\n      }\n    }\n\n    toggle() {\n      this.expanded = !this._expanded;\n    }\n\n    get expandChange() {\n      return this._expandChange.asObservable();\n    }\n\n    loadingStateChange(state) {\n      switch (state) {\n        case ClrLoadingState.LOADING:\n          this.loading = true;\n          break;\n\n        default:\n          this.loading = false;\n          break;\n      }\n    }\n\n  }\n\n  IfExpandService.ɵfac = function IfExpandService_Factory(t) {\n    return new (t || IfExpandService)();\n  };\n\n  IfExpandService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: IfExpandService,\n    factory: IfExpandService.ɵfac\n  });\n  return IfExpandService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nconst commonStringsDefault = {\n  open: 'Open',\n  close: 'Close',\n  show: 'Show',\n  hide: 'Hide',\n  expand: 'Expand',\n  collapse: 'Collapse',\n  more: 'More',\n  select: 'Select',\n  selectAll: 'Select All',\n  previous: 'Previous',\n  next: 'Next',\n  current: 'Jump to current',\n  info: 'Info',\n  success: 'Success',\n  warning: 'Warning',\n  danger: 'Error',\n  rowActions: 'Available actions',\n  pickColumns: 'Show or hide columns',\n  showColumns: 'Show Columns',\n  sortColumn: 'Sort Column',\n  firstPage: 'First Page',\n  lastPage: 'Last Page',\n  nextPage: 'Next Page',\n  previousPage: 'Previous Page',\n  currentPage: 'Current Page',\n  totalPages: 'Total Pages',\n  filterItems: 'Filter items',\n  minValue: 'Min value',\n  maxValue: 'Max value',\n  modalContentStart: 'Beginning of Modal Content',\n  modalContentEnd: 'End of Modal Content',\n  showColumnsMenuDescription: 'Show or hide columns menu',\n  allColumnsSelected: 'All columns selected',\n  signpostToggle: 'Signpost Toggle',\n  signpostClose: 'Signpost Close',\n  loading: 'Loading',\n  // Datagrid\n  detailPaneStart: 'Start of row details',\n  detailPaneEnd: 'End of row details',\n  singleSelectionAriaLabel: 'Single selection header',\n  singleActionableAriaLabel: 'Single actionable header',\n  detailExpandableAriaLabel: 'Toggle more row content',\n  datagridFilterAriaLabel: 'Filter dialog',\n  datagridFilterDialogAriaLabel: 'Toggle column filter',\n  columnSeparatorAriaLabel: 'Column resize handle',\n  columnSeparatorDescription: 'Not necessary to use this button',\n  // Alert\n  alertCloseButtonAriaLabel: 'Close alert',\n  // Date Picker\n  datepickerDialogLabel: 'Choose date',\n  datepickerToggle: 'Toggle datepicker',\n  datepickerToggleChooseDateLabel: 'Choose date',\n  datepickerToggleChangeDateLabel: 'Change date, {SELECTED_DATE}',\n  datepickerPreviousMonth: 'Previous month',\n  datepickerCurrentMonth: 'Current month',\n  datepickerNextMonth: 'Next month',\n  datepickerPreviousDecade: 'Previous decade',\n  datepickerNextDecade: 'Next decade',\n  datepickerCurrentDecade: 'Current decade',\n  datepickerSelectMonthText: 'Select month, the current month is {CALENDAR_MONTH}',\n  datepickerSelectYearText: 'Select year, the current year is {CALENDAR_YEAR}',\n  // Stack View\n  stackViewChanged: 'Value changed.',\n  //Vertical Nav\n  verticalNavGroupToggle: 'Toggle vertical navigation group',\n  verticalNavToggle: 'Toggle vertical navigation',\n  // Timeline steps\n  timelineStepNotStarted: 'Not started',\n  timelineStepCurrent: 'Current',\n  timelineStepSuccess: 'Completed',\n  timelineStepError: 'Error',\n  timelineStepProcessing: 'In progress',\n  // Combobox\n  comboboxDelete: 'Delete selected option',\n  comboboxSearching: 'Searching for matches for \"{INPUT}\"',\n  comboboxSelection: 'Selection',\n  comboboxSelected: 'Selected',\n  comboboxNoResults: 'No results',\n  comboboxOpen: 'Show options',\n  // Datagrid expandable rows\n  datagridExpandableBeginningOf: 'Beginning of',\n  datagridExpandableEndOf: 'End of',\n  datagridExpandableRowContent: 'Expandable row content',\n  datagridExpandableRowsHelperText: `Screen reader table commands may not work for viewing expanded content, please use your screen reader's browse mode to read the content exposed by this button`,\n  responsiveNavToggleOpen: 'Navigation menu',\n  responsiveNavToggleClose: 'Navigation menu',\n  responsiveNavOverflowOpen: 'Navigation overflow menu',\n  responsiveNavOverflowClose: 'Navigation overflow menu',\n  // Wizard\n  wizardStepSuccess: 'Completed',\n  wizardStepError: 'Error',\n\n  /**\n   * Password Input\n   * Screen-reader text for the hide/show password field button\n   */\n  passwordHide: 'Hide password',\n  passwordShow: 'Show password'\n};\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nlet ClrCommonStringsService = /*#__PURE__*/(() => {\n  class ClrCommonStringsService {\n    constructor() {\n      this._strings = commonStringsDefault;\n    }\n    /**\n     * Allows you to pass in new overrides for localization\n     */\n\n\n    localize(overrides) {\n      this._strings = Object.assign(Object.assign({}, this._strings), overrides);\n    }\n    /**\n     * Access to all of the keys as strings\n     */\n\n\n    get keys() {\n      return this._strings;\n    }\n    /**\n     * Parse a string with a set of tokens to replace\n     */\n\n\n    parse(source, tokens = {}) {\n      const names = Object.keys(tokens);\n      let output = source;\n\n      if (names.length) {\n        names.forEach(name => {\n          output = output.replace(`{${name}}`, tokens[name]);\n        });\n      }\n\n      return output;\n    }\n\n  }\n\n  ClrCommonStringsService.ɵfac = function ClrCommonStringsService_Factory(t) {\n    return new (t || ClrCommonStringsService)();\n  };\n\n  ClrCommonStringsService.ɵprov = i0.ɵɵdefineInjectable({\n    factory: function ClrCommonStringsService_Factory() {\n      return new ClrCommonStringsService();\n    },\n    token: ClrCommonStringsService,\n    providedIn: \"root\"\n  });\n  return ClrCommonStringsService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet NB_INSTANCES = 0;\nconst UNIQUE_ID = new InjectionToken('UNIQUE_ID');\n\nfunction uniqueIdFactory() {\n  return 'clr-id-' + NB_INSTANCES++;\n}\n\nconst UNIQUE_ID_PROVIDER = {\n  provide: UNIQUE_ID,\n  useFactory: uniqueIdFactory\n};\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nlet ClrAccordionDescription = /*#__PURE__*/(() => {\n  class ClrAccordionDescription {}\n\n  ClrAccordionDescription.ɵfac = function ClrAccordionDescription_Factory(t) {\n    return new (t || ClrAccordionDescription)();\n  };\n\n  ClrAccordionDescription.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ClrAccordionDescription,\n    selectors: [[\"clr-accordion-description\"], [\"clr-step-description\"]],\n    hostVars: 2,\n    hostBindings: function ClrAccordionDescription_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"clr-accordion-description\", true);\n      }\n    },\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function ClrAccordionDescription_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return ClrAccordionDescription;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nvar AccordionStatus = /*#__PURE__*/(() => {\n  (function (AccordionStatus) {\n    AccordionStatus[\"Inactive\"] = \"inactive\";\n    AccordionStatus[\"Error\"] = \"error\";\n    AccordionStatus[\"Complete\"] = \"complete\";\n  })(AccordionStatus || (AccordionStatus = {}));\n\n  return AccordionStatus;\n})();\n\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nvar AccordionStrategy = /*#__PURE__*/(() => {\n  (function (AccordionStrategy) {\n    AccordionStrategy[\"Default\"] = \"default\";\n    AccordionStrategy[\"Multi\"] = \"multi\";\n  })(AccordionStrategy || (AccordionStrategy = {}));\n\n  return AccordionStrategy;\n})();\n\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nlet accordionCount = 0;\n\nclass AccordionPanelModel {\n  constructor(id, accordionId) {\n    this.id = id;\n    this.accordionId = accordionId;\n    this.status = AccordionStatus.Inactive;\n    this.index = null;\n    this.disabled = false;\n    this.open = false;\n    this.templateId = `${this.id}-${this.accordionId}`;\n  }\n\n}\n\nclass AccordionModel {\n  constructor() {\n    this.strategy = AccordionStrategy.Default;\n    this.accordionCount = accordionCount++;\n    this._panels = {};\n  }\n\n  get panels() {\n    return Object.keys(this._panels).map(id => this._panels[id]);\n  }\n\n  setStrategy(strategy) {\n    this.strategy = strategy;\n  }\n\n  updatePanelOrder(ids) {\n    ids.forEach((id, index) => this._panels[id].index = index);\n    this.removeOldPanels(ids);\n  }\n\n  addPanel(id, open = false) {\n    this._panels[id] = new AccordionPanelModel(id, this.accordionCount);\n    this._panels[id].open = open;\n  }\n\n  togglePanel(panelId, open) {\n    const panelIsOpen = this._panels[panelId].open;\n    const newOpenState = open !== undefined ? open : !panelIsOpen;\n\n    if (newOpenState && this.strategy === AccordionStrategy.Default) {\n      this.closeAllPanels();\n    }\n\n    this._panels[panelId].open = newOpenState;\n  }\n\n  disablePanel(panelId, disabled) {\n    this._panels[panelId].disabled = disabled;\n  }\n\n  closeAllPanels() {\n    this.panels.forEach(panel => this._panels[panel.id].open = false);\n  }\n\n  removeOldPanels(ids) {\n    this.panels.filter(panel => ids.find(id => id === panel.id) === undefined).forEach(panel => delete this._panels[panel.id]);\n  }\n\n}\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet AccordionService = /*#__PURE__*/(() => {\n  class AccordionService {\n    constructor() {\n      this.accordion = new AccordionModel();\n      this._panelsChanges = new BehaviorSubject(this.accordion.panels);\n    }\n\n    getPanelChanges(panelId) {\n      return this._panelsChanges.pipe(map(panels => panels.find(s => s.id === panelId)));\n    }\n\n    setStrategy(strategy) {\n      this.accordion.setStrategy(strategy);\n    }\n\n    addPanel(panelId, open = false) {\n      this.accordion.addPanel(panelId, open);\n      this.emitUpdatedPanels();\n    }\n\n    togglePanel(panelId, open) {\n      this.accordion.togglePanel(panelId, open);\n      this.emitUpdatedPanels();\n    }\n\n    disablePanel(panelId, disabled) {\n      this.accordion.disablePanel(panelId, disabled);\n      this.emitUpdatedPanels();\n    }\n\n    updatePanelOrder(ids) {\n      this.accordion.updatePanelOrder(ids);\n      this.emitUpdatedPanels();\n    }\n\n    emitUpdatedPanels() {\n      this._panelsChanges.next(this.accordion.panels);\n    }\n\n  }\n\n  AccordionService.ɵfac = function AccordionService_Factory(t) {\n    return new (t || AccordionService)();\n  };\n\n  AccordionService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: AccordionService,\n    factory: AccordionService.ɵfac\n  });\n  return AccordionService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nconst defaultAnimationTiming = '0.2s ease-in-out';\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nconst panelAnimation = [trigger('skipInitialRender', [transition(':enter', [])]), trigger('toggle', [transition('void => *', [style({\n  display: 'block',\n  height: 0\n}), animate(defaultAnimationTiming, style({\n  height: '*'\n}))])])];\nconst stepAnimation = [trigger('skipInitialRender', [transition(':enter', [])]), trigger('toggle', [transition('void => *', [style({\n  display: 'block',\n  height: 0\n}), animate(defaultAnimationTiming, style({\n  height: '*'\n}))]), transition('* => void', [style({\n  display: 'block'\n}), animate(defaultAnimationTiming, style({\n  height: 0,\n  display: 'none'\n}))])])];\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nlet ClrAccordionPanel = /*#__PURE__*/(() => {\n  class ClrAccordionPanel {\n    constructor(commonStrings, accordionService, ifExpandService, _id) {\n      this.commonStrings = commonStrings;\n      this.accordionService = accordionService;\n      this.ifExpandService = ifExpandService;\n      this._id = _id;\n      this.disabled = false;\n      this.panelOpen = false;\n      this.panelOpenChange = new EventEmitter();\n      this.AccordionStatus = AccordionStatus;\n      this.isAccordion = true;\n    }\n\n    get id() {\n      return this._id;\n    }\n\n    set id(value) {\n      this._id = value;\n    }\n\n    ngOnInit() {\n      this.panel = this.accordionService.getPanelChanges(this.id).pipe(tap(panel => this.emitPanelChange(panel)));\n      this.accordionService.addPanel(this.id, this.panelOpen);\n      this.accordionService.togglePanel(this.id, this.panelOpen);\n      this.accordionService.disablePanel(this.id, this.disabled);\n    }\n\n    ngOnChanges(changes) {\n      if (this.panel && changes.panelOpen && changes.panelOpen.currentValue !== changes.panelOpen.previousValue) {\n        this.accordionService.togglePanel(this.id, changes.panelOpen.currentValue);\n      }\n\n      if (this.panel && changes.disabled && changes.disabled.currentValue !== changes.disabled.previousValue) {\n        this.accordionService.disablePanel(this.id, changes.disabled.currentValue);\n      }\n    }\n\n    togglePanel() {\n      this.accordionService.togglePanel(this.id);\n    }\n\n    collapsePanelOnAnimationDone(panel) {\n      if (!panel.open) {\n        this.ifExpandService.expanded = false;\n      }\n    }\n\n    getPanelStateClasses(panel) {\n      return `clr-accordion-panel-${panel.status} ${panel.open ? 'clr-accordion-panel-open' : ''}`;\n    }\n\n    getAccordionContentId(id) {\n      return `clr-accordion-content-${id}'`;\n    }\n\n    getAccordionHeaderId(id) {\n      return `clr-accordion-header-${id}`;\n    }\n\n    emitPanelChange(panel) {\n      if (panel.open !== this.panelOpen) {\n        this.panelOpenChange.emit(panel.open);\n        /**\n         * @Note: this line below is needed because we don't want to use another value to track\n         * for changes of the panel. Because we use BehaviorSubject this emit event is trigger on\n         * init (that is not needed - there is no change of the original value) - in some cases this\n         * lead to duplicate events.\n         *\n         * To prevent this we try to emit only when the value is changed and keep the value in sync\n         * even that is used only into the Initial Lifecycle (ngOnInit).\n         */\n\n        this.panelOpen = panel.open;\n      }\n\n      if (panel.open) {\n        this.ifExpandService.expanded = true;\n      }\n    }\n\n  }\n\n  ClrAccordionPanel.ɵfac = function ClrAccordionPanel_Factory(t) {\n    return new (t || ClrAccordionPanel)(ɵngcc0.ɵɵdirectiveInject(ClrCommonStringsService), ɵngcc0.ɵɵdirectiveInject(AccordionService), ɵngcc0.ɵɵdirectiveInject(IfExpandService), ɵngcc0.ɵɵdirectiveInject(UNIQUE_ID));\n  };\n\n  ClrAccordionPanel.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ClrAccordionPanel,\n    selectors: [[\"clr-accordion-panel\"]],\n    contentQueries: function ClrAccordionPanel_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, ClrAccordionDescription, 4);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.accordionDescription = _t);\n      }\n    },\n    hostVars: 2,\n    hostBindings: function ClrAccordionPanel_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"clr-accordion-panel\", true);\n      }\n    },\n    inputs: {\n      disabled: [\"clrAccordionPanelDisabled\", \"disabled\"],\n      panelOpen: [\"clrAccordionPanelOpen\", \"panelOpen\"]\n    },\n    outputs: {\n      panelOpenChange: \"clrAccordionPanelOpenChange\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([IfExpandService, UNIQUE_ID_PROVIDER]), ɵngcc0.ɵɵNgOnChangesFeature],\n    ngContentSelectors: _c2,\n    decls: 2,\n    vars: 3,\n    consts: [[4, \"ngIf\"], [\"aria-live\", \"assertive\", \"class\", \"clr-sr-only\", 4, \"ngIf\"], [3, \"ngClass\"], [1, \"clr-accordion-header\"], [\"type\", \"button\", 1, \"clr-accordion-header-button\", 3, \"id\", \"disabled\", \"click\"], [\"headerButton\", \"\"], [1, \"clr-sr-only\"], [1, \"clr-accordion-status\"], [\"shape\", \"angle\", \"direction\", \"right\", 1, \"clr-accordion-angle\"], [1, \"clr-accordion-number\"], [\"status\", \"danger\", \"shape\", \"exclamation-circle\", 1, \"clr-accordion-error-icon\"], [\"status\", \"success\", \"shape\", \"check-circle\", 1, \"clr-accordion-complete-icon\"], [\"role\", \"region\", 3, \"id\"], [\"class\", \"clr-accordion-content\", 4, \"ngIf\"], [\"aria-live\", \"assertive\", 1, \"clr-sr-only\"], [1, \"clr-accordion-content\"], [1, \"clr-accordion-inner-content\"]],\n    template: function ClrAccordionPanel_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c1);\n        ɵngcc0.ɵɵtemplate(0, ClrAccordionPanel_ng_container_0_Template, 19, 18, \"ng-container\", 0);\n        ɵngcc0.ɵɵpipe(1, \"async\");\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", ɵngcc0.ɵɵpipeBind1(1, 1, ctx.panel));\n      }\n    },\n    directives: [ɵngcc1.NgIf, ɵngcc1.NgClass, CdsIconCustomTag],\n    pipes: [ɵngcc1.AsyncPipe],\n    encapsulation: 2,\n    data: {\n      animation: panelAnimation\n    },\n    changeDetection: 0\n  });\n  return ClrAccordionPanel;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrAccordion = /*#__PURE__*/(() => {\n  class ClrAccordion {\n    constructor(accordionService) {\n      this.accordionService = accordionService;\n      this.multiPanel = false;\n      this.subscriptions = [];\n    }\n\n    ngOnInit() {\n      this.setAccordionStrategy();\n    }\n\n    ngOnChanges(changes) {\n      if (changes.multiPanel.currentValue !== changes.multiPanel.previousValue) {\n        this.setAccordionStrategy();\n      }\n    }\n\n    ngAfterViewInit() {\n      this.subscriptions.push(this.listenForDOMChanges());\n    }\n\n    ngOnDestroy() {\n      this.subscriptions.forEach(s => s.unsubscribe());\n    }\n\n    setAccordionStrategy() {\n      const strategy = this.multiPanel ? AccordionStrategy.Multi : AccordionStrategy.Default;\n      this.accordionService.setStrategy(strategy);\n    }\n\n    listenForDOMChanges() {\n      return this.panels.changes.pipe(startWith(this.panels)).subscribe(panels => this.accordionService.updatePanelOrder(panels.toArray().map(p => p.id)));\n    }\n\n  }\n\n  ClrAccordion.ɵfac = function ClrAccordion_Factory(t) {\n    return new (t || ClrAccordion)(ɵngcc0.ɵɵdirectiveInject(AccordionService));\n  };\n\n  ClrAccordion.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ClrAccordion,\n    selectors: [[\"clr-accordion\"]],\n    contentQueries: function ClrAccordion_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, ClrAccordionPanel, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.panels = _t);\n      }\n    },\n    hostVars: 2,\n    hostBindings: function ClrAccordion_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"clr-accordion\", true);\n      }\n    },\n    inputs: {\n      multiPanel: [\"clrAccordionMultiPanel\", \"multiPanel\"]\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([AccordionService]), ɵngcc0.ɵɵNgOnChangesFeature],\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function ClrAccordion_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return ClrAccordion;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrAccordionContent = /*#__PURE__*/(() => {\n  class ClrAccordionContent {}\n\n  ClrAccordionContent.ɵfac = function ClrAccordionContent_Factory(t) {\n    return new (t || ClrAccordionContent)();\n  };\n\n  ClrAccordionContent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ClrAccordionContent,\n    selectors: [[\"clr-accordion-content\"], [\"clr-step-content\"]],\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function ClrAccordionContent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return ClrAccordionContent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrAccordionTitle = /*#__PURE__*/(() => {\n  class ClrAccordionTitle {}\n\n  ClrAccordionTitle.ɵfac = function ClrAccordionTitle_Factory(t) {\n    return new (t || ClrAccordionTitle)();\n  };\n\n  ClrAccordionTitle.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ClrAccordionTitle,\n    selectors: [[\"clr-accordion-title\"], [\"clr-step-title\"]],\n    hostVars: 2,\n    hostBindings: function ClrAccordionTitle_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"clr-accordion-title\", true);\n      }\n    },\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function ClrAccordionTitle_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return ClrAccordionTitle;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/*\n * After a conversation with the Angular core team, it turns out we don't have much of a choice for our\n * declarative API, we need to fight against change detection and its one-way flow. This is\n * currently the least dirty solution to do what we want.\n *\n * Do not modify or even use this class unless you know exactly what you're doing.\n * It has the potential to trigger change detection loops or kill app performances.\n */\n\n\nlet WillyWonka = /*#__PURE__*/(() => {\n  class WillyWonka {\n    constructor() {\n      this._chocolate = new Subject();\n      this.disableChocolateCheck = false;\n    }\n\n    get chocolate() {\n      return this._chocolate.asObservable();\n    }\n\n    ngAfterViewChecked() {\n      if (!this.disableChocolateCheck) {\n        this._chocolate.next();\n      }\n    }\n\n  }\n\n  WillyWonka.ɵfac = function WillyWonka_Factory(t) {\n    return new (t || WillyWonka)();\n  };\n\n  WillyWonka.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: WillyWonka\n  });\n  return WillyWonka;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet OompaLoompa = /*#__PURE__*/(() => {\n  class OompaLoompa {\n    // FIXME: Request Injector once we move to Angular 4.2+, it'll allow easier refactors\n    constructor(cdr, willyWonka) {\n      this.subscription = willyWonka.chocolate.subscribe(() => {\n        if (this.latestFlavor !== this.flavor) {\n          willyWonka.disableChocolateCheck = true;\n          cdr.detectChanges();\n          willyWonka.disableChocolateCheck = false;\n        }\n      });\n    }\n\n    ngAfterContentChecked() {\n      this.latestFlavor = this.flavor;\n    }\n\n    ngOnDestroy() {\n      this.subscription.unsubscribe();\n    }\n\n  }\n\n  OompaLoompa.ɵfac = function OompaLoompa_Factory(t) {\n    return new (t || OompaLoompa)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(WillyWonka));\n  };\n\n  OompaLoompa.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: OompaLoompa\n  });\n  return OompaLoompa;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet AccordionWillyWonka = /*#__PURE__*/(() => {\n  class AccordionWillyWonka extends WillyWonka {}\n\n  AccordionWillyWonka.ɵfac = /*@__PURE__*/function () {\n    let ɵAccordionWillyWonka_BaseFactory;\n    return function AccordionWillyWonka_Factory(t) {\n      return (ɵAccordionWillyWonka_BaseFactory || (ɵAccordionWillyWonka_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(AccordionWillyWonka)))(t || AccordionWillyWonka);\n    };\n  }();\n\n  AccordionWillyWonka.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: AccordionWillyWonka,\n    selectors: [[\"clr-accordion\"]],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  return AccordionWillyWonka;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet AccordionOompaLoompa = /*#__PURE__*/(() => {\n  class AccordionOompaLoompa extends OompaLoompa {\n    constructor(cdr, willyWonka, ifExpandService) {\n      if (!willyWonka) {\n        throw new Error('clr-accordion-panel should only be used inside of clr-accordion');\n      }\n\n      super(cdr, willyWonka);\n      this.expand = ifExpandService;\n    }\n\n    get flavor() {\n      return this.expand.expanded;\n    }\n\n  }\n\n  AccordionOompaLoompa.ɵfac = function AccordionOompaLoompa_Factory(t) {\n    return new (t || AccordionOompaLoompa)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(AccordionWillyWonka, 8), ɵngcc0.ɵɵdirectiveInject(IfExpandService));\n  };\n\n  AccordionOompaLoompa.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: AccordionOompaLoompa,\n    selectors: [[\"clr-accordion-panel\"]],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  return AccordionOompaLoompa;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nconst declarations$1 = [ClrAccordion, ClrAccordionPanel, ClrAccordionTitle, ClrAccordionDescription, ClrAccordionContent, AccordionOompaLoompa, AccordionWillyWonka];\nlet ClrAccordionModule = /*#__PURE__*/(() => {\n  class ClrAccordionModule {\n    constructor() {\n      ClarityIcons.addIcons(angleIcon, exclamationCircleIcon, checkCircleIcon);\n    }\n\n  }\n\n  ClrAccordionModule.ɵfac = function ClrAccordionModule_Factory(t) {\n    return new (t || ClrAccordionModule)();\n  };\n\n  ClrAccordionModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: ClrAccordionModule\n  });\n  ClrAccordionModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule, ClrIconModule]]\n  });\n  return ClrAccordionModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ClrAccordionModule, {\n    declarations: function () {\n      return [ClrAccordion, ClrAccordionPanel, ClrAccordionTitle, ClrAccordionDescription, ClrAccordionContent, AccordionOompaLoompa, AccordionWillyWonka];\n    },\n    imports: function () {\n      return [CommonModule, ClrIconModule];\n    },\n    exports: function () {\n      return [ClrAccordion, ClrAccordionPanel, ClrAccordionTitle, ClrAccordionDescription, ClrAccordionContent, AccordionOompaLoompa, AccordionWillyWonka];\n    }\n  });\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nclass StepperModel extends AccordionModel {\n  constructor() {\n    super(...arguments);\n    this.stepperModelInitialize = false;\n  }\n\n  get allPanelsCompleted() {\n    return this.panels.length && this.getNumberOfIncompletePanels() === 0 && this.getNumberOfOpenPanels() === 0;\n  }\n\n  addPanel(id, open = false) {\n    super.addPanel(id, open);\n    this._panels[id].disabled = true;\n  }\n\n  updatePanelOrder(ids) {\n    super.updatePanelOrder(ids);\n\n    if (this.stepperModelInitialize === false) {\n      this.openFirstPanel();\n    }\n  }\n\n  togglePanel(panelId) {\n    if (this._panels[panelId].status === AccordionStatus.Complete) {\n      this._panels[panelId].open = !this._panels[panelId].open;\n    }\n  }\n\n  navigateToNextPanel(currentPanelId, currentPanelValid = true) {\n    if (currentPanelValid) {\n      this.completePanel(currentPanelId);\n      this.openNextPanel(this._panels[currentPanelId].id);\n    } else {\n      this.setPanelError(currentPanelId);\n    }\n  }\n\n  overrideInitialPanel(panelId) {\n    this.panels.filter(() => this._panels[panelId] !== undefined).forEach(panel => {\n      if (panel.index < this._panels[panelId].index) {\n        this.completePanel(panel.id);\n      } else if (panel.id === panelId) {\n        this._panels[panel.id].open = true;\n      } else {\n        this._panels[panel.id].open = false;\n      }\n    });\n  }\n\n  setPanelsWithErrors(ids) {\n    ids.forEach(id => this.setPanelError(id));\n  }\n\n  resetPanels() {\n    /* return stepper to initialize state */\n    this.stepperModelInitialize = false;\n    this.panels.forEach(p => this.resetPanel(p.id));\n    this.openFirstPanel();\n  }\n\n  getNextPanel(currentPanelId) {\n    return this.panels.find(s => s.index === this._panels[currentPanelId].index + 1);\n  }\n\n  resetAllFuturePanels(panelId) {\n    this.panels.filter(panel => panel.index >= this._panels[panelId].index).forEach(panel => this.resetPanel(panel.id));\n  }\n\n  resetPanel(panelId) {\n    this._panels[panelId].status = AccordionStatus.Inactive;\n    this._panels[panelId].open = false;\n    this._panels[panelId].disabled = true;\n  }\n\n  openFirstPanel() {\n    const firstPanel = this.getFirstPanel();\n    /**\n     * You need to call updatePanelOrder first to get the correct order,\n     * else the list of panels will not have `index` set and we won't know\n     * how to find the first panel.\n     */\n\n    if (!firstPanel) {\n      return;\n    }\n\n    this._panels[firstPanel.id].open = true;\n    this._panels[firstPanel.id].disabled = true;\n    this.stepperModelInitialize = true;\n  }\n\n  completePanel(panelId) {\n    this._panels[panelId].status = AccordionStatus.Complete;\n    this._panels[panelId].disabled = false;\n    this._panels[panelId].open = false;\n  }\n\n  openNextPanel(currentPanelId) {\n    const nextPanel = this.getNextPanel(currentPanelId);\n\n    if (nextPanel) {\n      this.resetAllFuturePanels(nextPanel.id);\n      this._panels[nextPanel.id].open = true;\n      this._panels[nextPanel.id].disabled = true;\n    }\n  }\n\n  setPanelError(panelId) {\n    this.resetAllFuturePanels(panelId);\n    this._panels[panelId].open = true;\n    this._panels[panelId].status = AccordionStatus.Error;\n  }\n\n  getFirstPanel() {\n    return this.panels.find(panel => panel.index === 0);\n  }\n\n  getNumberOfIncompletePanels() {\n    return this.panels.reduce((prev, next) => next.status !== AccordionStatus.Complete ? prev + 1 : prev, 0);\n  }\n\n  getNumberOfOpenPanels() {\n    return this.panels.reduce((prev, next) => next.open !== false ? prev + 1 : prev, 0);\n  }\n\n}\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet StepperService = /*#__PURE__*/(() => {\n  class StepperService extends AccordionService {\n    constructor() {\n      super(...arguments);\n      this.panelsCompleted = this.getAllCompletedPanelChanges();\n      this.accordion = new StepperModel();\n      this._activeStepChanges = new Subject();\n      this.activeStep = this._activeStepChanges.asObservable();\n    }\n\n    resetPanels() {\n      this.accordion.resetPanels();\n      this.emitUpdatedPanels();\n    }\n\n    setPanelsWithErrors(ids) {\n      this.accordion.setPanelsWithErrors(ids);\n      this.emitUpdatedPanels();\n    }\n\n    navigateToNextPanel(currentPanelId, currentPanelValid = true) {\n      this.accordion.navigateToNextPanel(currentPanelId, currentPanelValid);\n      this.updateNextStep(currentPanelId, currentPanelValid);\n      this.emitUpdatedPanels();\n    }\n\n    overrideInitialPanel(panelId) {\n      this.accordion.overrideInitialPanel(panelId);\n      this.emitUpdatedPanels();\n    }\n\n    updateNextStep(currentPanelId, currentPanelValid) {\n      const nextPanel = this.accordion.getNextPanel(currentPanelId);\n\n      if (currentPanelValid && nextPanel) {\n        this._activeStepChanges.next(nextPanel.id);\n      } else if (currentPanelValid) {\n        this._activeStepChanges.next(currentPanelId);\n      }\n    }\n\n    getAllCompletedPanelChanges() {\n      return this._panelsChanges.pipe(map(() => this.accordion.allPanelsCompleted), distinctUntilChanged());\n    }\n\n  }\n\n  StepperService.ɵfac = /*@__PURE__*/function () {\n    let ɵStepperService_BaseFactory;\n    return function StepperService_Factory(t) {\n      return (ɵStepperService_BaseFactory || (ɵStepperService_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(StepperService)))(t || StepperService);\n    };\n  }();\n\n  StepperService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: StepperService,\n    factory: StepperService.ɵfac\n  });\n  return StepperService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nfunction triggerAllFormControlValidation(formGroup) {\n  Object.keys(formGroup.controls).forEach(field => {\n    const control = formGroup.get(field);\n\n    if (control instanceof FormControl) {\n      control.markAsTouched();\n      control.markAsDirty();\n      control.updateValueAndValidity();\n    } else if (control instanceof FormGroup) {\n      triggerAllFormControlValidation(control);\n    }\n  });\n}\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrStepperPanel = /*#__PURE__*/(() => {\n  class ClrStepperPanel extends ClrAccordionPanel {\n    constructor(platformId, commonStrings, formGroupName, ngModelGroup, stepperService, ifExpandService, id) {\n      super(commonStrings, stepperService, ifExpandService, id);\n      this.platformId = platformId;\n      this.commonStrings = commonStrings;\n      this.formGroupName = formGroupName;\n      this.ngModelGroup = ngModelGroup;\n      this.stepperService = stepperService;\n      this.isAccordion = false;\n      this.subscriptions = [];\n    }\n\n    get formGroup() {\n      return this.formGroupName ? this.formGroupName.control : this.ngModelGroup.control;\n    }\n\n    get id() {\n      return this.formGroupName ? this.formGroupName.name.toString() : this.ngModelGroup.name;\n    }\n\n    set id(_value) {// overriding parent id required empty setter\n    }\n\n    ngOnInit() {\n      super.ngOnInit();\n      this.panel = this.panel.pipe(tap(panel => this.triggerAllFormControlValidationIfError(panel)));\n      this.stepperService.disablePanel(this.id, true);\n      this.listenToFocusChanges();\n\n      if (this.formGroup) {\n        // not all stepper panels are guaranteed to have a form (i.e. empty template-driven)\n        this.subscriptions.push(this.formGroup.statusChanges.pipe(pairwise()).subscribe(([prevStatus, newStatus]) => {\n          if ('VALID' === prevStatus && 'INVALID' === newStatus) {\n            this.stepperService.navigateToNextPanel(this.id, this.formGroup.valid);\n          }\n        }));\n      }\n    }\n\n    ngOnDestroy() {\n      this.subscriptions.forEach(s => s.unsubscribe());\n    }\n\n    listenToFocusChanges() {\n      this.subscriptions.push(this.stepperService.activeStep.pipe(filter(panelId => isPlatformBrowser(this.platformId) && panelId === this.id)).subscribe(() => this.headerButton.nativeElement.focus()));\n    }\n\n    triggerAllFormControlValidationIfError(panel) {\n      if (panel.status === AccordionStatus.Error) {\n        triggerAllFormControlValidation(this.formGroup);\n      }\n    }\n\n  }\n\n  ClrStepperPanel.ɵfac = function ClrStepperPanel_Factory(t) {\n    return new (t || ClrStepperPanel)(ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID), ɵngcc0.ɵɵdirectiveInject(ClrCommonStringsService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.FormGroupName, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.NgModelGroup, 8), ɵngcc0.ɵɵdirectiveInject(StepperService), ɵngcc0.ɵɵdirectiveInject(IfExpandService), ɵngcc0.ɵɵdirectiveInject(UNIQUE_ID));\n  };\n\n  ClrStepperPanel.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ClrStepperPanel,\n    selectors: [[\"clr-stepper-panel\"]],\n    viewQuery: function ClrStepperPanel_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c3, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.headerButton = _t.first);\n      }\n    },\n    hostVars: 2,\n    hostBindings: function ClrStepperPanel_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"clr-accordion-panel\", true);\n      }\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([IfExpandService, UNIQUE_ID_PROVIDER]), ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c2,\n    decls: 2,\n    vars: 3,\n    consts: [[4, \"ngIf\"], [\"aria-live\", \"assertive\", \"class\", \"clr-sr-only\", 4, \"ngIf\"], [3, \"ngClass\"], [1, \"clr-accordion-header\"], [\"type\", \"button\", 1, \"clr-accordion-header-button\", 3, \"id\", \"disabled\", \"click\"], [\"headerButton\", \"\"], [1, \"clr-sr-only\"], [1, \"clr-accordion-status\"], [\"shape\", \"angle\", \"direction\", \"right\", 1, \"clr-accordion-angle\"], [1, \"clr-accordion-number\"], [\"status\", \"danger\", \"shape\", \"exclamation-circle\", 1, \"clr-accordion-error-icon\"], [\"status\", \"success\", \"shape\", \"check-circle\", 1, \"clr-accordion-complete-icon\"], [\"role\", \"region\", 3, \"id\"], [\"class\", \"clr-accordion-content\", 4, \"ngIf\"], [\"aria-live\", \"assertive\", 1, \"clr-sr-only\"], [1, \"clr-accordion-content\"], [1, \"clr-accordion-inner-content\"]],\n    template: function ClrStepperPanel_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c1);\n        ɵngcc0.ɵɵtemplate(0, ClrStepperPanel_ng_container_0_Template, 19, 18, \"ng-container\", 0);\n        ɵngcc0.ɵɵpipe(1, \"async\");\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", ɵngcc0.ɵɵpipeBind1(1, 1, ctx.panel));\n      }\n    },\n    directives: [ɵngcc1.NgIf, ɵngcc1.NgClass, CdsIconCustomTag],\n    pipes: [ɵngcc1.AsyncPipe],\n    encapsulation: 2,\n    data: {\n      animation: stepAnimation\n    },\n    changeDetection: 0\n  });\n  return ClrStepperPanel;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nvar ClrStepButtonType = /*#__PURE__*/(() => {\n  (function (ClrStepButtonType) {\n    ClrStepButtonType[\"Next\"] = \"next\";\n    ClrStepButtonType[\"Submit\"] = \"submit\";\n  })(ClrStepButtonType || (ClrStepButtonType = {}));\n\n  return ClrStepButtonType;\n})();\nlet ClrStepButton = /*#__PURE__*/(() => {\n  class ClrStepButton {\n    constructor(clrStep, stepperService) {\n      this.clrStep = clrStep;\n      this.stepperService = stepperService;\n      this.type = ClrStepButtonType.Next;\n      this.submitButton = false;\n    }\n\n    ngOnInit() {\n      this.submitButton = this.type === ClrStepButtonType.Submit;\n    }\n\n    navigateToNextPanel() {\n      this.stepperService.navigateToNextPanel(this.clrStep.id, this.clrStep.formGroup.valid);\n    }\n\n  }\n\n  ClrStepButton.ɵfac = function ClrStepButton_Factory(t) {\n    return new (t || ClrStepButton)(ɵngcc0.ɵɵdirectiveInject(ClrStepperPanel), ɵngcc0.ɵɵdirectiveInject(StepperService));\n  };\n\n  ClrStepButton.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: ClrStepButton,\n    selectors: [[\"\", \"clrStepButton\", \"\"]],\n    hostVars: 7,\n    hostBindings: function ClrStepButton_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function ClrStepButton_click_HostBindingHandler() {\n          return ctx.navigateToNextPanel();\n        });\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"type\", \"button\");\n        ɵngcc0.ɵɵclassProp(\"clr-step-button\", true)(\"btn\", true)(\"btn-primary\", ctx.submitButton);\n      }\n    },\n    inputs: {\n      type: [\"clrStepButton\", \"type\"]\n    }\n  });\n  return ClrStepButton;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrStepper = /*#__PURE__*/(() => {\n  class ClrStepper {\n    constructor(formGroup, ngForm, stepperService) {\n      this.formGroup = formGroup;\n      this.ngForm = ngForm;\n      this.stepperService = stepperService;\n      this.subscriptions = [];\n    }\n\n    ngOnInit() {\n      if (!this.formGroup && !this.ngForm) {\n        throw new Error('To use stepper a Reactive or Template Form is required.');\n      }\n\n      this.form = this.formGroup ? this.formGroup : this.ngForm;\n      this.subscriptions.push(this.listenForPanelsCompleted());\n      this.subscriptions.push(this.listenForFormResetChanges());\n    }\n\n    ngOnChanges(changes) {\n      if (changes.initialPanel.currentValue !== changes.initialPanel.previousValue) {\n        this.stepperService.overrideInitialPanel(this.initialPanel);\n      }\n    }\n\n    ngAfterViewInit() {\n      this.subscriptions.push(this.listenForDOMChanges());\n    }\n\n    ngOnDestroy() {\n      this.subscriptions.forEach(s => s.unsubscribe());\n    }\n\n    listenForFormResetChanges() {\n      return fromControlReset(this.form.form).subscribe(() => this.stepperService.resetPanels());\n    }\n\n    listenForPanelsCompleted() {\n      return this.stepperService.panelsCompleted.subscribe(panelsCompleted => {\n        if (panelsCompleted && this.form.valid) {\n          this.form.ngSubmit.emit();\n        } else if (!this.form.valid && this.form.touched) {\n          this.setPanelsWithFormErrors();\n        }\n      });\n    }\n\n    setPanelsWithFormErrors() {\n      const panelsWithErrors = this.panels.reduce((panels, p) => p.formGroup.invalid ? [...panels, p.id] : panels, []);\n      this.stepperService.setPanelsWithErrors(panelsWithErrors);\n    }\n\n    listenForDOMChanges() {\n      return this.panels.changes.pipe(startWith(this.panels)).subscribe(panels => {\n        this.stepperService.updatePanelOrder(panels.toArray().map(p => p.id));\n\n        if (this.initialPanel) {\n          this.stepperService.overrideInitialPanel(this.initialPanel);\n        }\n      });\n    }\n\n  }\n\n  ClrStepper.ɵfac = function ClrStepper_Factory(t) {\n    return new (t || ClrStepper)(ɵngcc0.ɵɵdirectiveInject(ɵngcc2.FormGroupDirective, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.NgForm, 8), ɵngcc0.ɵɵdirectiveInject(StepperService));\n  };\n\n  ClrStepper.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ClrStepper,\n    selectors: [[\"form\", \"clrStepper\", \"\"]],\n    contentQueries: function ClrStepper_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, ClrStepperPanel, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.panels = _t);\n      }\n    },\n    hostVars: 4,\n    hostBindings: function ClrStepper_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"clr-accordion\", true)(\"clr-stepper-forms\", true);\n      }\n    },\n    inputs: {\n      initialPanel: [\"clrInitialStep\", \"initialPanel\"]\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([StepperService, {\n      provide: AccordionService,\n      useExisting: StepperService\n    }]), ɵngcc0.ɵɵNgOnChangesFeature],\n    attrs: _c4,\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function ClrStepper_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return ClrStepper;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nfunction fromControlReset(control) {\n  return new Observable(observer => {\n    const unpatchedControlReset = control.reset;\n\n    control.reset = () => {\n      observer.next();\n      unpatchedControlReset.apply(control);\n    };\n\n    return () => {\n      control.reset = unpatchedControlReset;\n    };\n  });\n}\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet StepperWillyWonka = /*#__PURE__*/(() => {\n  class StepperWillyWonka extends WillyWonka {}\n\n  StepperWillyWonka.ɵfac = /*@__PURE__*/function () {\n    let ɵStepperWillyWonka_BaseFactory;\n    return function StepperWillyWonka_Factory(t) {\n      return (ɵStepperWillyWonka_BaseFactory || (ɵStepperWillyWonka_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(StepperWillyWonka)))(t || StepperWillyWonka);\n    };\n  }();\n\n  StepperWillyWonka.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: StepperWillyWonka,\n    selectors: [[\"form\", \"clrStepper\", \"\"]],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  return StepperWillyWonka;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet StepperOompaLoompa = /*#__PURE__*/(() => {\n  class StepperOompaLoompa extends OompaLoompa {\n    constructor(cdr, willyWonka, ifExpandService) {\n      if (!willyWonka) {\n        throw new Error('clr-stepper-panel should only be used inside of clrStepper');\n      }\n\n      super(cdr, willyWonka);\n      this.expand = ifExpandService;\n    }\n\n    get flavor() {\n      return this.expand.expanded;\n    }\n\n  }\n\n  StepperOompaLoompa.ɵfac = function StepperOompaLoompa_Factory(t) {\n    return new (t || StepperOompaLoompa)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(StepperWillyWonka, 8), ɵngcc0.ɵɵdirectiveInject(IfExpandService));\n  };\n\n  StepperOompaLoompa.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: StepperOompaLoompa,\n    selectors: [[\"clr-stepper-panel\"], [\"\", \"clrStepButton\", \"\"]],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  return StepperOompaLoompa;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nconst declarations = [ClrStepper, ClrStepButton, ClrStepperPanel, StepperOompaLoompa, StepperWillyWonka];\nlet ClrStepperModule = /*#__PURE__*/(() => {\n  class ClrStepperModule {}\n\n  ClrStepperModule.ɵfac = function ClrStepperModule_Factory(t) {\n    return new (t || ClrStepperModule)();\n  };\n\n  ClrStepperModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: ClrStepperModule\n  });\n  ClrStepperModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule, ClrIconModule, ClrAccordionModule], ClrAccordionModule]\n  });\n  return ClrStepperModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ClrStepperModule, {\n    declarations: function () {\n      return [ClrStepper, ClrStepButton, ClrStepperPanel, StepperOompaLoompa, StepperWillyWonka];\n    },\n    imports: function () {\n      return [CommonModule, ClrIconModule, ClrAccordionModule];\n    },\n    exports: function () {\n      return [ClrStepper, ClrStepButton, ClrStepperPanel, StepperOompaLoompa, StepperWillyWonka, ClrAccordionModule];\n    }\n  });\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nvar KeyCodes = /*#__PURE__*/(() => {\n  (function (KeyCodes) {\n    KeyCodes[\"ArrowLeft\"] = \"ArrowLeft\";\n    KeyCodes[\"ArrowUp\"] = \"ArrowUp\";\n    KeyCodes[\"ArrowRight\"] = \"ArrowRight\";\n    KeyCodes[\"ArrowDown\"] = \"ArrowDown\";\n    KeyCodes[\"Backspace\"] = \"Backspace\";\n    KeyCodes[\"Tab\"] = \"Tab\";\n    KeyCodes[\"Enter\"] = \"Enter\";\n    KeyCodes[\"Escape\"] = \"Escape\";\n    KeyCodes[\"Space\"] = \"Space\";\n    KeyCodes[\"Home\"] = \"Home\";\n    KeyCodes[\"End\"] = \"End\";\n  })(KeyCodes || (KeyCodes = {}));\n\n  return KeyCodes;\n})();\nvar IEKeyCodes = /*#__PURE__*/(() => {\n  (function (IEKeyCodes) {\n    IEKeyCodes[\"ArrowUp\"] = \"Up\";\n    IEKeyCodes[\"ArrowDown\"] = \"Down\";\n    IEKeyCodes[\"ArrowRight\"] = \"Right\";\n    IEKeyCodes[\"ArrowLeft\"] = \"Left\";\n    IEKeyCodes[\"Space\"] = \"Spacebar\";\n    IEKeyCodes[\"Escape\"] = \"Esc\";\n    IEKeyCodes[\"Home\"] = \"Home\";\n    IEKeyCodes[\"End\"] = \"End\";\n    IEKeyCodes[\"Enter\"] = \"Enter\";\n    IEKeyCodes[\"Tab\"] = \"Tab\";\n  })(IEKeyCodes || (IEKeyCodes = {}));\n\n  return IEKeyCodes;\n})();\n\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nfunction keyValidator(key) {\n  if (key === KeyCodes.ArrowUp || key === IEKeyCodes.ArrowUp) {\n    return KeyCodes.ArrowUp;\n  } else if (key === KeyCodes.ArrowDown || key === IEKeyCodes.ArrowDown) {\n    return KeyCodes.ArrowDown;\n  } else if (key === KeyCodes.ArrowRight || key === IEKeyCodes.ArrowRight) {\n    return KeyCodes.ArrowRight;\n  } else if (key === KeyCodes.ArrowLeft || key === IEKeyCodes.ArrowLeft) {\n    return KeyCodes.ArrowLeft;\n  } else if (key === KeyCodes.Space || key === IEKeyCodes.Space) {\n    return KeyCodes.Space;\n  } else if (key === KeyCodes.Escape || key === IEKeyCodes.Escape) {\n    return KeyCodes.Escape;\n  } else {\n    return key;\n  }\n}\n\nfunction preventArrowKeyScroll(event) {\n  const validKey = keyValidator(event.key);\n\n  if (validKey === KeyCodes.ArrowUp || validKey === KeyCodes.ArrowDown || validKey === KeyCodes.ArrowLeft || validKey === KeyCodes.ArrowRight) {\n    // prevent element container scroll\n    // MDN references this is really the only way to prevent native browser interactions\n    // https://developer.mozilla.org/en-US/docs/Web/Accessibility/Keyboard-navigable_JavaScript_widgets\n    event.preventDefault();\n  }\n}\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrPopoverToggleService = /*#__PURE__*/(() => {\n  class ClrPopoverToggleService {\n    constructor() {\n      /**\n       *  Popovers might need to ignore click events on an element\n       *  (eg: popover opens on focus on an input field. Clicks should be ignored in this case)\n       */\n      this._open = false;\n      this._openChange = new Subject();\n      this._openEventChange = new Subject();\n      this._popoverAligned = new Subject();\n    }\n\n    get openChange() {\n      return this._openChange.asObservable();\n    }\n\n    set openEvent(event) {\n      this._openEvent = event;\n\n      this._openEventChange.next(event);\n    }\n\n    get openEvent() {\n      return this._openEvent;\n    }\n\n    getEventChange() {\n      return this._openEventChange.asObservable();\n    }\n\n    set open(value) {\n      value = !!value;\n\n      if (this._open !== value) {\n        this._open = value;\n\n        this._openChange.next(value);\n      }\n    }\n\n    get open() {\n      return this._open;\n    } // For compatibility with legacy IfOpenService based implementations\n\n\n    get originalEvent() {\n      return this._openEvent;\n    }\n    /**\n     * Sometimes, we need to remember the event that triggered the toggling to avoid loops.\n     * This is for instance the case of components that open on a click, but close on a click outside.\n     */\n\n\n    toggleWithEvent(event) {\n      preventArrowKeyScroll(event);\n      this.openEvent = event;\n      this.open = !this.open;\n    }\n\n    get popoverAligned() {\n      return this._popoverAligned.asObservable();\n    }\n\n    popoverAlignedEmit(popoverNode) {\n      this._popoverAligned.next(popoverNode);\n    }\n\n  }\n\n  ClrPopoverToggleService.ɵfac = function ClrPopoverToggleService_Factory(t) {\n    return new (t || ClrPopoverToggleService)();\n  };\n\n  ClrPopoverToggleService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: ClrPopoverToggleService,\n    factory: ClrPopoverToggleService.ɵfac\n  });\n  return ClrPopoverToggleService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n// https://github.com/angular/angular/issues/20351#issuecomment-344009887\n\n/** @dynamic */\n\n\nlet ClrPopoverEventsService = /*#__PURE__*/(() => {\n  class ClrPopoverEventsService {\n    constructor(renderer, smartOpenService, document) {\n      this.renderer = renderer;\n      this.smartOpenService = smartOpenService;\n      this.document = document;\n      this.outsideClickClose = true;\n      this.scrollToClose = true;\n      this.subscriptions = [];\n      this.subscriptions.push(smartOpenService.openChange.subscribe(open => {\n        if (open) {\n          this.addEscapeListener();\n          this.addClickListener();\n          this.addScrollListener();\n        } else {\n          this.removeAllEventListeners();\n        }\n      }), smartOpenService.getEventChange().subscribe(event => {\n        // Remember the event that was used to open the content\n        this.ignoredEvent = event;\n      }));\n    }\n\n    addScrollListener() {\n      if (this.scrollToClose) {\n        this.documentScroller = fromEvent(this.document, 'scroll', {\n          capture: true\n        });\n        this.scrollSubscription = this.documentScroller.pipe(filter(this.testForSmartPopoverContentContainer)).subscribe(() => {\n          this.smartOpenService.open = false;\n          this.setAnchorFocus();\n        });\n      } else {\n        // I think this is where dynamic re-positioning will be added\n        // Instead of testing like we do in the close pipe below\n        // we need to switch positioning to use an observable and then\n        // debounce the scroll events to recalculate content position in a performant way\n        // For now, ignore scrolling events.\n        return;\n      }\n    }\n\n    removeScrollListener() {\n      if (this.documentScroller) {\n        this.scrollSubscription.unsubscribe();\n        delete this.documentScroller;\n      }\n    }\n\n    testForSmartPopoverContentContainer(event) {\n      // Filter for the documentScroller observable event targets\n      let target = event.target; // Walk up the DOM tree until we get to the element that is a direct child of the body.\n\n      while (target.classList && target.parentElement.localName !== 'body') {\n        target = target.parentElement;\n      } // Target is the child element of body where the scroll events originated.\n      // Return false and prevent the popover content container from closing for any scroll events inside a popover\n      // content container.\n\n\n      if (target.classList) {\n        // check scroll events to see if they are happening in popover content or elsewhere\n        return target.classList.contains('clr-popover-content') ? false : true;\n      } else {\n        // prevents it from closing right after first opening\n        return false;\n      }\n    }\n\n    addClickListener() {\n      if (this.outsideClickClose) {\n        this.documentClickListener = this.renderer.listen(this.document, 'click', event => {\n          if (event === this.ignoredEvent) {\n            // Here we ignore the opening click event (w/o this content opens and immediately closes.\n            delete this.ignoredEvent;\n          } else {\n            this.smartOpenService.open = false; // Rather than a complex change to the focus trap I put focus on the element that was clicked\n\n            const clickedElement = event.target;\n            clickedElement.focus();\n          }\n        });\n      }\n    }\n\n    removeClickListener() {\n      if (this.outsideClickClose) {\n        delete this.ignoredEvent;\n\n        if (this.documentClickListener) {\n          this.documentClickListener();\n          delete this.documentClickListener;\n        }\n      }\n    }\n\n    addEscapeListener() {\n      this.escapeListener = this.renderer.listen(this.document, 'keydown.escape', () => {\n        this.smartOpenService.open = false;\n        this.setAnchorFocus();\n      });\n    }\n\n    removeEscapeListener() {\n      if (this.escapeListener) {\n        this.escapeListener();\n        delete this.escapeListener;\n      }\n    }\n\n    set anchorButtonRef(ref) {\n      this._anchorButtonRef = ref;\n    }\n\n    get anchorButtonRef() {\n      return this._anchorButtonRef;\n    }\n\n    set closeButtonRef(ref) {\n      this._closeButtonRef = ref;\n    }\n\n    get closeButtonRef() {\n      return this._closeButtonRef;\n    }\n\n    setCloseFocus() {\n      this._closeButtonRef.nativeElement.focus();\n    }\n\n    setAnchorFocus() {\n      this.anchorButtonRef.nativeElement.focus();\n    }\n\n    set contentRef(host) {\n      this._contentRef = host;\n    }\n\n    get contentRef() {\n      return this._contentRef;\n    }\n\n    removeAllEventListeners() {\n      this.removeScrollListener();\n      this.removeClickListener();\n      this.removeEscapeListener();\n    }\n\n    ngOnDestroy() {\n      this.subscriptions.forEach(sub => sub.unsubscribe());\n      this.removeAllEventListeners();\n    }\n\n  }\n\n  ClrPopoverEventsService.ɵfac = function ClrPopoverEventsService_Factory(t) {\n    return new (t || ClrPopoverEventsService)(ɵngcc0.ɵɵinject(ɵngcc0.Renderer2), ɵngcc0.ɵɵinject(ClrPopoverToggleService), ɵngcc0.ɵɵinject(DOCUMENT));\n  };\n\n  ClrPopoverEventsService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: ClrPopoverEventsService,\n    factory: ClrPopoverEventsService.ɵfac\n  });\n  return ClrPopoverEventsService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrPopoverAnchor = /*#__PURE__*/(() => {\n  class ClrPopoverAnchor {\n    constructor(smartEventService, element) {\n      smartEventService.anchorButtonRef = element;\n    }\n\n  }\n\n  ClrPopoverAnchor.ɵfac = function ClrPopoverAnchor_Factory(t) {\n    return new (t || ClrPopoverAnchor)(ɵngcc0.ɵɵdirectiveInject(ClrPopoverEventsService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  ClrPopoverAnchor.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: ClrPopoverAnchor,\n    selectors: [[\"\", \"clrPopoverAnchor\", \"\"]],\n    hostVars: 2,\n    hostBindings: function ClrPopoverAnchor_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"clr-anchor\", true);\n      }\n    }\n  });\n  return ClrPopoverAnchor;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrPopoverCloseButton = /*#__PURE__*/(() => {\n  class ClrPopoverCloseButton {\n    constructor(elementRef, smartEventsService, smartOpenService) {\n      this.elementRef = elementRef;\n      this.smartEventsService = smartEventsService;\n      this.smartOpenService = smartOpenService;\n      this.subscriptions = [];\n      this.closeChange = new EventEmitter();\n      this.subscriptions.push(smartOpenService.openChange.pipe(filter(value => !value)).subscribe(() => {\n        this.closeChange.next();\n      }));\n    }\n\n    handleClick(event) {\n      this.smartOpenService.toggleWithEvent(event);\n      this.smartEventsService.setAnchorFocus();\n    }\n\n    ngAfterViewInit() {\n      this.smartEventsService.closeButtonRef = this.elementRef;\n      this.smartEventsService.setCloseFocus();\n    }\n\n    ngOnDestroy() {\n      this.subscriptions.forEach(sub => sub.unsubscribe());\n    }\n\n  }\n\n  ClrPopoverCloseButton.ɵfac = function ClrPopoverCloseButton_Factory(t) {\n    return new (t || ClrPopoverCloseButton)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ClrPopoverEventsService), ɵngcc0.ɵɵdirectiveInject(ClrPopoverToggleService));\n  };\n\n  ClrPopoverCloseButton.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: ClrPopoverCloseButton,\n    selectors: [[\"\", \"clrPopoverCloseButton\", \"\"]],\n    hostVars: 2,\n    hostBindings: function ClrPopoverCloseButton_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function ClrPopoverCloseButton_click_HostBindingHandler($event) {\n          return ctx.handleClick($event);\n        });\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"clr-smart-close-button\", true);\n      }\n    },\n    outputs: {\n      closeChange: \"clrPopoverOnCloseChange\"\n    }\n  });\n  return ClrPopoverCloseButton;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nvar ClrAxis = /*#__PURE__*/(() => {\n  (function (ClrAxis) {\n    ClrAxis[ClrAxis[\"VERTICAL\"] = 0] = \"VERTICAL\";\n    ClrAxis[ClrAxis[\"HORIZONTAL\"] = 1] = \"HORIZONTAL\";\n  })(ClrAxis || (ClrAxis = {}));\n\n  return ClrAxis;\n})();\n\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nvar ClrAlignment = /*#__PURE__*/(() => {\n  (function (ClrAlignment) {\n    ClrAlignment[ClrAlignment[\"START\"] = 0] = \"START\";\n    ClrAlignment[ClrAlignment[\"CENTER\"] = 0.5] = \"CENTER\";\n    ClrAlignment[ClrAlignment[\"END\"] = 1] = \"END\";\n  })(ClrAlignment || (ClrAlignment = {}));\n\n  return ClrAlignment;\n})();\n\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nvar ClrViewportViolation = /*#__PURE__*/(() => {\n  (function (ClrViewportViolation) {\n    ClrViewportViolation[ClrViewportViolation[\"BOTTOM\"] = 0] = \"BOTTOM\";\n    ClrViewportViolation[ClrViewportViolation[\"LEFT\"] = 1] = \"LEFT\";\n    ClrViewportViolation[ClrViewportViolation[\"RIGHT\"] = 2] = \"RIGHT\";\n    ClrViewportViolation[ClrViewportViolation[\"TOP\"] = 3] = \"TOP\";\n  })(ClrViewportViolation || (ClrViewportViolation = {}));\n\n  return ClrViewportViolation;\n})();\n\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nconst flipSides = position => {\n  return Object.assign(Object.assign({}, position), {\n    side: -1 * position.side\n  });\n}; // This could be used in more advanced positioning algorithms.\n// flipAxisFlipSideAndNudgeContent(flipAxis, flipSide, nudge, nudgeForward?): ClrTransform {...}\n// I would like to keep it for now.\n\n\nconst flipAxis = position => {\n  return Object.assign(Object.assign({}, position), {\n    axis: position.axis === 0 ? 1 : 0\n  });\n};\n\nconst nudgeContent = (position, forward) => {\n  const nextAlignment = position.content + (forward ? 0.5 : -0.5);\n\n  if (nextAlignment < 0 || nextAlignment > 1) {\n    return position;\n  } else {\n    return Object.assign(Object.assign({}, position), {\n      content: nextAlignment\n    });\n  }\n};\n\nfunction flipSidesAndNudgeContent(flip, nudge, nudgeBack) {\n  return position => nudge(flip(position), nudgeBack);\n}\n\nfunction align(position, anchor, content) {\n  let xDiff = anchor.left;\n  let yDiff = anchor.top; // When ClrAxis is VERTICAL BEFORE = left, AFTER = right\n  // When ClrAxis is HORIZONTAL BEFORE is top, AFTER is bottom\n\n  switch (position.axis + position.side) {\n    case -1:\n      {\n        // ClrAxis.VERTICAL + ClrSide.BEFORE\n        xDiff += alignHorizontal(position, anchor, content);\n        yDiff -= content.height; // pull content up to the top of the anchor\n\n        break;\n      }\n\n    case 1:\n      {\n        // ClrAxis.VERTICAL + ClrSide.AFTER\n        xDiff += alignHorizontal(position, anchor, content);\n        yDiff += anchor.height; // push the content down to below the anchor\n\n        break;\n      }\n\n    case 0:\n      {\n        // ClrAxis.HORIZONTAL + ClrSide.BEFORE\n        xDiff -= content.width; // pull the content left of the anchor\n\n        yDiff += alignVertical(position, anchor, content);\n        break;\n      }\n\n    case 2:\n      {\n        // ClrAxis.HORIZONTAL + ClrSide.AFTER\n        xDiff += anchor.width; // push the content right of of the anchor\n\n        yDiff += alignVertical(position, anchor, content);\n        break;\n      }\n\n    default:\n      {\n        break;\n      }\n  }\n\n  return {\n    xOffset: xDiff,\n    yOffset: yDiff\n  };\n}\n\nfunction alignHorizontal(position, anchor, content) {\n  let horizontalOffset = 0; // horizontal offset for the anchor position\n\n  switch (position.anchor\n  /*calculate for the anchor alignment*/\n  ) {\n    case ClrAlignment.START:\n      {\n        // nothing to calculate here\n        break;\n      }\n\n    case ClrAlignment.CENTER:\n      {\n        horizontalOffset += anchor.width / 2; // push content over 1/2 anchor width\n\n        break;\n      }\n\n    case ClrAlignment.END:\n      {\n        horizontalOffset += anchor.width; //  push content over width of the anchor\n\n        break;\n      }\n\n    default:\n      {\n        break;\n      }\n  } // horizontal offsets for anchor alignment\n\n\n  switch (position.content // calculate for the content alignment\n  ) {\n    case ClrAlignment.START:\n      {\n        // Nothing to calculate here\n        break;\n      }\n\n    case ClrAlignment.CENTER:\n      {\n        horizontalOffset -= content.width / 2; // pull content left by a value of 1/2 content width\n\n        break;\n      }\n\n    case ClrAlignment.END:\n      {\n        // subtract the width of currentContent from horizontalOffset to pull it back\n        horizontalOffset -= content.width;\n        break;\n      }\n\n    default:\n      {\n        break;\n      }\n  }\n\n  return horizontalOffset;\n}\n\nfunction alignVertical(position, anchor, content) {\n  // y axis offsets for anchor alignment\n  let verticalOffset = 0; // Calculate y offset for anchor position\n\n  switch (position.anchor) {\n    case ClrAlignment.START:\n      {\n        // nothing to calculate here\n        break;\n      }\n\n    case ClrAlignment.CENTER:\n      {\n        verticalOffset += anchor.height / 2; // push content down to the middle of the anchor rect\n\n        break;\n      }\n\n    case ClrAlignment.END:\n      {\n        verticalOffset += anchor.height; // push content down to the bottom of the anchor\n\n        break;\n      }\n\n    default:\n      {\n        break;\n      }\n  } // Calculate y offsets for content alignment\n\n\n  switch (position.content) {\n    case ClrAlignment.START:\n      {\n        // aligned to the top of the content rect\n        break;\n      }\n\n    case ClrAlignment.CENTER:\n      {\n        verticalOffset -= content.height / 2; // pull content back up to the middle of the content rect\n\n        break;\n      }\n\n    case ClrAlignment.END:\n      {\n        verticalOffset -= content.height; // pull content back up to the bottom of the content rect\n\n        break;\n      }\n\n    default:\n      {\n        break;\n      }\n  }\n\n  return verticalOffset;\n}\n\nfunction testVisibility(offset, content) {\n  const violations = [];\n  const mockCoords = {\n    bottom: offset.yOffset + content.height,\n    left: offset.xOffset,\n    right: offset.xOffset + content.width,\n    top: offset.yOffset\n  };\n\n  if (!(mockCoords.top >= 0)) {\n    violations.push(ClrViewportViolation.TOP);\n  }\n\n  if (!(mockCoords.left >= 0)) {\n    violations.push(ClrViewportViolation.LEFT);\n  }\n\n  if (!(mockCoords.bottom <= (window.innerHeight || document.documentElement.clientHeight))) {\n    violations.push(ClrViewportViolation.BOTTOM);\n  }\n\n  if (!(mockCoords.right <= (window.innerWidth || document.documentElement.clientWidth))) {\n    violations.push(ClrViewportViolation.RIGHT);\n  }\n\n  return violations;\n}\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrPopoverPositionService = /*#__PURE__*/(() => {\n  class ClrPopoverPositionService {\n    constructor(eventService, platformId) {\n      this.eventService = eventService;\n      this.platformId = platformId;\n      this._shouldRealign = new Subject();\n      this.shouldRealign = this._shouldRealign.asObservable();\n    }\n\n    realign() {\n      this._shouldRealign.next();\n    }\n\n    set position(position) {\n      this._position = position;\n    }\n\n    get position() {\n      return this._position;\n    }\n\n    alignContent(content) {\n      if (!isPlatformBrowser(this.platformId)) {\n        // Only position when in a browser.\n        // Default to the browser origin and prevent getBoundingClientRect from running.\n        return {\n          xOffset: 0,\n          yOffset: 0\n        };\n      }\n\n      this.currentAnchorCoords = this.eventService.anchorButtonRef.nativeElement.getBoundingClientRect();\n      this.currentContentCoords = content.getBoundingClientRect();\n      this.contentOffsets = align(this.position, this.currentAnchorCoords, this.currentContentCoords);\n      const visibilityViolations = testVisibility(this.contentOffsets, this.currentContentCoords);\n      /**\n       * Calculate the sum of viewport errors. This calculation is used below with the provided Axis in the given\n       * ClrPopoverPosition. Its worth putting the ClrViewportViolation enum values here:\n       *\n       *   BOTTOM = 0,\n       *   LEFT = 1,\n       *   RIGHT = 2,\n       *   TOP = 3,\n       *\n       *   So, this.visibilityViolations.length tells us how many sides of the viewport that the popover content was\n       *   clipped on. We can only help when the content has an issue on one or two sides.\n       *   errorSum is calculated to determine _how_ to change the position. Looking at both the axis and the number\n       *   of violations I can use the errorSum to determine how to transform the position (on the fly) and adjust\n       *   where it can be improved.\n       *\n       *   Note, more than 3 viewport violations and there isn't anything we can do to help. Also when there are two\n       *   violations, we can't help if the violations are TOP+BOTTOM || LEFT+RIGHT => There is no transformation we\n       *   can make to the postion that will help.\n       *\n       *   Some examples:\n       *   There is only one error and Primary axis is VERTICAL\n       *   - this.handleVerticalAxisOneViolation has a switch that will use the error sum to apply the correct\n       *   transform to the postion based on the reduction of visibilityViolations.\n       *\n       *   There are two errors and Primary axis is HORIZONTAL\n       *   - handleHorizontalAxisTwoViolations has a switch that uses the error sum to apply both transforms needed to\n       *   improve the content position based on the reduction of visibilityViolations.\n       */\n\n      const errorSum = visibilityViolations.reduce((count, current) => {\n        return count + current;\n      }, 0);\n\n      if (visibilityViolations.length === 1 && this.position.axis === ClrAxis.VERTICAL) {\n        // When primary axis is VERTICAL and there is one viewport violation\n        this.handleVerticalAxisOneViolation(errorSum);\n      } else if (visibilityViolations.length === 1 && this.position.axis === ClrAxis.HORIZONTAL) {\n        // When primary axis is HORIZONTAL and there is one viewport violation\n        this.handleHorizontalAxisOneViolation(errorSum);\n      } else if (visibilityViolations.length === 2 && this.position.axis === ClrAxis.VERTICAL) {\n        // When primary axis is VERTICAL and there are two viewport violations\n        this.handleVerticalAxisTwoViolations(errorSum);\n      } else if (visibilityViolations.length === 2 && this.position.axis === ClrAxis.HORIZONTAL) {\n        // When primary axis is HORIZONTAL and there are two viewport violations\n        this.handleHorizontalAxisTwoViolations(errorSum);\n      }\n\n      return this.contentOffsets;\n    }\n\n    handleVerticalAxisOneViolation(errorSum) {\n      switch (errorSum) {\n        case 0:\n        case 3:\n          {\n            // BOTTOM(0) or TOP(3) are primary violations and we can just flip sides\n            this.contentOffsets = align(flipSides(this.position), this.currentAnchorCoords, this.currentContentCoords);\n            break;\n          }\n\n        case 1:\n          {\n            // LEFT(1) is secondary and needs to nudge content right\n            this.contentOffsets = align(nudgeContent(this.position), this.currentAnchorCoords, this.currentContentCoords);\n            break;\n          }\n\n        case 2:\n          {\n            // RIGHT(2) is secondary and  needs to nudge content left\n            this.contentOffsets = align(nudgeContent(this.position, true), this.currentAnchorCoords, this.currentContentCoords);\n            break;\n          }\n\n        default:\n          {\n            break;\n          }\n      }\n    }\n\n    handleVerticalAxisTwoViolations(errorSum) {\n      switch (errorSum) {\n        // We know there are two violations. We can use the errorSum to determine which combination of sides were\n        // violated and handle appropriately.\n        case 5:\n          {\n            // TOP(3)+RIGHT(2) is case 5. We need to flip sides and nudge the content to the left\n            const flipAndNudgeLeft = flipSidesAndNudgeContent(flipSides, nudgeContent, true);\n            this.contentOffsets = align(flipAndNudgeLeft(this.position), this.currentAnchorCoords, this.currentContentCoords);\n            break;\n          }\n\n        case 4:\n          {\n            //TOP(3)+LEFT(1) is case 4, we need to flip sides and nudge content to the right\n            const flipAndNudgeRight = flipSidesAndNudgeContent(flipSides, nudgeContent, false);\n            this.contentOffsets = align(flipAndNudgeRight(this.position), this.currentAnchorCoords, this.currentContentCoords);\n            break;\n          }\n\n        case 3:\n          {\n            // TOP(3)+BOTTOM(0) || left(1)+RIGHT(2) is case 3. There is nothing we can do position wise to improve the\n            // placement for this content.\n            break;\n          }\n\n        case 2:\n          {\n            // BOTTOM(0)+RIGHT(2) is case 2. We need to flip sides and nudge the content to the left\n            const flipAndNudgeLeft = flipSidesAndNudgeContent(flipSides, nudgeContent, true);\n            this.contentOffsets = align(flipAndNudgeLeft(this.position), this.currentAnchorCoords, this.currentContentCoords);\n            break;\n          }\n\n        case 1:\n          {\n            // BOTTOM(0)+LEFT(1) is case 1. We need to flip sides and nudge to the right\n            const flipAndNudgeRight = flipSidesAndNudgeContent(flipSides, nudgeContent, false);\n            this.contentOffsets = align(flipAndNudgeRight(this.position), this.currentAnchorCoords, this.currentContentCoords);\n            break;\n          }\n\n        default:\n          {\n            break;\n          }\n      }\n    }\n\n    handleHorizontalAxisOneViolation(errorSum) {\n      switch (errorSum) {\n        case 1:\n        case 2:\n          {\n            // LEFT(1) and RIGHT(2) are primary violations so we can flip sides\n            this.contentOffsets = align(flipSides(this.position), this.currentAnchorCoords, this.currentContentCoords);\n            break;\n          }\n\n        case 0:\n          {\n            // BOTTOM(0) is a secondary violation and we need to nudge content up\n            this.contentOffsets = align(nudgeContent(this.position, true), this.currentAnchorCoords, this.currentContentCoords);\n            break;\n          }\n\n        case 3:\n          {\n            // TOP(3) is a secondary violation and we need to nudge content down\n            this.contentOffsets = align(nudgeContent(this.position), this.currentAnchorCoords, this.currentContentCoords);\n            break;\n          }\n\n        default:\n          {\n            break;\n          }\n      }\n    }\n\n    handleHorizontalAxisTwoViolations(errorSum) {\n      switch (errorSum) {\n        case 5:\n        case 4:\n          {\n            // TOP(3)+LEFT(1) is case 4.\n            // TOP(3)+RIGHT(2) is case 5.\n            // In both of these cases we need to flip sides and nudge content down\n            const flipAndNudgeDown = flipSidesAndNudgeContent(flipSides, nudgeContent, false);\n            this.contentOffsets = align(flipAndNudgeDown(this.position), this.currentAnchorCoords, this.currentContentCoords);\n            break;\n          }\n\n        case 3:\n          {\n            // TOP(3)+BOTTOM(0) || left(1)+RIGHT(2) is case 3. There is nothing we can do position wise to improve the\n            // placement for this content.\n            break;\n          }\n\n        case 2:\n        case 1:\n          {\n            // BOTTOM(0)+RIGHT(2) is case 2.\n            // BOTTOM(0)+LEFT(1) is case 1.\n            // In both cases we  need to flip sides and nudge content up\n            const flipAndNudgeUp = flipSidesAndNudgeContent(flipSides, nudgeContent, true);\n            this.contentOffsets = align(flipAndNudgeUp(this.position), this.currentAnchorCoords, this.currentContentCoords);\n            break;\n          }\n\n        default:\n          {\n            break;\n          }\n      }\n    }\n\n  }\n\n  ClrPopoverPositionService.ɵfac = function ClrPopoverPositionService_Factory(t) {\n    return new (t || ClrPopoverPositionService)(ɵngcc0.ɵɵinject(ClrPopoverEventsService), ɵngcc0.ɵɵinject(PLATFORM_ID));\n  };\n\n  ClrPopoverPositionService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: ClrPopoverPositionService,\n    factory: ClrPopoverPositionService.ɵfac\n  });\n  return ClrPopoverPositionService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n// https://github.com/angular/angular/issues/20351#issuecomment-344009887\n\n/** @dynamic */\n\n\nlet ClrPopoverContent = /*#__PURE__*/(() => {\n  class ClrPopoverContent {\n    constructor(document, container, template, renderer, smartPositionService, smartEventsService, smartOpenService) {\n      this.document = document;\n      this.container = container;\n      this.template = template;\n      this.renderer = renderer;\n      this.smartPositionService = smartPositionService;\n      this.smartEventsService = smartEventsService;\n      this.smartOpenService = smartOpenService;\n      this.subscriptions = [];\n      this.shouldRealign = false; // Check-collector pattern:\n      // In order to get accurate content height/width values, we cannot calculate alignment offsets until\n      // after the projected content has stabilized.\n      // As multiple check events may happen in the same rendering cycle, we need to collect all events\n      // and only act after the content is really stable. Or we may get wrong intermediate positioning values.\n      // We will channel subsequent content check events through this observable.\n\n      this.checkCollector = new EventEmitter();\n    }\n\n    set open(value) {\n      this.smartOpenService.open = !!value;\n    }\n\n    set contentAt(position) {\n      this.smartPositionService.position = position;\n    }\n\n    set outsideClickClose(clickToClose) {\n      this.smartEventsService.outsideClickClose = !!clickToClose;\n    }\n\n    set scrollToClose(scrollToClose) {\n      this.smartEventsService.scrollToClose = !!scrollToClose;\n    }\n\n    ngAfterViewInit() {\n      this.subscriptions.push(this.smartOpenService.openChange.subscribe(change => {\n        if (change) {\n          this.addContent();\n        } else {\n          this.removeContent();\n        }\n      }), this.smartPositionService.shouldRealign.subscribe(() => {\n        this.shouldRealign = true; // Avoid flickering on initialization, caused by the asynchronous nature of the\n        // check-collector pattern.\n\n        if (this.view) {\n          this.renderer.setStyle(this.view.rootNodes[0], 'opacity', '0');\n        }\n      }), // Here we collect subsequent synchronously received content-check events and only take action\n      // at the end of the cycle. See below for details on the check-collector pattern.\n      this.checkCollector.pipe(debounceTime(0)).subscribe(() => {\n        this.alignContent();\n        this.shouldRealign = false;\n\n        if (this.view) {\n          this.renderer.setStyle(this.view.rootNodes[0], 'opacity', '1');\n        }\n      }));\n    }\n\n    ngOnDestroy() {\n      this.removeContent();\n      this.subscriptions.forEach(sub => sub.unsubscribe());\n    }\n\n    removeContent() {\n      if (!this.view) {\n        return;\n      }\n\n      this.view.rootNodes.forEach(node => this.renderer.removeChild(this.document.body, node));\n      this.container.clear();\n      delete this.view;\n    }\n    /**\n     * TODO(matt): investigate why DebugElement retains a reference to the nodes and causes a memory leak.\n     * A note about the use of appendChild/removeChild\n     * The DebugElement is keeping a reference to the detached node and its unclear why.\n     * This does warrant further investigation. But, since it doesn't happen in production mode\n     * it is a low priority issue for now.\n     */\n\n\n    addContent() {\n      // Create the view container\n      this.view = this.container.createEmbeddedView(this.template);\n      this.smartEventsService.contentRef = this.view.rootNodes[0]; // So we know where/what to set close focus on\n\n      this.renderer.addClass(this.view.rootNodes[0], 'clr-popover-content'); // Reset to the begining of the document to be available for sizing/positioning calculations.\n      // If we add new content to the bottom it triggers changes in the layout that may lead to false anchor\n      // coordinates values.\n\n      this.renderer.setStyle(this.view.rootNodes[0], 'top', '0px');\n      this.renderer.setStyle(this.view.rootNodes[0], 'left', '0px'); // We need to hide it during the calculation phase, while it's not yet finally positioned.\n\n      this.renderer.setStyle(this.view.rootNodes[0], 'opacity', '0');\n      this.renderer.listen(this.view.rootNodes[0], 'click', event => {\n        this.smartOpenService.openEvent = event;\n      });\n      this.view.rootNodes.forEach(node => {\n        this.renderer.appendChild(this.document.body, node);\n      }); // Mark for realingment on the next content-check cycle.\n\n      this.shouldRealign = true;\n    }\n\n    ngAfterContentChecked() {\n      if (this.smartOpenService.open && this.view && this.shouldRealign) {\n        // Channel content-check event through the check-collector\n        this.checkCollector.emit();\n      }\n    }\n\n    alignContent() {\n      if (!this.view) {\n        return;\n      }\n\n      const positionCoords = this.smartPositionService.alignContent(this.view.rootNodes[0]);\n      this.renderer.setStyle(this.view.rootNodes[0], 'top', `${positionCoords.yOffset}px`);\n      this.renderer.setStyle(this.view.rootNodes[0], 'left', `${positionCoords.xOffset}px`);\n      this.smartOpenService.popoverAlignedEmit(this.view.rootNodes[0]);\n    }\n\n  }\n\n  ClrPopoverContent.ɵfac = function ClrPopoverContent_Factory(t) {\n    return new (t || ClrPopoverContent)(ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ClrPopoverPositionService), ɵngcc0.ɵɵdirectiveInject(ClrPopoverEventsService), ɵngcc0.ɵɵdirectiveInject(ClrPopoverToggleService));\n  };\n\n  ClrPopoverContent.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: ClrPopoverContent,\n    selectors: [[\"\", \"clrPopoverContent\", \"\"]],\n    inputs: {\n      open: [\"clrPopoverContent\", \"open\"],\n      contentAt: [\"clrPopoverContentAt\", \"contentAt\"],\n      outsideClickClose: [\"clrPopoverContentOutsideClickToClose\", \"outsideClickClose\"],\n      scrollToClose: [\"clrPopoverContentScrollToClose\", \"scrollToClose\"]\n    }\n  });\n  return ClrPopoverContent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrPopoverOpenCloseButton = /*#__PURE__*/(() => {\n  class ClrPopoverOpenCloseButton {\n    constructor(smartOpenService) {\n      this.smartOpenService = smartOpenService;\n      this.subscriptions = [];\n      this.openCloseChange = new EventEmitter();\n      this.subscriptions.push(this.smartOpenService.openChange.subscribe(change => {\n        this.openCloseChange.next(change);\n      }));\n    }\n\n    handleClick(event) {\n      this.smartOpenService.toggleWithEvent(event);\n    }\n\n    ngOnDestroy() {\n      this.subscriptions.forEach(sub => sub.unsubscribe());\n    }\n\n  }\n\n  ClrPopoverOpenCloseButton.ɵfac = function ClrPopoverOpenCloseButton_Factory(t) {\n    return new (t || ClrPopoverOpenCloseButton)(ɵngcc0.ɵɵdirectiveInject(ClrPopoverToggleService));\n  };\n\n  ClrPopoverOpenCloseButton.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: ClrPopoverOpenCloseButton,\n    selectors: [[\"\", \"clrPopoverOpenCloseButton\", \"\"]],\n    hostVars: 2,\n    hostBindings: function ClrPopoverOpenCloseButton_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function ClrPopoverOpenCloseButton_click_HostBindingHandler($event) {\n          return ctx.handleClick($event);\n        });\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"clr-smart-open-close\", true);\n      }\n    },\n    outputs: {\n      openCloseChange: \"clrPopoverOpenCloseChange\"\n    }\n  });\n  return ClrPopoverOpenCloseButton;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrPopoverModuleNext = /*#__PURE__*/(() => {\n  class ClrPopoverModuleNext {}\n\n  ClrPopoverModuleNext.ɵfac = function ClrPopoverModuleNext_Factory(t) {\n    return new (t || ClrPopoverModuleNext)();\n  };\n\n  ClrPopoverModuleNext.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: ClrPopoverModuleNext\n  });\n  ClrPopoverModuleNext.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[]]\n  });\n  return ClrPopoverModuleNext;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ClrPopoverModuleNext, {\n    declarations: [ClrPopoverAnchor, ClrPopoverCloseButton, ClrPopoverOpenCloseButton, ClrPopoverContent],\n    exports: [ClrPopoverAnchor, ClrPopoverCloseButton, ClrPopoverOpenCloseButton, ClrPopoverContent]\n  });\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ButtonInGroupService = /*#__PURE__*/(() => {\n  class ButtonInGroupService {\n    constructor() {\n      this._changes = new Subject();\n    }\n\n    get changes() {\n      return this._changes.asObservable();\n    }\n\n    updateButtonGroup(button) {\n      this._changes.next(button);\n    }\n\n  }\n\n  ButtonInGroupService.ɵfac = function ButtonInGroupService_Factory(t) {\n    return new (t || ButtonInGroupService)();\n  };\n\n  ButtonInGroupService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: ButtonInGroupService,\n    factory: ButtonInGroupService.ɵfac\n  });\n  return ButtonInGroupService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrButton = /*#__PURE__*/(() => {\n  class ClrButton {\n    constructor(buttonInGroupService, toggleService) {\n      this.buttonInGroupService = buttonInGroupService;\n      this.toggleService = toggleService;\n      this._enableService = false;\n      this._inMenu = false;\n      this._classNames = 'btn';\n      this._name = null;\n      this._type = null;\n      this._id = null;\n      this._disabled = null;\n      this._click = new EventEmitter(false);\n    }\n\n    get inMenu() {\n      return this._inMenu;\n    }\n\n    set inMenu(value) {\n      value = !!value;\n\n      if (this._inMenu !== value) {\n        this._inMenu = value; // We check if the service flag is enabled\n        // and if the service exists because the service is optional\n\n        if (this._enableService && this.buttonInGroupService) {\n          this.buttonInGroupService.updateButtonGroup(this);\n        }\n      }\n    }\n\n    get classNames() {\n      return this._classNames;\n    }\n\n    set classNames(value) {\n      if (typeof value === 'string') {\n        const classNames = value.split(' ');\n\n        if (classNames.indexOf('btn') === -1) {\n          classNames.push('btn');\n        }\n\n        this._classNames = classNames.join(' ');\n      }\n    }\n\n    get name() {\n      return this._name;\n    }\n\n    set name(value) {\n      if (typeof value === 'string') {\n        this._name = value;\n      }\n    }\n\n    get type() {\n      return this._type;\n    }\n\n    set type(value) {\n      if (typeof value === 'string') {\n        this._type = value;\n      }\n    }\n\n    get id() {\n      return this._id;\n    }\n\n    set id(value) {\n      if (typeof value === 'string') {\n        this._id = value;\n      }\n    }\n\n    get disabled() {\n      return this._disabled;\n    }\n\n    set disabled(value) {\n      if (value !== null && value !== false) {\n        this._disabled = '';\n      } else {\n        this._disabled = null;\n      }\n    }\n\n    loadingStateChange(state) {\n      this.loading = state === ClrLoadingState.LOADING;\n    }\n\n    emitClick($event) {\n      if (this.inMenu) {\n        this.toggleService.toggleWithEvent($event);\n      }\n\n      this._click.emit(true);\n    }\n\n    ngAfterViewInit() {\n      this._enableService = true;\n    }\n\n  }\n\n  ClrButton.ɵfac = function ClrButton_Factory(t) {\n    return new (t || ClrButton)(ɵngcc0.ɵɵdirectiveInject(ButtonInGroupService, 12), ɵngcc0.ɵɵdirectiveInject(ClrPopoverToggleService));\n  };\n\n  ClrButton.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ClrButton,\n    selectors: [[\"clr-button\"]],\n    viewQuery: function ClrButton_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c5, 7);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.templateRef = _t.first);\n      }\n    },\n    inputs: {\n      inMenu: [\"clrInMenu\", \"inMenu\"],\n      classNames: [\"class\", \"classNames\"],\n      name: \"name\",\n      type: \"type\",\n      id: \"id\",\n      disabled: \"disabled\"\n    },\n    outputs: {\n      _click: \"click\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: LoadingListener,\n      useExisting: ClrButton\n    }])],\n    ngContentSelectors: _c0,\n    decls: 2,\n    vars: 0,\n    consts: [[\"buttonProjectedRef\", \"\"], [3, \"click\"], [\"class\", \"spinner spinner-inline\", 4, \"ngIf\"], [1, \"spinner\", \"spinner-inline\"]],\n    template: function ClrButton_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵtemplate(0, ClrButton_ng_template_0_Template, 3, 7, \"ng-template\", null, 0, ɵngcc0.ɵɵtemplateRefExtractor);\n      }\n    },\n    directives: [ɵngcc1.NgIf],\n    encapsulation: 2\n  });\n  return ClrButton;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nvar ClrSide = /*#__PURE__*/(() => {\n  (function (ClrSide) {\n    ClrSide[ClrSide[\"BEFORE\"] = -1] = \"BEFORE\";\n    ClrSide[ClrSide[\"AFTER\"] = 1] = \"AFTER\";\n  })(ClrSide || (ClrSide = {}));\n\n  return ClrSide;\n})();\n\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nclass ClrPopoverPositions {}\n\nClrPopoverPositions['top-right'] = {\n  axis: ClrAxis.VERTICAL,\n  side: ClrSide.BEFORE,\n  anchor: ClrAlignment.END,\n  content: ClrAlignment.END\n};\nClrPopoverPositions['top-left'] = {\n  axis: ClrAxis.VERTICAL,\n  side: ClrSide.BEFORE,\n  anchor: ClrAlignment.START,\n  content: ClrAlignment.START\n};\nClrPopoverPositions['bottom-right'] = {\n  axis: ClrAxis.VERTICAL,\n  side: ClrSide.AFTER,\n  anchor: ClrAlignment.END,\n  content: ClrAlignment.END\n};\nClrPopoverPositions['bottom-left'] = {\n  axis: ClrAxis.VERTICAL,\n  side: ClrSide.AFTER,\n  anchor: ClrAlignment.START,\n  content: ClrAlignment.START\n};\nClrPopoverPositions['right-top'] = {\n  axis: ClrAxis.HORIZONTAL,\n  side: ClrSide.AFTER,\n  anchor: ClrAlignment.CENTER,\n  content: ClrAlignment.END\n};\nClrPopoverPositions['right-bottom'] = {\n  axis: ClrAxis.HORIZONTAL,\n  side: ClrSide.AFTER,\n  anchor: ClrAlignment.START,\n  content: ClrAlignment.START\n};\nClrPopoverPositions['left-top'] = {\n  axis: ClrAxis.HORIZONTAL,\n  side: ClrSide.BEFORE,\n  anchor: ClrAlignment.CENTER,\n  content: ClrAlignment.END\n};\nClrPopoverPositions['left-bottom'] = {\n  axis: ClrAxis.HORIZONTAL,\n  side: ClrSide.BEFORE,\n  anchor: ClrAlignment.START,\n  content: ClrAlignment.START\n};\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nlet ClrButtonGroup = /*#__PURE__*/(() => {\n  class ClrButtonGroup {\n    constructor(buttonGroupNewService, toggleService, popoverId, commonStrings) {\n      this.buttonGroupNewService = buttonGroupNewService;\n      this.toggleService = toggleService;\n      this.popoverId = popoverId;\n      this.commonStrings = commonStrings;\n      this.popoverPosition = ClrPopoverPositions['bottom-left'];\n      this.inlineButtons = [];\n      this.menuButtons = [];\n    }\n\n    get open() {\n      return this.toggleService.open;\n    }\n    /**\n     * 1. Initializes the initial Button Group View\n     * 2. Subscribes to changes on the ContentChildren\n     *    in case the user content projection changes\n     */\n\n\n    ngAfterContentInit() {\n      this.initializeButtons();\n      this.buttonGroupNewService.changes.subscribe(button => this.rearrangeButton(button));\n      this.buttons.changes.subscribe(() => {\n        this.initializeButtons();\n      });\n    }\n    /**\n     * Moves the button into the other ViewContainer\n     * when an update is received.\n     *\n     * @param button\n     */\n\n\n    rearrangeButton(button) {\n      let fromView;\n      let toView;\n\n      if (button.inMenu) {\n        fromView = this.inlineButtons;\n        toView = this.menuButtons;\n      } else {\n        fromView = this.menuButtons;\n        toView = this.inlineButtons;\n      }\n\n      const index = fromView.indexOf(button);\n\n      if (index > -1) {\n        fromView.splice(index, 1);\n        const moveIndex = this.getMoveIndex(button);\n\n        if (moveIndex <= toView.length) {\n          toView.splice(moveIndex, 0, button);\n        }\n      }\n    }\n    /**\n     * Author: Eudes\n     *\n     * Finds the order of a button w.r.t other buttons\n     *\n     * @param buttonToMove\n     * @returns\n     */\n\n\n    getMoveIndex(buttonToMove) {\n      const tempArr = this.buttons.filter(button => button.inMenu === buttonToMove.inMenu);\n      return tempArr.indexOf(buttonToMove);\n    }\n\n    initializeButtons() {\n      const tempInlineButtons = [];\n      const tempInMenuButtons = [];\n      this.buttons.forEach(button => {\n        if (button.inMenu) {\n          tempInMenuButtons.push(button);\n        } else {\n          tempInlineButtons.push(button);\n        }\n      });\n      this.inlineButtons = tempInlineButtons;\n      this.menuButtons = tempInMenuButtons;\n    }\n\n    get menuPosition() {\n      return this._menuPosition;\n    }\n\n    set menuPosition(pos) {\n      if (pos && ClrPopoverPositions[pos]) {\n        this._menuPosition = pos;\n      } else {\n        this._menuPosition = 'bottom-left';\n      }\n\n      this.popoverPosition = ClrPopoverPositions[this._menuPosition];\n    }\n\n  }\n\n  ClrButtonGroup.ɵfac = function ClrButtonGroup_Factory(t) {\n    return new (t || ClrButtonGroup)(ɵngcc0.ɵɵdirectiveInject(ButtonInGroupService), ɵngcc0.ɵɵdirectiveInject(ClrPopoverToggleService), ɵngcc0.ɵɵdirectiveInject(UNIQUE_ID), ɵngcc0.ɵɵdirectiveInject(ClrCommonStringsService));\n  };\n\n  ClrButtonGroup.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ClrButtonGroup,\n    selectors: [[\"clr-button-group\"]],\n    contentQueries: function ClrButtonGroup_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, ClrButton, 4);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.buttons = _t);\n      }\n    },\n    hostVars: 2,\n    hostBindings: function ClrButtonGroup_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"btn-group\", true);\n      }\n    },\n    inputs: {\n      menuPosition: [\"clrMenuPosition\", \"menuPosition\"]\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([ButtonInGroupService, UNIQUE_ID_PROVIDER, ClrPopoverToggleService, ClrPopoverEventsService, ClrPopoverPositionService])],\n    decls: 4,\n    vars: 2,\n    consts: [[4, \"ngFor\", \"ngForOf\"], [4, \"ngIf\"], [\"ref\", \"\"], [3, \"ngTemplateOutlet\"], [1, \"btn-group-overflow\", \"open\", 3, \"ngClass\"], [\"anchor\", \"\"], [\"clrPopoverAnchor\", \"\", \"clrPopoverOpenCloseButton\", \"\", 1, \"btn\", \"dropdown-toggle\"], [\"shape\", \"ellipsis-horizontal\"], [\"role\", \"menu\", \"class\", \"dropdown-menu clr-button-group-menu\", 3, \"id\", 4, \"clrPopoverContent\", \"clrPopoverContentAt\", \"clrPopoverContentOutsideClickToClose\", \"clrPopoverContentScrollToClose\"], [\"role\", \"menu\", 1, \"dropdown-menu\", \"clr-button-group-menu\", 3, \"id\"]],\n    template: function ClrButtonGroup_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, ClrButtonGroup_ng_container_0_Template, 2, 1, \"ng-container\", 0);\n        ɵngcc0.ɵɵtemplate(1, ClrButtonGroup_ng_container_1_Template, 6, 9, \"ng-container\", 1);\n        ɵngcc0.ɵɵtemplate(2, ClrButtonGroup_ng_template_2_Template, 1, 1, \"ng-template\", null, 2, ɵngcc0.ɵɵtemplateRefExtractor);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.inlineButtons);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.menuButtons.length > 0);\n      }\n    },\n    directives: [ɵngcc1.NgForOf, ɵngcc1.NgIf, ɵngcc1.NgTemplateOutlet, ɵngcc1.NgClass, ClrPopoverAnchor, ClrPopoverOpenCloseButton, CdsIconCustomTag, ClrPopoverContent],\n    encapsulation: 2\n  });\n  return ClrButtonGroup;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nconst CLR_BUTTON_GROUP_DIRECTIVES = [ClrButton, ClrButtonGroup];\nlet ClrButtonGroupModule = /*#__PURE__*/(() => {\n  class ClrButtonGroupModule {}\n\n  ClrButtonGroupModule.ɵfac = function ClrButtonGroupModule_Factory(t) {\n    return new (t || ClrButtonGroupModule)();\n  };\n\n  ClrButtonGroupModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: ClrButtonGroupModule\n  });\n  ClrButtonGroupModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule, ClrIconModule, ClrPopoverModuleNext]]\n  });\n  return ClrButtonGroupModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ClrButtonGroupModule, {\n    declarations: function () {\n      return [ClrButton, ClrButtonGroup];\n    },\n    imports: function () {\n      return [CommonModule, ClrIconModule, ClrPopoverModuleNext];\n    },\n    exports: function () {\n      return [ClrButton, ClrButtonGroup];\n    }\n  });\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrLoadingButton = /*#__PURE__*/(() => {\n  class ClrLoadingButton {\n    constructor(el, renderer) {\n      this.el = el;\n      this.renderer = renderer;\n      this.buttonState = ClrLoadingState;\n      this.state = ClrLoadingState.DEFAULT;\n      this.clrLoadingChange = new EventEmitter(false);\n    }\n\n    loadingStateChange(state) {\n      if (state === this.state) {\n        return;\n      }\n\n      this.state = state;\n\n      switch (state) {\n        case ClrLoadingState.DEFAULT:\n          this.renderer.removeStyle(this.el.nativeElement, 'width');\n          this.renderer.removeStyle(this.el.nativeElement, 'transform'); // for chromium render bug see issue https://github.com/vmware/clarity/issues/2700\n\n          if (!this.disabled) {\n            this.renderer.removeAttribute(this.el.nativeElement, 'disabled');\n          }\n\n          break;\n\n        case ClrLoadingState.LOADING:\n          this.setExplicitButtonWidth();\n          this.renderer.setStyle(this.el.nativeElement, 'transform', 'translatez(0)'); // for chromium render bug see issue https://github.com/vmware/clarity/issues/2700\n\n          this.renderer.setAttribute(this.el.nativeElement, 'disabled', '');\n          break;\n\n        case ClrLoadingState.SUCCESS:\n          this.setExplicitButtonWidth();\n          break;\n\n        case ClrLoadingState.ERROR:\n          this.loadingStateChange(ClrLoadingState.DEFAULT);\n          break;\n\n        default:\n          break;\n      }\n\n      this.clrLoadingChange.emit(state);\n    }\n\n    setExplicitButtonWidth() {\n      if (this.el.nativeElement && this.el.nativeElement.getBoundingClientRect) {\n        const boundingClientRect = this.el.nativeElement.getBoundingClientRect();\n        this.renderer.setStyle(this.el.nativeElement, 'width', `${boundingClientRect.width}px`);\n      }\n    }\n\n  }\n\n  ClrLoadingButton.ɵfac = function ClrLoadingButton_Factory(t) {\n    return new (t || ClrLoadingButton)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2));\n  };\n\n  ClrLoadingButton.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ClrLoadingButton,\n    selectors: [[\"button\", \"clrLoading\", \"\"]],\n    hostVars: 1,\n    hostBindings: function ClrLoadingButton_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"disabled\", ctx.disabled ? \"\" : null);\n      }\n    },\n    inputs: {\n      disabled: \"disabled\"\n    },\n    outputs: {\n      clrLoadingChange: \"clrLoadingChange\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: LoadingListener,\n      useExisting: ClrLoadingButton\n    }])],\n    attrs: _c6,\n    ngContentSelectors: _c0,\n    decls: 4,\n    vars: 4,\n    consts: [[3, \"ngSwitch\"], [4, \"ngSwitchCase\"], [1, \"spinner\", \"spinner-inline\"], [1, \"spinner\", \"spinner-inline\", \"spinner-check\"]],\n    template: function ClrLoadingButton_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementContainerStart(0, 0);\n        ɵngcc0.ɵɵtemplate(1, ClrLoadingButton_span_1_Template, 2, 1, \"span\", 1);\n        ɵngcc0.ɵɵtemplate(2, ClrLoadingButton_span_2_Template, 2, 1, \"span\", 1);\n        ɵngcc0.ɵɵtemplate(3, ClrLoadingButton_span_3_Template, 2, 1, \"span\", 1);\n        ɵngcc0.ɵɵelementContainerEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngSwitch\", ctx.state);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", ctx.buttonState.LOADING);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", ctx.buttonState.SUCCESS);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngSwitchCase\", ctx.buttonState.DEFAULT);\n      }\n    },\n    directives: [ɵngcc1.NgSwitch, ɵngcc1.NgSwitchCase],\n    encapsulation: 2,\n    data: {\n      animation: [trigger('defaultButton', [transition(':enter', [style({\n        opacity: 0\n      }), animate('200ms 100ms ease-in', style({\n        opacity: 1\n      }))]), // TODO: see if we can get leave animation to work before spinner's enter animation\n      transition(':leave', [style({\n        opacity: 0\n      })])]), trigger('spinner', [transition(':enter', [style({\n        opacity: 0\n      }), animate('200ms 100ms ease-in', style({\n        opacity: 1\n      }))]), transition(':leave', [style({\n        opacity: 1\n      }), animate('100ms ease-out', style({\n        opacity: 0\n      }))])]), trigger('validated', [transition(':enter', [animate('600ms', keyframes([style({\n        transform: 'scale(0,0)',\n        offset: 0\n      }), style({\n        opacity: 1,\n        offset: 0.2\n      }), style({\n        transform: 'scale(1.2,1.2)',\n        offset: 0.4\n      }), style({\n        transform: 'scale(.9,.9)',\n        offset: 0.6\n      }), style({\n        transform: 'scale(1,1)',\n        offset: 1\n      })]))]), transition(':leave', [style({\n        opacity: 1\n      }), animate('100ms ease-out', style({\n        opacity: 0\n      }))])])]\n    }\n  });\n  return ClrLoadingButton;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nconst CLR_LOADING_BUTTON_DIRECTIVES = [ClrLoadingButton];\nlet ClrLoadingButtonModule = /*#__PURE__*/(() => {\n  class ClrLoadingButtonModule {}\n\n  ClrLoadingButtonModule.ɵfac = function ClrLoadingButtonModule_Factory(t) {\n    return new (t || ClrLoadingButtonModule)();\n  };\n\n  ClrLoadingButtonModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: ClrLoadingButtonModule\n  });\n  ClrLoadingButtonModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule]]\n  });\n  return ClrLoadingButtonModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ClrLoadingButtonModule, {\n    declarations: function () {\n      return [ClrLoadingButton];\n    },\n    imports: function () {\n      return [CommonModule];\n    },\n    exports: function () {\n      return [ClrLoadingButton];\n    }\n  });\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrButtonModule = /*#__PURE__*/(() => {\n  class ClrButtonModule {\n    constructor() {\n      ClarityIcons.addIcons(ellipsisHorizontalIcon);\n    }\n\n  }\n\n  ClrButtonModule.ɵfac = function ClrButtonModule_Factory(t) {\n    return new (t || ClrButtonModule)();\n  };\n\n  ClrButtonModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: ClrButtonModule\n  });\n  ClrButtonModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [ClrLoadingButtonModule, ClrButtonGroupModule]\n  });\n  return ClrButtonModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ClrButtonModule, {\n    exports: [ClrLoadingButtonModule, ClrButtonGroupModule]\n  });\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet EmptyAnchor = /*#__PURE__*/(() => {\n  class EmptyAnchor {}\n\n  EmptyAnchor.ɵfac = function EmptyAnchor_Factory(t) {\n    return new (t || EmptyAnchor)();\n  };\n\n  EmptyAnchor.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: EmptyAnchor,\n    selectors: [[\"ng-component\"]],\n    decls: 0,\n    vars: 0,\n    template: function EmptyAnchor_Template(rf, ctx) {},\n    encapsulation: 2\n  });\n  return EmptyAnchor;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/**\n * Internal module, please do not export!\n */\n\n\nlet ClrHostWrappingModule = /*#__PURE__*/(() => {\n  class ClrHostWrappingModule {}\n\n  ClrHostWrappingModule.ɵfac = function ClrHostWrappingModule_Factory(t) {\n    return new (t || ClrHostWrappingModule)();\n  };\n\n  ClrHostWrappingModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: ClrHostWrappingModule\n  });\n  ClrHostWrappingModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({});\n  return ClrHostWrappingModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ClrHostWrappingModule, {\n    declarations: [EmptyAnchor],\n    exports: [EmptyAnchor]\n  });\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet counter$2 = 0;\n/**\n * @TODO No idea why I need to use provideIn .. without I'm getting error that\n * ContainerIdService is not defined - But this must be optional service!?\n *\n * There is something wrong - will come back to investigate it when I have more time\n *\n */\n\nlet ContainerIdService = /*#__PURE__*/(() => {\n  class ContainerIdService {\n    constructor() {\n      this._id = `clr-form-container-${++counter$2}`;\n      this._idChange = new BehaviorSubject(this._id);\n    }\n\n    get id() {\n      return this._id;\n    }\n\n    set id(value) {\n      this._id = value;\n\n      this._idChange.next(value);\n    }\n\n    get idChange() {\n      return this._idChange.asObservable();\n    }\n\n  }\n\n  ContainerIdService.ɵfac = function ContainerIdService_Factory(t) {\n    return new (t || ContainerIdService)();\n  };\n\n  ContainerIdService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: ContainerIdService,\n    factory: ContainerIdService.ɵfac\n  });\n  return ContainerIdService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet counter$1 = 0;\nlet ControlIdService = /*#__PURE__*/(() => {\n  class ControlIdService {\n    constructor() {\n      this._id = 'clr-form-control-' + ++counter$1;\n      this._idChange = new BehaviorSubject(this._id);\n    }\n\n    get id() {\n      return this._id;\n    }\n\n    set id(value) {\n      this._id = value;\n\n      this._idChange.next(value);\n    }\n\n    get idChange() {\n      return this._idChange.asObservable();\n    }\n\n  }\n\n  ControlIdService.ɵfac = function ControlIdService_Factory(t) {\n    return new (t || ControlIdService)();\n  };\n\n  ControlIdService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: ControlIdService,\n    factory: ControlIdService.ɵfac\n  });\n  return ControlIdService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nconst CONTROL_SUFFIX = {\n  HELPER: 'helper',\n  ERROR: 'error',\n  SUCCESS: 'success',\n  NONE: null\n};\nlet ClrAbstractControl = /*#__PURE__*/(() => {\n  class ClrAbstractControl {\n    constructor(controlIdService, containerIdService) {\n      this.controlIdService = controlIdService;\n      this.containerIdService = containerIdService;\n      /**\n       * Hold the suffix for the ID\n       */\n\n      this.controlIdSuffix = 'abstract';\n    }\n\n    get id() {\n      /**\n       * The order of witch the id will be pick is:\n       *   - Container ID  (Wrapper arround multiple Controls like, Checkbox, Radio, ...)\n       *   - Control ID (Single Control wrapper like Input, Textarea, Password, ...)\n       *   - None\n       */\n      if (this.containerIdService) {\n        return `${this.containerIdService.id}-${this.controlIdSuffix}`;\n      }\n\n      if (this.controlIdService) {\n        return `${this.controlIdService.id}-${this.controlIdSuffix}`;\n      }\n\n      return null;\n    }\n\n  }\n\n  ClrAbstractControl.ɵfac = function ClrAbstractControl_Factory(t) {\n    return new (t || ClrAbstractControl)(ɵngcc0.ɵɵdirectiveInject(ControlIdService, 8), ɵngcc0.ɵɵdirectiveInject(ContainerIdService, 8));\n  };\n\n  ClrAbstractControl.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: ClrAbstractControl\n  });\n  return ClrAbstractControl;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrControlError = /*#__PURE__*/(() => {\n  class ClrControlError extends ClrAbstractControl {\n    constructor(controlIdService, containerIdService) {\n      super(controlIdService, containerIdService);\n      this.controlIdService = controlIdService;\n      this.containerIdService = containerIdService;\n      this.controlIdSuffix = CONTROL_SUFFIX.ERROR;\n    }\n\n  }\n\n  ClrControlError.ɵfac = function ClrControlError_Factory(t) {\n    return new (t || ClrControlError)(ɵngcc0.ɵɵdirectiveInject(ControlIdService, 8), ɵngcc0.ɵɵdirectiveInject(ContainerIdService, 8));\n  };\n\n  ClrControlError.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ClrControlError,\n    selectors: [[\"clr-control-error\"]],\n    hostVars: 3,\n    hostBindings: function ClrControlError_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"id\", ctx.id);\n        ɵngcc0.ɵɵclassProp(\"clr-subtext\", true);\n      }\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function ClrControlError_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2\n  });\n  return ClrControlError;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrControlHelper = /*#__PURE__*/(() => {\n  class ClrControlHelper extends ClrAbstractControl {\n    constructor(controlIdService, containerIdService) {\n      super(controlIdService, containerIdService);\n      this.controlIdService = controlIdService;\n      this.containerIdService = containerIdService;\n      this.controlIdSuffix = CONTROL_SUFFIX.HELPER;\n    }\n\n  }\n\n  ClrControlHelper.ɵfac = function ClrControlHelper_Factory(t) {\n    return new (t || ClrControlHelper)(ɵngcc0.ɵɵdirectiveInject(ControlIdService, 8), ɵngcc0.ɵɵdirectiveInject(ContainerIdService, 8));\n  };\n\n  ClrControlHelper.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ClrControlHelper,\n    selectors: [[\"clr-control-helper\"]],\n    hostVars: 3,\n    hostBindings: function ClrControlHelper_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"id\", ctx.id);\n        ɵngcc0.ɵɵclassProp(\"clr-subtext\", true);\n      }\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function ClrControlHelper_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2\n  });\n  return ClrControlHelper;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet NgControlService = /*#__PURE__*/(() => {\n  class NgControlService {\n    constructor() {\n      // Observable to subscribe to the control, since its not available immediately for projected content\n      this._controlChanges = new Subject();\n      this._helpers = new Subject();\n    }\n\n    get controlChanges() {\n      return this._controlChanges.asObservable();\n    }\n\n    setControl(control) {\n      this._controlChanges.next(control);\n    }\n\n    get helpersChange() {\n      return this._helpers.asObservable();\n    }\n\n    setHelpers(state) {\n      this._helpers.next(state);\n    }\n\n  }\n\n  NgControlService.ɵfac = function NgControlService_Factory(t) {\n    return new (t || NgControlService)();\n  };\n\n  NgControlService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: NgControlService,\n    factory: NgControlService.ɵfac\n  });\n  return NgControlService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nvar CONTROL_STATE = /*#__PURE__*/(() => {\n  (function (CONTROL_STATE) {\n    CONTROL_STATE[\"NONE\"] = \"NONE\";\n    CONTROL_STATE[\"VALID\"] = \"VALID\";\n    CONTROL_STATE[\"INVALID\"] = \"INVALID\";\n  })(CONTROL_STATE || (CONTROL_STATE = {}));\n\n  return CONTROL_STATE;\n})();\nlet IfControlStateService = /*#__PURE__*/(() => {\n  class IfControlStateService {\n    constructor(ngControlService) {\n      this.ngControlService = ngControlService;\n      this.subscriptions = []; // Implement our own status changes observable, since Angular controls don't\n\n      this._statusChanges = new BehaviorSubject(CONTROL_STATE.NONE); // Wait for the control to be available\n\n      this.subscriptions.push(this.ngControlService.controlChanges.subscribe(control => {\n        if (control) {\n          this.control = control; // Subscribe to the status change events, only after touched\n          // and emit the control\n\n          this.subscriptions.push(this.control.statusChanges.subscribe(() => {\n            this.triggerStatusChange();\n          }));\n        }\n      }));\n    }\n\n    get statusChanges() {\n      return this._statusChanges.asObservable();\n    }\n\n    triggerStatusChange() {\n      /* Check if control is defined and run the code only then */\n      if (this.control) {\n        // These status values are mutually exclusive, so a control\n        // cannot be both valid AND invalid or invalid AND disabled.\n        const status = CONTROL_STATE[this.control.status];\n\n        this._statusChanges.next(this.control.touched && ['VALID', 'INVALID'].includes(status) ? status : CONTROL_STATE.NONE);\n      }\n    } // Clean up subscriptions\n\n\n    ngOnDestroy() {\n      this.subscriptions.forEach(subscription => subscription.unsubscribe());\n    }\n\n  }\n\n  IfControlStateService.ɵfac = function IfControlStateService_Factory(t) {\n    return new (t || IfControlStateService)(ɵngcc0.ɵɵinject(NgControlService));\n  };\n\n  IfControlStateService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: IfControlStateService,\n    factory: IfControlStateService.ɵfac\n  });\n  return IfControlStateService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nvar ClrFormLayout = /*#__PURE__*/(() => {\n  (function (ClrFormLayout) {\n    ClrFormLayout[\"VERTICAL\"] = \"vertical\";\n    ClrFormLayout[\"HORIZONTAL\"] = \"horizontal\";\n    ClrFormLayout[\"COMPACT\"] = \"compact\";\n  })(ClrFormLayout || (ClrFormLayout = {}));\n\n  return ClrFormLayout;\n})();\nlet LayoutService = /*#__PURE__*/(() => {\n  class LayoutService {\n    constructor() {\n      this.minLabelSize = 1;\n      this.maxLabelSize = 12;\n      this.layout = ClrFormLayout.HORIZONTAL; // This is basically a replacement for Object.values(), which IE11 and Node <9 don't support :(\n      // String enums cannot be reverse-mapped, meaning ClrFormLayout['COMPACT'] does not return 'compact' so\n      // this exists to deal with this little caveat to get the list of the values as an array.\n\n      this.layoutValues = Object.keys(ClrFormLayout).map(key => ClrFormLayout[key]);\n      this._labelSize = 2;\n    }\n\n    set labelSize(size) {\n      if (this.labelSizeIsValid(size)) {\n        this._labelSize = size;\n      }\n    }\n\n    get labelSize() {\n      return this._labelSize;\n    }\n\n    isVertical() {\n      return this.layout === ClrFormLayout.VERTICAL;\n    }\n\n    isHorizontal() {\n      return this.layout === ClrFormLayout.HORIZONTAL;\n    }\n\n    isCompact() {\n      return this.layout === ClrFormLayout.COMPACT;\n    }\n\n    get layoutClass() {\n      return `clr-form-${this.layout}`;\n    }\n\n    isValid(layout) {\n      return this.layoutValues.indexOf(layout) > -1;\n    }\n\n    labelSizeIsValid(labelSize) {\n      return Number.isInteger(labelSize) && labelSize >= this.minLabelSize && labelSize <= this.maxLabelSize;\n    }\n\n  }\n\n  LayoutService.ɵfac = function LayoutService_Factory(t) {\n    return new (t || LayoutService)();\n  };\n\n  LayoutService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: LayoutService,\n    factory: LayoutService.ɵfac\n  });\n  return LayoutService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrLabel = /*#__PURE__*/(() => {\n  class ClrLabel {\n    constructor(controlIdService, layoutService, ngControlService, renderer, el) {\n      this.controlIdService = controlIdService;\n      this.layoutService = layoutService;\n      this.ngControlService = ngControlService;\n      this.renderer = renderer;\n      this.el = el;\n      this.subscriptions = [];\n      this.enableGrid = true;\n    }\n\n    get labelText() {\n      return this.el.nativeElement && this.el.nativeElement.textContent;\n    }\n\n    ngOnInit() {\n      // Only add the clr-control-label if it is inside a control container\n      if (this.controlIdService || this.ngControlService) {\n        this.renderer.addClass(this.el.nativeElement, 'clr-control-label');\n      } // Only set the grid column classes if we are in the right context and if they aren't already set\n\n\n      if (this.enableGrid && this.layoutService && !this.layoutService.isVertical() && this.el.nativeElement && this.el.nativeElement.className.indexOf('clr-col') < 0) {\n        this.renderer.addClass(this.el.nativeElement, 'clr-col-12');\n        this.renderer.addClass(this.el.nativeElement, `clr-col-md-${this.layoutService.labelSize}`);\n      }\n\n      if (this.controlIdService && !this.forAttr) {\n        this.subscriptions.push(this.controlIdService.idChange.subscribe(id => this.forAttr = id));\n      }\n    }\n\n    disableGrid() {\n      this.enableGrid = false;\n    }\n\n    ngOnDestroy() {\n      this.subscriptions.forEach(sub => sub.unsubscribe());\n    }\n\n  }\n\n  ClrLabel.ɵfac = function ClrLabel_Factory(t) {\n    return new (t || ClrLabel)(ɵngcc0.ɵɵdirectiveInject(ControlIdService, 8), ɵngcc0.ɵɵdirectiveInject(LayoutService, 8), ɵngcc0.ɵɵdirectiveInject(NgControlService, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  ClrLabel.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: ClrLabel,\n    selectors: [[\"label\"]],\n    hostVars: 1,\n    hostBindings: function ClrLabel_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"for\", ctx.forAttr);\n      }\n    },\n    inputs: {\n      forAttr: [\"for\", \"forAttr\"]\n    }\n  });\n  return ClrLabel;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nconst CLASS_ERROR = 'clr-error';\nconst CLASS_SUCCESS = 'clr-success';\nlet ControlClassService = /*#__PURE__*/(() => {\n  class ControlClassService {\n    constructor(layoutService) {\n      this.layoutService = layoutService;\n      this.className = '';\n    }\n\n    controlClass(state = CONTROL_STATE.NONE, grid = false, additional = '') {\n      const controlClasses = [this.className, additional];\n\n      switch (state) {\n        case CONTROL_STATE.VALID:\n          controlClasses.push(CLASS_SUCCESS);\n          break;\n\n        case CONTROL_STATE.INVALID:\n          controlClasses.push(CLASS_ERROR);\n          break;\n      }\n\n      if (grid && this.layoutService && this.className.indexOf('clr-col') === -1) {\n        controlClasses.push(`clr-col-md-${this.layoutService.maxLabelSize - this.layoutService.labelSize} clr-col-12`);\n      }\n\n      return controlClasses.join(' ').trim();\n    } // We want to remove the column classes from the input up to the container\n\n\n    initControlClass(renderer, element) {\n      if (element && element.className) {\n        this.className = element.className;\n        const klasses = element.className.split(' ');\n        klasses.forEach(klass => {\n          if (klass.startsWith('clr-col')) {\n            renderer.removeClass(element, klass);\n          }\n        });\n      }\n    }\n\n  }\n\n  ControlClassService.ɵfac = function ControlClassService_Factory(t) {\n    return new (t || ControlClassService)(ɵngcc0.ɵɵinject(LayoutService, 8));\n  };\n\n  ControlClassService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: ControlClassService,\n    factory: ControlClassService.ɵfac\n  });\n  return ControlClassService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrControlSuccess = /*#__PURE__*/(() => {\n  class ClrControlSuccess extends ClrAbstractControl {\n    constructor(controlIdService, containerIdService) {\n      super(controlIdService, containerIdService);\n      this.controlIdService = controlIdService;\n      this.containerIdService = containerIdService;\n      this.controlIdSuffix = CONTROL_SUFFIX.SUCCESS;\n    }\n\n  }\n\n  ClrControlSuccess.ɵfac = function ClrControlSuccess_Factory(t) {\n    return new (t || ClrControlSuccess)(ɵngcc0.ɵɵdirectiveInject(ControlIdService, 8), ɵngcc0.ɵɵdirectiveInject(ContainerIdService, 8));\n  };\n\n  ClrControlSuccess.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ClrControlSuccess,\n    selectors: [[\"clr-control-success\"]],\n    hostVars: 3,\n    hostBindings: function ClrControlSuccess_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"id\", ctx.id);\n        ɵngcc0.ɵɵclassProp(\"clr-subtext\", true);\n      }\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function ClrControlSuccess_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2\n  });\n  return ClrControlSuccess;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrAbstractContainer = /*#__PURE__*/(() => {\n  class ClrAbstractContainer {\n    constructor(ifControlStateService, layoutService, controlClassService, ngControlService) {\n      this.ifControlStateService = ifControlStateService;\n      this.layoutService = layoutService;\n      this.controlClassService = controlClassService;\n      this.ngControlService = ngControlService;\n      this.subscriptions = [];\n      this._dynamic = false;\n      this.subscriptions.push(this.ifControlStateService.statusChanges.subscribe(state => {\n        this.state = state;\n        this.updateHelpers();\n      }));\n      this.subscriptions.push(this.ngControlService.controlChanges.subscribe(control => {\n        this.control = control;\n      }));\n    }\n    /**\n     * @NOTE\n     * Helper control is a bit different than the others, it must be visible most of the time:\n     *   - Helper must NOT be visible when CONTROL_STATE is not NONE and Success or Error components are \\\n     * defined.\n     *\n     * For example user implement only Error control then if CONTROL_STATE is VALID then helper\n     * control must be visible.\n     */\n\n\n    get showHelper() {\n      // without existence of helper component there is no need of additional checks.\n      if (!!this.controlHelperComponent === false) {\n        return false;\n      }\n\n      return (\n        /* Helper Component exist and the state of the form is NONE (not touched) */\n        !!this.controlHelperComponent && this.state === CONTROL_STATE.NONE ||\n        /* or there is no success component but the state of the form is VALID - show helper information */\n        !!this.controlSuccessComponent === false && this.state === CONTROL_STATE.VALID ||\n        /* or there is no error component but the state of the form is INVALID - show helper information */\n        !!this.controlErrorComponent === false && this.state === CONTROL_STATE.INVALID\n      );\n    }\n\n    get showValid() {\n      return this.state === CONTROL_STATE.VALID && !!this.controlSuccessComponent;\n    }\n\n    get showInvalid() {\n      return this.state === CONTROL_STATE.INVALID && !!this.controlErrorComponent;\n    }\n\n    ngAfterContentInit() {\n      /**\n       * We gonna set the helper control state, after all or most of the components\n       * are ready - also this will trigger some initial flows into wrappers and controls,\n       * like locating IDs  and setting  attributes.\n       */\n      this.updateHelpers();\n    }\n\n    ngOnDestroy() {\n      this.subscriptions.forEach(subscription => subscription.unsubscribe());\n    }\n\n    controlClass() {\n      /**\n       * Decide what subtext to display:\n       *   - container is valid but no success component is implemented - use helper class\n       *   - container is valid and success component is implemented - use success class\n       */\n      if (!this.controlSuccessComponent && this.state === CONTROL_STATE.VALID) {\n        return this.controlClassService.controlClass(CONTROL_STATE.NONE, this.addGrid());\n      }\n      /**\n       * Pass form control state and return string of classes to be applied to the container.\n       */\n\n\n      return this.controlClassService.controlClass(this.state, this.addGrid());\n    }\n\n    addGrid() {\n      return this.layoutService && !this.layoutService.isVertical();\n    }\n\n    updateHelpers() {\n      if (this.ngControlService) {\n        this.ngControlService.setHelpers({\n          show: this.showInvalid || this.showHelper || this.showValid,\n          showInvalid: this.showInvalid,\n          showHelper: this.showHelper,\n          showValid: this.showValid\n        });\n      }\n    }\n\n  }\n\n  ClrAbstractContainer.ɵfac = function ClrAbstractContainer_Factory(t) {\n    return new (t || ClrAbstractContainer)(ɵngcc0.ɵɵdirectiveInject(IfControlStateService), ɵngcc0.ɵɵdirectiveInject(LayoutService, 8), ɵngcc0.ɵɵdirectiveInject(ControlClassService), ɵngcc0.ɵɵdirectiveInject(NgControlService));\n  };\n\n  ClrAbstractContainer.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: ClrAbstractContainer,\n    contentQueries: function ClrAbstractContainer_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, ClrLabel, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, ClrControlSuccess, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, ClrControlError, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, ClrControlHelper, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.label = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.controlSuccessComponent = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.controlErrorComponent = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.controlHelperComponent = _t.first);\n      }\n    }\n  });\n  return ClrAbstractContainer;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrControlContainer = /*#__PURE__*/(() => {\n  class ClrControlContainer extends ClrAbstractContainer {}\n\n  ClrControlContainer.ɵfac = /*@__PURE__*/function () {\n    let ɵClrControlContainer_BaseFactory;\n    return function ClrControlContainer_Factory(t) {\n      return (ɵClrControlContainer_BaseFactory || (ɵClrControlContainer_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(ClrControlContainer)))(t || ClrControlContainer);\n    };\n  }();\n\n  ClrControlContainer.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ClrControlContainer,\n    selectors: [[\"clr-control-container\"]],\n    hostVars: 6,\n    hostBindings: function ClrControlContainer_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"clr-form-control\", true)(\"clr-form-control-disabled\", ctx.control == null ? null : ctx.control.disabled)(\"clr-row\", ctx.addGrid());\n      }\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([IfControlStateService, NgControlService, ControlIdService, ControlClassService]), ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c8,\n    decls: 10,\n    vars: 7,\n    consts: [[4, \"ngIf\"], [1, \"clr-control-container\", 3, \"ngClass\"], [1, \"clr-input-wrapper\"], [\"class\", \"clr-validate-icon\", \"status\", \"danger\", \"shape\", \"exclamation-circle\", \"aria-hidden\", \"true\", 4, \"ngIf\"], [\"class\", \"clr-validate-icon\", \"shape\", \"check-circle\", \"status\", \"success\", \"aria-hidden\", \"true\", 4, \"ngIf\"], [\"status\", \"danger\", \"shape\", \"exclamation-circle\", \"aria-hidden\", \"true\", 1, \"clr-validate-icon\"], [\"shape\", \"check-circle\", \"status\", \"success\", \"aria-hidden\", \"true\", 1, \"clr-validate-icon\"]],\n    template: function ClrControlContainer_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c7);\n        ɵngcc0.ɵɵprojection(0);\n        ɵngcc0.ɵɵtemplate(1, ClrControlContainer_label_1_Template, 1, 0, \"label\", 0);\n        ɵngcc0.ɵɵelementStart(2, \"div\", 1);\n        ɵngcc0.ɵɵelementStart(3, \"div\", 2);\n        ɵngcc0.ɵɵprojection(4, 1);\n        ɵngcc0.ɵɵtemplate(5, ClrControlContainer_cds_icon_5_Template, 1, 0, \"cds-icon\", 3);\n        ɵngcc0.ɵɵtemplate(6, ClrControlContainer_cds_icon_6_Template, 1, 0, \"cds-icon\", 4);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(7, ClrControlContainer_ng_content_7_Template, 1, 0, \"ng-content\", 0);\n        ɵngcc0.ɵɵtemplate(8, ClrControlContainer_ng_content_8_Template, 1, 0, \"ng-content\", 0);\n        ɵngcc0.ɵɵtemplate(9, ClrControlContainer_ng_content_9_Template, 1, 0, \"ng-content\", 0);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.label && ctx.addGrid());\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngClass\", ctx.controlClass());\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showInvalid);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showValid);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showHelper);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showInvalid);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showValid);\n      }\n    },\n    directives: [ɵngcc1.NgIf, ɵngcc1.NgClass, ClrLabel, CdsIconCustomTag],\n    encapsulation: 2\n  });\n  return ClrControlContainer;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/**\n * HostWrapper must be called in OnInit to ensure that the Views are ready. If its called in a constructor the view is\n * still undefined.\n * TODO - make sure these comment annotations do not break ng-packgr.\n */\n\n\nclass HostWrapper {\n  constructor(containerType, vcr, index = 0) {\n    this.injector = vcr.injector; // If the host is already wrapped, we don't do anything\n\n    if (!this.injector.get(containerType, null)) {\n      const cfr = this.injector.get(ComponentFactoryResolver);\n      const el = this.injector.get(ElementRef); // We need a new anchor, since we're projecting the current one.\n\n      vcr.createComponent(cfr.resolveComponentFactory(EmptyAnchor));\n      const factory = cfr.resolveComponentFactory(containerType); // Craft the element array based on what slot to use. Angular only uses the index to determine\n      // which ng-content to project into, so if you have more than one ng-content you'll need to set\n      // the index in the constructor appropriately\n\n      const element = [];\n      element[index] = [el.nativeElement]; // We're assuming only one projection slot, but in more complex cases we might want to provide\n      // a different array of projected elements.\n\n      const containerRef = vcr.createComponent(factory, undefined, undefined, element); // We can now remove the useless anchor\n\n      vcr.remove(0); // We note that the container was dynamically created\n\n      containerRef.instance._dynamic = true; // We keep the wrapper's injector to access the dependencies that weren't available before.\n\n      this.injector = containerRef.injector;\n    }\n  }\n\n  get(token, notFoundValue) {\n    return this.injector.get(token, notFoundValue);\n  }\n\n}\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet MarkControlService = /*#__PURE__*/(() => {\n  class MarkControlService {\n    constructor() {\n      this._touched = new Subject();\n    }\n\n    get touchedChange() {\n      return this._touched.asObservable();\n    }\n\n    markAsTouched() {\n      this._touched.next();\n    }\n\n  }\n\n  MarkControlService.ɵfac = function MarkControlService_Factory(t) {\n    return new (t || MarkControlService)();\n  };\n\n  MarkControlService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: MarkControlService,\n    factory: MarkControlService.ɵfac\n  });\n  return MarkControlService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet WrappedFormControl = /*#__PURE__*/(() => {\n  class WrappedFormControl {\n    // I lost way too much time trying to make this work without injecting the ViewContainerRef and the Injector,\n    // I'm giving up. So we have to inject these two manually for now.\n    constructor(vcr, wrapperType, injector, ngControl, renderer, el) {\n      this.vcr = vcr;\n      this.wrapperType = wrapperType;\n      this.ngControl = ngControl;\n      this.subscriptions = [];\n      this.index = 0;\n      this.renderer = renderer;\n      this.el = el;\n\n      try {\n        this.ngControlService = injector.get(NgControlService);\n        this.ifControlStateService = injector.get(IfControlStateService);\n        this.controlClassService = injector.get(ControlClassService);\n        this.markControlService = injector.get(MarkControlService);\n      } catch (e) {// Swallow errors\n      }\n\n      if (this.controlClassService) {\n        this.controlClassService.initControlClass(renderer, el.nativeElement);\n      }\n\n      if (this.markControlService) {\n        this.subscriptions.push(this.markControlService.touchedChange.subscribe(() => {\n          this.markAsTouched();\n        }));\n      }\n\n      if (this.ngControlService) {\n        this.subscriptions.push(this.ngControlService.helpersChange.subscribe(state => {\n          this.setAriaDescribedBy(state);\n        }));\n      }\n    }\n\n    get id() {\n      return this._id;\n    }\n\n    set id(value) {\n      this._id = value;\n\n      if (this.controlIdService) {\n        this.controlIdService.id = value;\n      }\n    }\n\n    triggerValidation() {\n      if (this.ifControlStateService) {\n        /**\n         * For some reason the <input type=\"number\" /> on blur ngControl doesn't set the control to 'touched'\n         * This one is a workaround to provide the control to be 'touched' on blur and fix #4480.\n         */\n        if (this.ngControl && !this.ngControl.touched) {\n          this.markAsTouched();\n        }\n\n        this.ifControlStateService.triggerStatusChange();\n      }\n    }\n\n    markAsTouched() {\n      this.ngControl.control.markAsTouched();\n      this.ngControl.control.updateValueAndValidity();\n    } // @TODO This method has a try/catch due to an unknown issue that came when building the clrToggle feature\n    // We need to figure out why this fails for the ClrToggle scenario but works for Date picker...\n    // To see the error, remove the try/catch here and run the ClrToggle suite to see issues getting the container\n    // injector in time, and this ONLY HAPPENS in tests and not in dev/prod mode.\n\n\n    getProviderFromContainer(token, notFoundValue) {\n      try {\n        return this._containerInjector.get(token, notFoundValue);\n      } catch (e) {\n        return notFoundValue;\n      }\n    }\n\n    ngOnInit() {\n      this._containerInjector = new HostWrapper(this.wrapperType, this.vcr, this.index);\n      this.controlIdService = this._containerInjector.get(ControlIdService);\n\n      try {\n        this.containerIdService = this._containerInjector.get(ContainerIdService);\n      } catch (_injectorError) {\n        /**\n         * We suppress error, not all containers will provide `ContainerIdService` so\n         * there could be exception that is not provided.\n         */\n      }\n\n      if (this._id) {\n        this.controlIdService.id = this._id;\n      } else {\n        this._id = this.controlIdService.id;\n      }\n\n      if (this.ngControlService) {\n        this.ngControlService.setControl(this.ngControl);\n      }\n    }\n\n    ngOnDestroy() {\n      this.subscriptions.forEach(sub => sub.unsubscribe());\n    }\n\n    setAriaDescribedBy(helpers) {\n      if (helpers.show) {\n        const ariaDescribedBy = this.getAriaDescribedById(helpers);\n\n        if (ariaDescribedBy !== null) {\n          this.renderer.setAttribute(this.el.nativeElement, 'aria-describedby', ariaDescribedBy);\n          return;\n        }\n      }\n\n      this.renderer.removeAttribute(this.el.nativeElement, 'aria-describedby');\n    }\n\n    getAriaDescribedById(helpers) {\n      let suffix = CONTROL_SUFFIX.HELPER;\n\n      if (helpers.showInvalid) {\n        suffix = CONTROL_SUFFIX.ERROR;\n      } else if (helpers.showValid) {\n        suffix = CONTROL_SUFFIX.SUCCESS;\n      }\n\n      if (this.containerIdService) {\n        return this.containerIdService.id.concat('-', suffix);\n      }\n\n      if (this.controlIdService) {\n        return this.controlIdService.id.concat('-', suffix);\n      }\n      /**\n       * If ContainerIdService or ControlIdService are missing don't try to guess\n       * Don't set anything.\n       */\n\n\n      return null;\n    }\n\n  }\n\n  WrappedFormControl.ɵfac = function WrappedFormControl_Factory(t) {\n    return new (t || WrappedFormControl)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Type), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.NgControl), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  WrappedFormControl.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: WrappedFormControl,\n    hostVars: 1,\n    hostBindings: function WrappedFormControl_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"blur\", function WrappedFormControl_blur_HostBindingHandler() {\n          return ctx.triggerValidation();\n        });\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n      }\n    },\n    inputs: {\n      id: \"id\"\n    }\n  });\n  return WrappedFormControl;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrControl = /*#__PURE__*/(() => {\n  class ClrControl extends WrappedFormControl {\n    constructor(vcr, injector, control, renderer, el) {\n      super(vcr, ClrControlContainer, injector, control, renderer, el);\n      this.index = 1;\n    }\n\n  }\n\n  ClrControl.ɵfac = function ClrControl_Factory(t) {\n    return new (t || ClrControl)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.NgControl, 10), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  ClrControl.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: ClrControl,\n    selectors: [[\"\", \"clrControl\", \"\"]],\n    hostVars: 2,\n    hostBindings: function ClrControl_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"clr-input\", true);\n      }\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  return ClrControl;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrForm = /*#__PURE__*/(() => {\n  class ClrForm {\n    constructor(layoutService, markControlService) {\n      this.layoutService = layoutService;\n      this.markControlService = markControlService;\n    }\n\n    set labelSize(size) {\n      const sizeNumber = parseInt(size, 10) || 2;\n      this.layoutService.labelSize = sizeNumber;\n    } // Trying to avoid adding an input and keep this backwards compatible at the same time\n\n\n    markAsTouched() {\n      this.markControlService.markAsTouched();\n    }\n\n    onFormSubmit() {\n      this.markAsTouched();\n    }\n\n  }\n\n  ClrForm.ɵfac = function ClrForm_Factory(t) {\n    return new (t || ClrForm)(ɵngcc0.ɵɵdirectiveInject(LayoutService), ɵngcc0.ɵɵdirectiveInject(MarkControlService));\n  };\n\n  ClrForm.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: ClrForm,\n    selectors: [[\"\", \"clrForm\", \"\"]],\n    contentQueries: function ClrForm_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, ClrLabel, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.labels = _t);\n      }\n    },\n    hostVars: 6,\n    hostBindings: function ClrForm_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"submit\", function ClrForm_submit_HostBindingHandler() {\n          return ctx.onFormSubmit();\n        });\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"clr-form\", true)(\"clr-form-horizontal\", ctx.layoutService.isHorizontal())(\"clr-form-compact\", ctx.layoutService.isCompact());\n      }\n    },\n    inputs: {\n      labelSize: [\"clrLabelSize\", \"labelSize\"]\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([LayoutService, MarkControlService])]\n  });\n  return ClrForm;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet AbstractIfState = /*#__PURE__*/(() => {\n  class AbstractIfState {\n    constructor(ifControlStateService, ngControlService) {\n      this.ifControlStateService = ifControlStateService;\n      this.ngControlService = ngControlService;\n      this.subscriptions = [];\n      this.displayedContent = false;\n\n      if (ngControlService) {\n        this.subscriptions.push(this.ngControlService.controlChanges.subscribe(control => {\n          this.control = control;\n        }));\n      }\n\n      if (ifControlStateService) {\n        this.subscriptions.push(this.ifControlStateService.statusChanges.subscribe(state => {\n          this.handleState(state);\n        }));\n      }\n    }\n\n    ngOnDestroy() {\n      this.subscriptions.forEach(sub => sub.unsubscribe());\n    } // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n    handleState(state) {\n      /* overwrite in implementation to handle status change */\n    }\n\n  }\n\n  AbstractIfState.ɵfac = function AbstractIfState_Factory(t) {\n    return new (t || AbstractIfState)(ɵngcc0.ɵɵdirectiveInject(IfControlStateService, 8), ɵngcc0.ɵɵdirectiveInject(NgControlService, 8));\n  };\n\n  AbstractIfState.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: AbstractIfState\n  });\n  return AbstractIfState;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrIfError = /*#__PURE__*/(() => {\n  class ClrIfError extends AbstractIfState {\n    constructor(ifControlStateService, ngControlService, template, container) {\n      super(ifControlStateService, ngControlService);\n      this.template = template;\n      this.container = container;\n\n      if (!this.ifControlStateService) {\n        throw new Error('clrIfError can only be used within a form control container element like clr-input-container');\n      }\n    }\n    /**\n     * @param state CONTROL_STATE\n     */\n\n\n    handleState(state) {\n      if (this.error && this.control) {\n        this.displayError(this.control.hasError(this.error));\n      } else {\n        this.displayError(CONTROL_STATE.INVALID === state);\n      }\n    }\n\n    displayError(invalid) {\n      /* if no container do nothing */\n      if (!this.container) {\n        return;\n      }\n\n      if (invalid) {\n        if (this.displayedContent === false) {\n          this.embeddedViewRef = this.container.createEmbeddedView(this.template, {\n            error: this.control.getError(this.error)\n          });\n          this.displayedContent = true;\n        } else if (this.embeddedViewRef && this.embeddedViewRef.context) {\n          // if view is already rendered, update the error object to keep it in sync\n          this.embeddedViewRef.context.error = this.control.getError(this.error);\n        }\n      } else {\n        this.container.clear();\n        this.displayedContent = false;\n      }\n    }\n\n  }\n\n  ClrIfError.ɵfac = function ClrIfError_Factory(t) {\n    return new (t || ClrIfError)(ɵngcc0.ɵɵdirectiveInject(IfControlStateService, 8), ɵngcc0.ɵɵdirectiveInject(NgControlService, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef));\n  };\n\n  ClrIfError.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: ClrIfError,\n    selectors: [[\"\", \"clrIfError\", \"\"]],\n    inputs: {\n      error: [\"clrIfError\", \"error\"]\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  return ClrIfError;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrIfSuccess = /*#__PURE__*/(() => {\n  class ClrIfSuccess extends AbstractIfState {\n    constructor(ifControlStateService, ngControlService, template, container) {\n      super(ifControlStateService, ngControlService);\n      this.template = template;\n      this.container = container;\n\n      if (!ifControlStateService) {\n        throw new Error('ClrIfSuccess can only be used within a form control container element like clr-input-container');\n      }\n    }\n    /**\n     * @param state CONTROL_STATE\n     */\n\n\n    handleState(state) {\n      const isValid = CONTROL_STATE.VALID === state;\n\n      if (isValid && !this.displayedContent) {\n        this.container.createEmbeddedView(this.template);\n      } else if (!isValid && this.container) {\n        this.container.clear();\n      }\n\n      this.displayedContent = isValid;\n    }\n\n  }\n\n  ClrIfSuccess.ɵfac = function ClrIfSuccess_Factory(t) {\n    return new (t || ClrIfSuccess)(ɵngcc0.ɵɵdirectiveInject(IfControlStateService, 8), ɵngcc0.ɵɵdirectiveInject(NgControlService, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef));\n  };\n\n  ClrIfSuccess.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: ClrIfSuccess,\n    selectors: [[\"\", \"clrIfSuccess\", \"\"]],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  return ClrIfSuccess;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrLayout = /*#__PURE__*/(() => {\n  class ClrLayout {\n    constructor(layoutService) {\n      this.layoutService = layoutService;\n    }\n\n    ngOnInit() {\n      // Only set the layout if it is a valid option\n      if (this.layout && this.layoutService.isValid(this.layout)) {\n        this.layoutService.layout = this.layout;\n      }\n    }\n\n  }\n\n  ClrLayout.ɵfac = function ClrLayout_Factory(t) {\n    return new (t || ClrLayout)(ɵngcc0.ɵɵdirectiveInject(LayoutService));\n  };\n\n  ClrLayout.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: ClrLayout,\n    selectors: [[\"\", \"clrForm\", \"\", \"clrLayout\", \"\"]],\n    inputs: {\n      layout: [\"clrLayout\", \"layout\"]\n    }\n  });\n  return ClrLayout;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrCommonFormsModule = /*#__PURE__*/(() => {\n  class ClrCommonFormsModule {\n    constructor() {\n      ClarityIcons.addIcons(exclamationCircleIcon, checkCircleIcon);\n    }\n\n  }\n\n  ClrCommonFormsModule.ɵfac = function ClrCommonFormsModule_Factory(t) {\n    return new (t || ClrCommonFormsModule)();\n  };\n\n  ClrCommonFormsModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: ClrCommonFormsModule\n  });\n  ClrCommonFormsModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule, ClrIconModule]]\n  });\n  return ClrCommonFormsModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ClrCommonFormsModule, {\n    declarations: function () {\n      return [ClrLabel, ClrControlError, ClrControlSuccess, ClrControlHelper, ClrIfError, ClrIfSuccess, ClrForm, ClrLayout, ClrControlContainer, ClrControl];\n    },\n    imports: function () {\n      return [CommonModule, ClrIconModule];\n    },\n    exports: function () {\n      return [ClrLabel, ClrControlError, ClrControlSuccess, ClrControlHelper, ClrIfError, ClrIfSuccess, ClrForm, ClrLayout, ClrControlContainer, ClrControl];\n    }\n  });\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nconst IS_TOGGLE = new InjectionToken('IS_TOGGLE');\n\nfunction isToggleFactory() {\n  return new BehaviorSubject(false);\n}\n\nconst IS_TOGGLE_PROVIDER = {\n  provide: IS_TOGGLE,\n  useFactory: isToggleFactory\n};\nlet ClrCheckboxWrapper = /*#__PURE__*/(() => {\n  class ClrCheckboxWrapper {\n    constructor(toggleService) {\n      // We need both _dynamic for HostWrapper and ContentChild(ClrLabel) in cases where\n      // the user puts a radio inside a wrapper without a label, host wrapping doesn't apply\n      // but we'd still need to insert a label\n      this._dynamic = false;\n      this.toggle = false;\n      this.subscriptions = [];\n      this.subscriptions.push(toggleService.subscribe(state => {\n        this.toggle = state;\n      }));\n    }\n\n    ngOnInit() {\n      if (this.label) {\n        this.label.disableGrid();\n      }\n    }\n\n    ngOnDestroy() {\n      this.subscriptions.forEach(sub => sub.unsubscribe());\n    }\n\n  }\n\n  ClrCheckboxWrapper.ɵfac = function ClrCheckboxWrapper_Factory(t) {\n    return new (t || ClrCheckboxWrapper)(ɵngcc0.ɵɵdirectiveInject(IS_TOGGLE));\n  };\n\n  ClrCheckboxWrapper.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ClrCheckboxWrapper,\n    selectors: [[\"clr-checkbox-wrapper\"], [\"clr-toggle-wrapper\"]],\n    contentQueries: function ClrCheckboxWrapper_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, ClrLabel, 7);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.label = _t.first);\n      }\n    },\n    hostVars: 4,\n    hostBindings: function ClrCheckboxWrapper_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"clr-checkbox-wrapper\", !ctx.toggle)(\"clr-toggle-wrapper\", ctx.toggle);\n      }\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([ControlIdService, IS_TOGGLE_PROVIDER])],\n    ngContentSelectors: _c10,\n    decls: 3,\n    vars: 1,\n    consts: [[4, \"ngIf\"]],\n    template: function ClrCheckboxWrapper_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c9);\n        ɵngcc0.ɵɵprojection(0);\n        ɵngcc0.ɵɵprojection(1, 1);\n        ɵngcc0.ɵɵtemplate(2, ClrCheckboxWrapper_label_2_Template, 1, 0, \"label\", 0);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.label);\n      }\n    },\n    directives: [ɵngcc1.NgIf, ClrLabel],\n    encapsulation: 2\n  });\n  return ClrCheckboxWrapper;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/**\n * This implements both the clrCheckbox and clrToggle functionality, since they are both just checkboxes with different\n * visual styling. The challenge is that the container needs to know which selector was used, which the @Attribute\n * decorator gets for us to determine if the toggle is used, and emits a value to the wrapper container to tell it\n * there is a toggle switch instead.\n */\n\n\nlet ClrCheckbox = /*#__PURE__*/(() => {\n  class ClrCheckbox extends WrappedFormControl {\n    constructor(vcr, injector, control, renderer, el, toggle) {\n      super(vcr, ClrCheckboxWrapper, injector, control, renderer, el);\n      this.toggle = toggle;\n    }\n\n    ngOnInit() {\n      super.ngOnInit();\n      const toggleService = this.getProviderFromContainer(IS_TOGGLE, null);\n\n      if (toggleService && this.toggle !== null) {\n        toggleService.next(true);\n      }\n    }\n\n  }\n\n  ClrCheckbox.ɵfac = function ClrCheckbox_Factory(t) {\n    return new (t || ClrCheckbox)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.NgControl, 10), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵinjectAttribute('clrToggle'));\n  };\n\n  ClrCheckbox.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: ClrCheckbox,\n    selectors: [[\"\", \"clrCheckbox\", \"\"], [\"\", \"clrToggle\", \"\"]],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  return ClrCheckbox;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrCheckboxContainer = /*#__PURE__*/(() => {\n  class ClrCheckboxContainer extends ClrAbstractContainer {\n    constructor(layoutService, controlClassService, ngControlService, ifControlStateService) {\n      super(ifControlStateService, layoutService, controlClassService, ngControlService);\n      this.layoutService = layoutService;\n      this.controlClassService = controlClassService;\n      this.ngControlService = ngControlService;\n      this.ifControlStateService = ifControlStateService;\n      this.inline = false;\n    }\n    /*\n     * Here we want to support the following cases\n     * clrInline - true by presence\n     * clrInline=\"true|false\" - unless it is explicitly false, strings are considered true\n     * [clrInline]=\"true|false\" - expect a boolean\n     */\n\n\n    set clrInline(value) {\n      if (typeof value === 'string') {\n        this.inline = value === 'false' ? false : true;\n      } else {\n        this.inline = !!value;\n      }\n    }\n\n    get clrInline() {\n      return this.inline;\n    }\n\n    ngAfterContentInit() {\n      this.setAriaRoles();\n    }\n\n    setAriaRoles() {\n      this.role = this.checkboxes.length ? 'group' : null;\n    }\n\n  }\n\n  ClrCheckboxContainer.ɵfac = function ClrCheckboxContainer_Factory(t) {\n    return new (t || ClrCheckboxContainer)(ɵngcc0.ɵɵdirectiveInject(LayoutService, 8), ɵngcc0.ɵɵdirectiveInject(ControlClassService), ɵngcc0.ɵɵdirectiveInject(NgControlService), ɵngcc0.ɵɵdirectiveInject(IfControlStateService));\n  };\n\n  ClrCheckboxContainer.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ClrCheckboxContainer,\n    selectors: [[\"clr-checkbox-container\"], [\"clr-toggle-container\"]],\n    contentQueries: function ClrCheckboxContainer_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, ClrCheckbox, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.checkboxes = _t);\n      }\n    },\n    hostVars: 7,\n    hostBindings: function ClrCheckboxContainer_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"role\", ctx.role);\n        ɵngcc0.ɵɵclassProp(\"clr-form-control\", true)(\"clr-form-control-disabled\", ctx.control == null ? null : ctx.control.disabled)(\"clr-row\", ctx.addGrid());\n      }\n    },\n    inputs: {\n      clrInline: \"clrInline\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([IfControlStateService, NgControlService, ControlClassService, ContainerIdService]), ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c12,\n    decls: 10,\n    vars: 9,\n    consts: [[4, \"ngIf\"], [1, \"clr-control-container\", 3, \"ngClass\"], [1, \"clr-subtext-wrapper\"], [\"class\", \"clr-validate-icon\", \"status\", \"danger\", \"shape\", \"exclamation-circle\", \"aria-hidden\", \"true\", 4, \"ngIf\"], [\"class\", \"clr-validate-icon\", \"status\", \"success\", \"shape\", \"check-circle\", \"aria-hidden\", \"true\", 4, \"ngIf\"], [\"status\", \"danger\", \"shape\", \"exclamation-circle\", \"aria-hidden\", \"true\", 1, \"clr-validate-icon\"], [\"status\", \"success\", \"shape\", \"check-circle\", \"aria-hidden\", \"true\", 1, \"clr-validate-icon\"]],\n    template: function ClrCheckboxContainer_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c11);\n        ɵngcc0.ɵɵprojection(0);\n        ɵngcc0.ɵɵtemplate(1, ClrCheckboxContainer_label_1_Template, 1, 0, \"label\", 0);\n        ɵngcc0.ɵɵelementStart(2, \"div\", 1);\n        ɵngcc0.ɵɵprojection(3, 1);\n        ɵngcc0.ɵɵelementStart(4, \"div\", 2);\n        ɵngcc0.ɵɵtemplate(5, ClrCheckboxContainer_ng_content_5_Template, 1, 0, \"ng-content\", 0);\n        ɵngcc0.ɵɵtemplate(6, ClrCheckboxContainer_cds_icon_6_Template, 1, 0, \"cds-icon\", 3);\n        ɵngcc0.ɵɵtemplate(7, ClrCheckboxContainer_cds_icon_7_Template, 1, 0, \"cds-icon\", 4);\n        ɵngcc0.ɵɵtemplate(8, ClrCheckboxContainer_ng_content_8_Template, 1, 0, \"ng-content\", 0);\n        ɵngcc0.ɵɵtemplate(9, ClrCheckboxContainer_ng_content_9_Template, 1, 0, \"ng-content\", 0);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.label && ctx.addGrid());\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵclassProp(\"clr-control-inline\", ctx.clrInline);\n        ɵngcc0.ɵɵproperty(\"ngClass\", ctx.controlClass());\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showHelper);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showInvalid);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showValid);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showInvalid);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showValid);\n      }\n    },\n    directives: [ɵngcc1.NgIf, ɵngcc1.NgClass, ClrLabel, CdsIconCustomTag],\n    encapsulation: 2\n  });\n  return ClrCheckboxContainer;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrCheckboxModule = /*#__PURE__*/(() => {\n  class ClrCheckboxModule {\n    constructor() {\n      ClarityIcons.addIcons(exclamationCircleIcon, checkCircleIcon);\n    }\n\n  }\n\n  ClrCheckboxModule.ɵfac = function ClrCheckboxModule_Factory(t) {\n    return new (t || ClrCheckboxModule)();\n  };\n\n  ClrCheckboxModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: ClrCheckboxModule\n  });\n  ClrCheckboxModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule, ClrIconModule, ClrCommonFormsModule, ClrHostWrappingModule], ClrCommonFormsModule]\n  });\n  return ClrCheckboxModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ClrCheckboxModule, {\n    declarations: function () {\n      return [ClrCheckbox, ClrCheckboxContainer, ClrCheckboxWrapper];\n    },\n    imports: function () {\n      return [CommonModule, ClrIconModule, ClrCommonFormsModule, ClrHostWrappingModule];\n    },\n    exports: function () {\n      return [ClrCommonFormsModule, ClrCheckbox, ClrCheckboxContainer, ClrCheckboxWrapper];\n    }\n  });\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nfunction isBooleanAttributeSet(value) {\n  // for null just return false no need to check anything\n  if (value === null) {\n    return false;\n  }\n\n  if (typeof value === 'string') {\n    // Empty string is valid, 'true' as string is also valid\n    return value.length >= 0;\n  } // Boolean value will be read as it is, everything else is false\n\n\n  return typeof value === 'boolean' ? value : false;\n}\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrSpinner = /*#__PURE__*/(() => {\n  class ClrSpinner {\n    /**\n     * Default class for all spinners. This class is always true\n     */\n    get spinnerClass() {\n      return true;\n    }\n\n    get inlineClass() {\n      return this._inline;\n    }\n\n    set clrInline(value) {\n      this._inline = isBooleanAttributeSet(value);\n    }\n\n    get inverseClass() {\n      return this._inverse;\n    }\n\n    set clrInverse(value) {\n      this._inverse = isBooleanAttributeSet(value);\n    }\n\n    get smallClass() {\n      return this._small;\n    }\n\n    set clrSmall(value) {\n      this._small = isBooleanAttributeSet(value);\n    }\n\n    get mediumClass() {\n      if (this._small) {\n        return false;\n      }\n\n      return this._medium;\n    }\n\n    set clrMedium(value) {\n      this._medium = isBooleanAttributeSet(value);\n    }\n\n  }\n\n  ClrSpinner.ɵfac = function ClrSpinner_Factory(t) {\n    return new (t || ClrSpinner)();\n  };\n\n  ClrSpinner.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ClrSpinner,\n    selectors: [[\"clr-spinner\"]],\n    hostVars: 11,\n    hostBindings: function ClrSpinner_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-busy\", true);\n        ɵngcc0.ɵɵclassProp(\"spinner\", ctx.spinnerClass)(\"spinner-inline\", ctx.inlineClass)(\"spinner-inverse\", ctx.inverseClass)(\"spinner-sm\", ctx.smallClass)(\"spinner-md\", ctx.mediumClass);\n      }\n    },\n    inputs: {\n      clrInline: \"clrInline\",\n      clrInverse: \"clrInverse\",\n      clrSmall: \"clrSmall\",\n      clrMedium: \"clrMedium\"\n    },\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function ClrSpinner_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2\n  });\n  return ClrSpinner;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nconst CLR_SPINNER_DIRECTIVES = [ClrSpinner];\nlet ClrSpinnerModule = /*#__PURE__*/(() => {\n  class ClrSpinnerModule {}\n\n  ClrSpinnerModule.ɵfac = function ClrSpinnerModule_Factory(t) {\n    return new (t || ClrSpinnerModule)();\n  };\n\n  ClrSpinnerModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: ClrSpinnerModule\n  });\n  ClrSpinnerModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule]]\n  });\n  return ClrSpinnerModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ClrSpinnerModule, {\n    declarations: function () {\n      return [ClrSpinner];\n    },\n    imports: function () {\n      return [CommonModule];\n    },\n    exports: function () {\n      return [ClrSpinner];\n    }\n  });\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet activeCounter = 0;\nconst IF_ACTIVE_ID = new InjectionToken('IF_ACTIVE_ID');\n\nfunction tokenFactory$1() {\n  return ++activeCounter;\n}\n\nconst IF_ACTIVE_ID_PROVIDER = {\n  provide: IF_ACTIVE_ID,\n  useFactory: tokenFactory$1\n};\n/*********\n * @class IfActiveService\n *\n * @description\n * An injectable service used by IfActive structural directives and the components that implement IfActive in their\n * templates. It holds the value of the current state and provides an Observable that both the directive and the\n * implementing component can subscribe to in order to take action on current value changes.\n *\n */\n\nlet IfActiveService = /*#__PURE__*/(() => {\n  class IfActiveService {\n    constructor() {\n      /********\n       * @property _currentChange\n       *\n       * @description\n       * A RXJS Subject that updates and provides subscriptions to for the current current state of a component template\n       * implemting the IfActive structural directive.\n       *\n       */\n      this._currentChange = new Subject();\n    }\n    /*********\n     *\n     * @description\n     * A getter function that provides an observable for the _current Subject.\n     *\n     */\n\n\n    get currentChange() {\n      return this._currentChange.asObservable();\n    }\n    /*********\n     *\n     * @description\n     * A setter function that updates the current state of _current for this instance of IfActive structural directive.\n     * And, broadcasts the new value to all subscribers.\n     *\n     * @param value\n     */\n\n\n    set current(value) {\n      if (this._current !== value) {\n        this._current = value;\n\n        this._currentChange.next(value);\n      }\n    }\n    /*********\n     *\n     * @description\n     * A getter that returns the current value of this IfActive instance.\n     * @returns\n     */\n\n\n    get current() {\n      return this._current;\n    }\n\n  }\n\n  IfActiveService.ɵfac = function IfActiveService_Factory(t) {\n    return new (t || IfActiveService)();\n  };\n\n  IfActiveService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: IfActiveService,\n    factory: IfActiveService.ɵfac\n  });\n  return IfActiveService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/**********\n *\n * @class ClrIfActive\n *\n * @description\n * A structural directive that controls whether or not the associated TemplateRef is instantiated or not.\n * It makes use of a Component instance level service: IfActiveService to maintain state between itself and\n * the component using it in the component template.\n *\n */\n\n\nlet ClrIfActive = /*#__PURE__*/(() => {\n  class ClrIfActive {\n    constructor(ifActiveService, id, template, container) {\n      this.ifActiveService = ifActiveService;\n      this.id = id;\n      this.template = template;\n      this.container = container;\n      this.wasActive = false;\n      /**********\n       * @property activeChange\n       *\n       * @description\n       * An event emitter that emits when the active property is set to allow for 2way binding when the directive is\n       * used with de-structured / de-sugared syntax.\n       *\n       */\n\n      this.activeChange = new EventEmitter(false);\n      this.checkAndUpdateView(ifActiveService.current);\n      this.subscription = this.ifActiveService.currentChange.subscribe(newCurrentId => {\n        this.checkAndUpdateView(newCurrentId);\n      });\n    }\n\n    checkAndUpdateView(currentId) {\n      const isNowActive = currentId === this.id; // only emit if the new active state is changed since last time.\n\n      if (isNowActive !== this.wasActive) {\n        this.updateView(isNowActive);\n        this.activeChange.emit(isNowActive);\n        this.wasActive = isNowActive;\n      }\n    }\n    /*********\n     *\n     * @description\n     * A setter that updates IfActiveService.active with value.\n     *\n     * @param value\n     */\n\n\n    set active(value) {\n      if (value) {\n        this.ifActiveService.current = this.id;\n      }\n    }\n    /********\n     *\n     * @description\n     * A getter that returns the current IfActiveService.active value.\n     */\n\n\n    get active() {\n      return this.ifActiveService.current === this.id;\n    }\n    /*********\n     *\n     * @description\n     * Function that takes a any value and either created an embedded view for the associated ViewContainerRef or,\n     * Clears all views from the ViewContainerRef\n     * @param value\n     */\n\n\n    updateView(value) {\n      if (value) {\n        this.container.createEmbeddedView(this.template);\n      } else {\n        this.container.clear();\n      }\n    }\n\n    ngOnDestroy() {\n      this.subscription.unsubscribe();\n    }\n\n  }\n\n  ClrIfActive.ɵfac = function ClrIfActive_Factory(t) {\n    return new (t || ClrIfActive)(ɵngcc0.ɵɵdirectiveInject(IfActiveService), ɵngcc0.ɵɵdirectiveInject(IF_ACTIVE_ID), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef));\n  };\n\n  ClrIfActive.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: ClrIfActive,\n    selectors: [[\"\", \"clrIfActive\", \"\"]],\n    inputs: {\n      active: [\"clrIfActive\", \"active\"]\n    },\n    outputs: {\n      activeChange: \"clrIfActiveChange\"\n    }\n  });\n  return ClrIfActive;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrIfExpanded = /*#__PURE__*/(() => {\n  class ClrIfExpanded {\n    constructor(template, container, el, renderer, expand) {\n      this.template = template;\n      this.container = container;\n      this.el = el;\n      this.renderer = renderer;\n      this.expand = expand;\n      this._expanded = false;\n      this.expandedChange = new EventEmitter(true);\n      /**\n       * Subscriptions to all the services and queries changes\n       */\n\n      this._subscriptions = [];\n\n      this._subscriptions.push(expand.expandChange.subscribe(() => {\n        this.updateView();\n        this.expandedChange.emit(this.expand.expanded);\n      }));\n    }\n\n    get expanded() {\n      return this._expanded;\n    }\n\n    set expanded(value) {\n      if (typeof value === 'boolean') {\n        this.expand.expanded = value;\n        this._expanded = value;\n      }\n    }\n\n    updateView() {\n      if (this.expand.expanded && this.container.length !== 0) {\n        return;\n      }\n\n      if (this.template) {\n        if (this.expand.expanded) {\n          // Should we pass a context? I don't see anything useful to pass right now,\n          // but we can come back to it in the future as a solution for additional features.\n          this.container.createEmbeddedView(this.template);\n        } else {\n          // TODO: Move when we move the animation logic to Datagrid Row Expand\n          // We clear before the animation is over. Not ideal, but doing better would involve a much heavier\n          // process for very little gain. Once Angular animations are dynamic enough, we should be able to\n          // get the optimal behavior.\n          this.container.clear();\n        }\n      } else {\n        try {\n          // If we don't have a template ref, we fallback to a crude display: none for now.\n          if (this.expand.expanded) {\n            this.renderer.setStyle(this.el.nativeElement, 'display', null);\n          } else {\n            this.renderer.setStyle(this.el.nativeElement, 'display', 'none');\n          }\n        } catch (e) {// We catch the case where clrIfExpanded was put on a non-DOM element, and we just do nothing\n        }\n      }\n    }\n\n    ngOnInit() {\n      this.expand.expandable++;\n      this.updateView();\n    }\n\n    ngOnDestroy() {\n      this.expand.expandable--;\n\n      this._subscriptions.forEach(sub => sub.unsubscribe());\n    }\n\n  }\n\n  ClrIfExpanded.ɵfac = function ClrIfExpanded_Factory(t) {\n    return new (t || ClrIfExpanded)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(IfExpandService));\n  };\n\n  ClrIfExpanded.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: ClrIfExpanded,\n    selectors: [[\"\", \"clrIfExpanded\", \"\"]],\n    inputs: {\n      expanded: [\"clrIfExpanded\", \"expanded\"]\n    },\n    outputs: {\n      expandedChange: \"clrIfExpandedChange\"\n    }\n  });\n  return ClrIfExpanded;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/**********\n *\n * @class ClrIfOpen\n *\n * @description\n * A structural directive that controls whether or not the associated TemplateRef is instantiated or not.\n * It makes use of a Component instance level service: ClrPopoverToggleService to maintain state between itself and the component\n * using it in the component template.\n *\n */\n\n\nlet ClrIfOpen = /*#__PURE__*/(() => {\n  class ClrIfOpen {\n    constructor(toggleService, template, container) {\n      this.toggleService = toggleService;\n      this.template = template;\n      this.container = container;\n      /**********\n       * @property openChange\n       *\n       * @description\n       * An event emitter that emits when the open property is set to allow for 2way binding when the directive is\n       * used with de-structured / de-sugared syntax.\n       */\n\n      this.openChange = new EventEmitter(false);\n      this.subscription = this.toggleService.openChange.subscribe(change => {\n        this.updateView(change);\n        this.openChange.emit(change);\n      });\n    }\n    /*********\n     *\n     * @description\n     * A setter that updates ClrPopoverToggleService.open with value.\n     *\n     * @param value\n     */\n\n\n    set open(value) {\n      this.toggleService.open = value;\n    }\n    /********\n     *\n     * @description\n     * A getter that returns the current ClrPopoverToggleService.open value.\n     *\n     */\n\n\n    get open() {\n      return this.toggleService.open;\n    }\n    /*********\n     *\n     * @description\n     * Function that takes a boolean value and either created an embedded view for the associated ViewContainerRef or,\n     * Clears all views from the ViewContainerRef\n     * @param value\n     */\n\n\n    updateView(value) {\n      if (value) {\n        this.container.createEmbeddedView(this.template);\n      } else {\n        this.container.clear();\n      }\n    }\n\n    ngOnDestroy() {\n      this.subscription.unsubscribe();\n    }\n\n  }\n\n  ClrIfOpen.ɵfac = function ClrIfOpen_Factory(t) {\n    return new (t || ClrIfOpen)(ɵngcc0.ɵɵdirectiveInject(ClrPopoverToggleService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef));\n  };\n\n  ClrIfOpen.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: ClrIfOpen,\n    selectors: [[\"\", \"clrIfOpen\", \"\"]],\n    inputs: {\n      open: [\"clrIfOpen\", \"open\"]\n    },\n    outputs: {\n      openChange: \"clrIfOpenChange\"\n    }\n  });\n  return ClrIfOpen;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nconst CONDITIONAL_DIRECTIVES = [ClrIfActive, ClrIfOpen, ClrIfExpanded];\nlet ClrConditionalModule = /*#__PURE__*/(() => {\n  class ClrConditionalModule {}\n\n  ClrConditionalModule.ɵfac = function ClrConditionalModule_Factory(t) {\n    return new (t || ClrConditionalModule)();\n  };\n\n  ClrConditionalModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: ClrConditionalModule\n  });\n  ClrConditionalModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule]]\n  });\n  return ClrConditionalModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ClrConditionalModule, {\n    declarations: function () {\n      return [ClrIfActive, ClrIfOpen, ClrIfExpanded];\n    },\n    imports: function () {\n      return [CommonModule];\n    },\n    exports: function () {\n      return [ClrIfActive, ClrIfOpen, ClrIfExpanded];\n    }\n  });\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nvar ClrFocusDirection = /*#__PURE__*/(() => {\n  (function (ClrFocusDirection) {\n    ClrFocusDirection[\"VERTICAL\"] = \"vertical\";\n    ClrFocusDirection[\"HORIZONTAL\"] = \"horizontal\";\n    ClrFocusDirection[\"BOTH\"] = \"both\";\n  })(ClrFocusDirection || (ClrFocusDirection = {}));\n\n  return ClrFocusDirection;\n})();\n\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nlet ClrKeyFocusItem = /*#__PURE__*/(() => {\n  class ClrKeyFocusItem {\n    constructor(elementRef, platformId) {\n      this.elementRef = elementRef;\n      this.platformId = platformId;\n    }\n\n    get nativeElement() {\n      return this.elementRef.nativeElement;\n    }\n\n    focus() {\n      if (isPlatformBrowser(this.platformId)) {\n        this.elementRef.nativeElement.focus();\n      }\n    }\n\n  }\n\n  ClrKeyFocusItem.ɵfac = function ClrKeyFocusItem_Factory(t) {\n    return new (t || ClrKeyFocusItem)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID));\n  };\n\n  ClrKeyFocusItem.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: ClrKeyFocusItem,\n    selectors: [[\"\", \"clrKeyFocusItem\", \"\"]]\n  });\n  return ClrKeyFocusItem;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrKeyFocus = /*#__PURE__*/(() => {\n  class ClrKeyFocus {\n    constructor(elementRef) {\n      this.elementRef = elementRef;\n      this.direction = ClrFocusDirection.VERTICAL;\n      this.focusOnLoad = false;\n      this.focusChange = new EventEmitter();\n      this._current = 0;\n      this.subscriptions = [];\n    }\n\n    set focusableItems(elements) {\n      // We accept a list of focusable elements (HTMLElements or existing Directives) or auto query for clrKeyFocusItem\n      // We accept a list reference in the cases where we cannot use ContentChildren to query\n      // ContentChildren can be unavailable if content is projected outside the scope of the component (see tabs).\n      if (Array.isArray(elements) && elements.length) {\n        this._focusableItems = elements;\n        this.initializeFocus();\n      }\n    }\n\n    get focusableItems() {\n      if (this._focusableItems) {\n        return this._focusableItems;\n      } else if (this.clrKeyFocusItems) {\n        return this.clrKeyFocusItems.toArray();\n      }\n\n      return [];\n    }\n\n    get nativeElement() {\n      return this.elementRef.nativeElement;\n    }\n\n    get current() {\n      return this._current;\n    }\n\n    set current(value) {\n      if (this._current !== value) {\n        this._current = value;\n      }\n    }\n\n    get currentItem() {\n      return this.focusableItems[this._current];\n    }\n\n    get currentItemElement() {\n      return this.currentItem.nativeElement ? this.currentItem.nativeElement : this.currentItem;\n    }\n\n    focusCurrent() {\n      this.currentItem.focus();\n      this.focusChange.next(this._current);\n    }\n\n    moveTo(position) {\n      if (this.positionInRange(position)) {\n        this.current = position;\n        this.focusCurrent();\n      }\n    }\n\n    ngAfterContentInit() {\n      this.subscriptions.push(this.listenForItemUpdates());\n      this.initializeFocus();\n    }\n\n    ngOnDestroy() {\n      this.subscriptions.forEach(s => s.unsubscribe());\n    }\n\n    handleKeyboardEvent(event) {\n      // Make sure event was originated on the current item's element\n      if (this.currentItemElement !== event.target) {\n        const position = this.getItemPosition(event.target);\n\n        if (this.positionInRange(position)) {\n          this.current = position;\n        }\n      }\n\n      if (this.prevKeyPressed(event) && this.currentFocusIsNotFirstItem()) {\n        this.moveTo(this.current - 1);\n      } else if (this.nextKeyPressed(event) && this.currentFocusIsNotLastItem()) {\n        this.moveTo(this.current + 1);\n      } else if (event.code === KeyCodes.Home) {\n        this.moveTo(0);\n      } else if (event.code === KeyCodes.End) {\n        this.moveTo(this.focusableItems.length - 1);\n      }\n\n      preventArrowKeyScroll(event);\n    }\n\n    setClickedItemCurrent(event) {\n      const position = this.getItemPosition(event.target);\n\n      if (position > -1) {\n        this.moveTo(position);\n      }\n    }\n\n    getItemPosition(item) {\n      if (this._focusableItems) {\n        return this.focusableItems.indexOf(item);\n      } else {\n        return this.focusableItems.map(_item => _item.nativeElement).indexOf(item);\n      }\n    }\n\n    positionInRange(position) {\n      return position >= 0 && position < this.focusableItems.length;\n    }\n\n    currentFocusIsNotFirstItem() {\n      return this._current - 1 >= 0;\n    }\n\n    currentFocusIsNotLastItem() {\n      return this._current + 1 < this.focusableItems.length;\n    }\n\n    initializeFocus() {\n      if (this.focusableItems && this.focusableItems.length) {\n        // It is possible that the focus was on an element, whose index is no longer available.\n        // This can happen when some of the focusable elements are being removed.\n        // In such cases, the new focus is initialized on the last focusable element.\n        if (this._current >= this.focusableItems.length) {\n          this._current = this.focusableItems.length - 1;\n        }\n\n        if (this.focusOnLoad) {\n          this.currentItem.focus();\n          this.focusChange.next();\n        }\n      }\n    }\n\n    listenForItemUpdates() {\n      return this.clrKeyFocusItems.changes.subscribe(() => {\n        this.initializeFocus();\n      });\n    }\n\n    nextKeyPressed(event) {\n      const key = keyValidator(event.key);\n\n      switch (this.direction) {\n        case ClrFocusDirection.VERTICAL:\n          return key === KeyCodes.ArrowDown;\n\n        case ClrFocusDirection.HORIZONTAL:\n          return key === KeyCodes.ArrowRight;\n\n        case ClrFocusDirection.BOTH:\n          return key === KeyCodes.ArrowDown || key === KeyCodes.ArrowRight;\n\n        default:\n          return false;\n      }\n    }\n\n    prevKeyPressed(event) {\n      const key = keyValidator(event.key);\n\n      switch (this.direction) {\n        case ClrFocusDirection.VERTICAL:\n          return key === KeyCodes.ArrowUp;\n\n        case ClrFocusDirection.HORIZONTAL:\n          return key === KeyCodes.ArrowLeft;\n\n        case ClrFocusDirection.BOTH:\n          return key === KeyCodes.ArrowUp || key === KeyCodes.ArrowLeft;\n\n        default:\n          return false;\n      }\n    }\n\n  }\n\n  ClrKeyFocus.ɵfac = function ClrKeyFocus_Factory(t) {\n    return new (t || ClrKeyFocus)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  ClrKeyFocus.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ClrKeyFocus,\n    selectors: [[\"\", \"clrKeyFocus\", \"\"]],\n    contentQueries: function ClrKeyFocus_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, ClrKeyFocusItem, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.clrKeyFocusItems = _t);\n      }\n    },\n    hostBindings: function ClrKeyFocus_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"keydown\", function ClrKeyFocus_keydown_HostBindingHandler($event) {\n          return ctx.handleKeyboardEvent($event);\n        })(\"click\", function ClrKeyFocus_click_HostBindingHandler($event) {\n          return ctx.setClickedItemCurrent($event);\n        });\n      }\n    },\n    inputs: {\n      direction: [\"clrDirection\", \"direction\"],\n      focusOnLoad: [\"clrFocusOnLoad\", \"focusOnLoad\"],\n      focusableItems: [\"clrKeyFocus\", \"focusableItems\"]\n    },\n    outputs: {\n      focusChange: \"clrFocusChange\"\n    },\n    attrs: _c13,\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function ClrKeyFocus_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2\n  });\n  return ClrKeyFocus;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrRovingTabindex = /*#__PURE__*/(() => {\n  class ClrRovingTabindex extends ClrKeyFocus {\n    constructor(elementRef, renderer) {\n      super(elementRef);\n      this.renderer = renderer;\n      this.disabled = false;\n    } // Proxy the input, as the selector name from parent class will still be \"clrKeyFocus\".\n\n\n    set rovingIndexItems(elements) {\n      this.focusableItems = elements;\n    }\n\n    get rovingIndexItems() {\n      return this.focusableItems;\n    }\n\n    set rovingTabindexDisabled(disabled) {\n      this.disabled = disabled;\n\n      if (this.currentItem) {\n        this.setTabindex(this.currentItem, disabled ? -1 : 0);\n      }\n    }\n\n    handleKeyboardEvent(event) {\n      if (this.prevKeyPressed(event) && this.currentFocusIsNotFirstItem()) {\n        this.updateTabindex(this.current - 1);\n      } else if (this.nextKeyPressed(event) && this.currentFocusIsNotLastItem()) {\n        this.updateTabindex(this.current + 1);\n      } else if (event.code === KeyCodes.Home) {\n        this.updateTabindex(0);\n      } else if (event.code === KeyCodes.End) {\n        this.updateTabindex(this.focusableItems.length - 1);\n      }\n\n      super.handleKeyboardEvent(event);\n    }\n\n    setClickedItemCurrent(event) {\n      let position;\n\n      if (this.focusableItems[0].nativeElement) {\n        position = this.focusableItems.map(item => item.nativeElement).indexOf(event.target);\n      } else {\n        position = this.focusableItems.indexOf(event.target);\n      }\n\n      if (position > -1) {\n        this.updateTabindex(position);\n      }\n\n      super.setClickedItemCurrent(event);\n    }\n\n    initializeFocus() {\n      if (this.focusableItems && this.focusableItems.length) {\n        this.focusableItems.forEach(item => {\n          this.setTabindex(item, -1);\n        }); // It is possible that the focus was on an element, whose index is no longer available.\n        // This can happen when some of the focusable elements are being removed.\n        // In such cases, the new focus is initialized on the last focusable element.\n\n        if (this.current >= this.focusableItems.length) {\n          this.current = this.focusableItems.length - 1;\n        }\n\n        if (!this.disabled && this.currentItem) {\n          this.setTabindex(this.currentItem, 0);\n        }\n      }\n\n      super.initializeFocus();\n    }\n\n    updateTabindex(newIndex) {\n      this.setTabindex(this.currentItem, -1);\n      this.setTabindex(this.focusableItems[newIndex], 0);\n    }\n\n    setTabindex(item, value) {\n      if (item instanceof HTMLElement) {\n        this.renderer.setAttribute(item, 'tabindex', value.toString());\n      } else {\n        this.renderer.setAttribute(item.nativeElement, 'tabindex', value.toString());\n      }\n    }\n\n  }\n\n  ClrRovingTabindex.ɵfac = function ClrRovingTabindex_Factory(t) {\n    return new (t || ClrRovingTabindex)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2));\n  };\n\n  ClrRovingTabindex.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ClrRovingTabindex,\n    selectors: [[\"\", \"clrRovingTabindex\", \"\"]],\n    inputs: {\n      rovingIndexItems: [\"clrRovingTabindex\", \"rovingIndexItems\"],\n      rovingTabindexDisabled: [\"clrRovingTabindexDisabled\", \"rovingTabindexDisabled\"]\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    attrs: _c14,\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function ClrRovingTabindex_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2\n  });\n  return ClrRovingTabindex;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nconst KEY_FOCUS_DIRECTIVES = [ClrKeyFocus, ClrRovingTabindex, ClrKeyFocusItem];\nlet ClrKeyFocusModule = /*#__PURE__*/(() => {\n  class ClrKeyFocusModule {}\n\n  ClrKeyFocusModule.ɵfac = function ClrKeyFocusModule_Factory(t) {\n    return new (t || ClrKeyFocusModule)();\n  };\n\n  ClrKeyFocusModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: ClrKeyFocusModule\n  });\n  ClrKeyFocusModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule]]\n  });\n  return ClrKeyFocusModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ClrKeyFocusModule, {\n    declarations: function () {\n      return [ClrKeyFocus, ClrRovingTabindex, ClrKeyFocusItem];\n    },\n    imports: function () {\n      return [CommonModule];\n    },\n    exports: function () {\n      return [ClrKeyFocus, ClrRovingTabindex, ClrKeyFocusItem];\n    }\n  });\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nconst POPOVER_HOST_ANCHOR = new InjectionToken('POPOVER_HOST_ANCHOR');\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n// TODO: if we find more components that could use this, consider moving this to utils\n\nlet AriaService = /*#__PURE__*/(() => {\n  class AriaService {}\n\n  AriaService.ɵfac = function AriaService_Factory(t) {\n    return new (t || AriaService)();\n  };\n\n  AriaService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: AriaService,\n    factory: AriaService.ɵfac\n  });\n  return AriaService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nvar ArrowKeyDirection = /*#__PURE__*/(() => {\n  (function (ArrowKeyDirection) {\n    ArrowKeyDirection[\"UP\"] = \"up\";\n    ArrowKeyDirection[\"DOWN\"] = \"down\";\n    ArrowKeyDirection[\"LEFT\"] = \"left\";\n    ArrowKeyDirection[\"RIGHT\"] = \"right\";\n  })(ArrowKeyDirection || (ArrowKeyDirection = {}));\n\n  return ArrowKeyDirection;\n})();\n\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nlet FocusService$1 = /*#__PURE__*/(() => {\n  class FocusService$1 {\n    constructor(renderer) {\n      this.renderer = renderer;\n      this._unlistenFuncs = [];\n    }\n\n    get current() {\n      return this._current;\n    }\n\n    reset(first) {\n      this._current = first;\n    }\n\n    listenToArrowKeys(el) {\n      // The following listeners return false when there was an action to take for the key pressed,\n      // in order to prevent the default behavior of that key.\n      this._unlistenFuncs.push(this.renderer.listen(el, 'keydown.arrowup', () => !this.move(ArrowKeyDirection.UP)));\n\n      this._unlistenFuncs.push(this.renderer.listen(el, 'keydown.arrowdown', () => !this.move(ArrowKeyDirection.DOWN)));\n\n      this._unlistenFuncs.push(this.renderer.listen(el, 'keydown.arrowleft', () => !this.move(ArrowKeyDirection.LEFT)));\n\n      this._unlistenFuncs.push(this.renderer.listen(el, 'keydown.arrowright', () => !this.move(ArrowKeyDirection.RIGHT)));\n    }\n\n    registerContainer(el) {\n      this.renderer.setAttribute(el, 'tabindex', '0');\n      this.listenToArrowKeys(el); // The following listeners return false when there was an action to take for the key pressed,\n      // in order to prevent the default behavior of that key.\n\n      this._unlistenFuncs.push(this.renderer.listen(el, 'keydown.space', () => !this.activateCurrent()));\n\n      this._unlistenFuncs.push(this.renderer.listen(el, 'keydown.enter', () => !this.activateCurrent()));\n    }\n\n    moveTo(item) {\n      /**\n       * Make sure that item is not undefined,\n       * This is safety net in the case that someone sometime decide to\n       * call this method without having FocusableItem.\n       */\n      if (item === undefined) {\n        return;\n      }\n\n      if (this.current) {\n        this.current.blur();\n      }\n\n      item.focus();\n      this._current = item;\n    }\n\n    move(direction) {\n      let moved = false;\n\n      if (this.current) {\n        const next = this.current[direction];\n\n        if (next) {\n          // Turning the value into an Observable isn't great, but it's the fastest way to avoid code duplication.\n          // If performance ever matters for this, we can refactor using additional private methods.\n          const nextObs = isObservable(next) ? next : of(next);\n          nextObs.subscribe(item => {\n            if (item) {\n              this.moveTo(item);\n              moved = true;\n            }\n          });\n        }\n      }\n\n      return moved;\n    }\n\n    activateCurrent() {\n      if (this.current && this.current.activate) {\n        this.current.activate();\n        return true;\n      }\n\n      return false;\n    }\n\n    detachListeners() {\n      this._unlistenFuncs.forEach(unlisten => unlisten());\n    }\n\n  }\n\n  FocusService$1.ɵfac = function FocusService$1_Factory(t) {\n    return new (t || FocusService$1)(ɵngcc0.ɵɵinject(ɵngcc0.Renderer2));\n  };\n\n  FocusService$1.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: FocusService$1,\n    factory: FocusService$1.ɵfac\n  });\n  return FocusService$1;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nfunction clrFocusServiceFactory(existing, renderer) {\n  return existing || new FocusService$1(renderer);\n}\n\nconst FOCUS_SERVICE_PROVIDER = {\n  provide: FocusService$1,\n  useFactory: clrFocusServiceFactory,\n  deps: [[new Optional(), new SkipSelf(), FocusService$1], Renderer2]\n};\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nconst UP_ARROW = 38;\nconst DOWN_ARROW = 40;\nconst RIGHT_ARROW = 39;\nconst LEFT_ARROW = 37;\nconst ENTER = 13;\nconst SPACE = 32;\nconst SHIFT = 16;\nconst TAB = 9;\nconst ESC = 27;\nconst BACKSPACE = 8;\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nlet ComboboxContainerService = /*#__PURE__*/(() => {\n  class ComboboxContainerService {\n    constructor() {\n      this.labelOffset = 0;\n    }\n\n  }\n\n  ComboboxContainerService.ɵfac = function ComboboxContainerService_Factory(t) {\n    return new (t || ComboboxContainerService)();\n  };\n\n  ComboboxContainerService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: ComboboxContainerService,\n    factory: ComboboxContainerService.ɵfac\n  });\n  return ComboboxContainerService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrComboboxContainer = /*#__PURE__*/(() => {\n  class ClrComboboxContainer extends ClrAbstractContainer {\n    constructor(ifControlStateService, layoutService, controlClassService, ngControlService, containerService, el) {\n      super(ifControlStateService, layoutService, controlClassService, ngControlService);\n      this.containerService = containerService;\n      this.el = el;\n    }\n\n    ngAfterContentInit() {\n      if (this.label) {\n        this.containerService.labelText = this.label.labelText;\n      }\n    }\n\n    ngAfterViewInit() {\n      this.containerService.labelOffset = this.controlContainer.nativeElement.offsetHeight - this.el.nativeElement.offsetHeight;\n    }\n\n  }\n\n  ClrComboboxContainer.ɵfac = function ClrComboboxContainer_Factory(t) {\n    return new (t || ClrComboboxContainer)(ɵngcc0.ɵɵdirectiveInject(IfControlStateService), ɵngcc0.ɵɵdirectiveInject(LayoutService, 8), ɵngcc0.ɵɵdirectiveInject(ControlClassService), ɵngcc0.ɵɵdirectiveInject(NgControlService), ɵngcc0.ɵɵdirectiveInject(ComboboxContainerService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  ClrComboboxContainer.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ClrComboboxContainer,\n    selectors: [[\"clr-combobox-container\"]],\n    contentQueries: function ClrComboboxContainer_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, ClrLabel, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.label = _t.first);\n      }\n    },\n    viewQuery: function ClrComboboxContainer_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c15, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.controlContainer = _t.first);\n      }\n    },\n    hostVars: 8,\n    hostBindings: function ClrComboboxContainer_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"clr-form-control\", true)(\"clr-combobox-form-control\", true)(\"clr-form-control-disabled\", ctx.control == null ? null : ctx.control.disabled)(\"clr-row\", ctx.addGrid());\n      }\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([IfControlStateService, NgControlService, ControlIdService, ControlClassService, ComboboxContainerService]), ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c17,\n    decls: 10,\n    vars: 7,\n    consts: [[4, \"ngIf\"], [1, \"clr-control-container\", 3, \"ngClass\"], [\"controlContainer\", \"\"], [\"class\", \"clr-validate-icon\", \"status\", \"danger\", \"shape\", \"exclamation-circle\", \"aria-hidden\", \"true\", 4, \"ngIf\"], [\"class\", \"clr-validate-icon\", \"status\", \"success\", \"shape\", \"check-circle\", \"aria-hidden\", \"true\", 4, \"ngIf\"], [\"status\", \"danger\", \"shape\", \"exclamation-circle\", \"aria-hidden\", \"true\", 1, \"clr-validate-icon\"], [\"status\", \"success\", \"shape\", \"check-circle\", \"aria-hidden\", \"true\", 1, \"clr-validate-icon\"]],\n    template: function ClrComboboxContainer_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c16);\n        ɵngcc0.ɵɵprojection(0);\n        ɵngcc0.ɵɵtemplate(1, ClrComboboxContainer_label_1_Template, 1, 0, \"label\", 0);\n        ɵngcc0.ɵɵelementStart(2, \"div\", 1, 2);\n        ɵngcc0.ɵɵprojection(4, 1);\n        ɵngcc0.ɵɵtemplate(5, ClrComboboxContainer_cds_icon_5_Template, 1, 0, \"cds-icon\", 3);\n        ɵngcc0.ɵɵtemplate(6, ClrComboboxContainer_cds_icon_6_Template, 1, 0, \"cds-icon\", 4);\n        ɵngcc0.ɵɵtemplate(7, ClrComboboxContainer_ng_content_7_Template, 1, 0, \"ng-content\", 0);\n        ɵngcc0.ɵɵtemplate(8, ClrComboboxContainer_ng_content_8_Template, 1, 0, \"ng-content\", 0);\n        ɵngcc0.ɵɵtemplate(9, ClrComboboxContainer_ng_content_9_Template, 1, 0, \"ng-content\", 0);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.label && ctx.addGrid());\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngClass\", ctx.controlClass());\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showInvalid);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showValid);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showHelper);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showInvalid);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showValid);\n      }\n    },\n    directives: [ɵngcc1.NgIf, ɵngcc1.NgClass, ClrLabel, CdsIconCustomTag],\n    encapsulation: 2\n  });\n  return ClrComboboxContainer;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nclass MultiSelectComboboxModel {\n  containsItem(item) {\n    return this.model ? this.model.includes(item) : false;\n  }\n\n  select(item) {\n    this.addItem(item);\n  }\n\n  unselect(item) {\n    this.removeItem(item);\n  }\n\n  isEmpty() {\n    return !(this.model && this.model.length > 0);\n  }\n\n  pop() {\n    let item;\n\n    if (this.model && this.model.length > 0) {\n      item = this.model[this.model.length - 1];\n      this.removeItem(item);\n    }\n\n    return item;\n  }\n\n  toString(displayField, index = -1) {\n    let displayString = '';\n\n    if (this.model) {\n      // If the model is array, we can use a specific item from it, to retrieve the display value.\n      if (index > -1) {\n        if (this.model[index]) {\n          // If we have a defined display field, we'll use it's value as display value\n          if (displayField && this.model[index][displayField]) {\n            displayString += this.model[index][displayField];\n          } else {\n            // If we don't have a defined display field, we'll use the toString representation of the\n            // item as display value.\n            displayString += this.model[index].toString();\n          }\n        }\n      } else {\n        this.model.forEach(model => {\n          // If we have a defined display field, we'll use it's value as display value\n          if (displayField && model[displayField]) {\n            displayString += model[displayField];\n          } else {\n            // If we don't have a defined display field, we'll use the toString representation of the\n            // model as display value.\n            displayString += model.toString();\n          }\n\n          displayString += ' ';\n        });\n      }\n    }\n\n    return displayString.trim();\n  }\n\n  addItem(item) {\n    if (!this.containsItem(item)) {\n      this.model = this.model || [];\n      this.model.push(item);\n    }\n  }\n\n  removeItem(item) {\n    if (this.model === null || this.model === undefined) {\n      return;\n    }\n\n    const index = this.model.indexOf(item);\n\n    if (index > -1) {\n      this.model.splice(index, 1);\n    } // we intentionally set the model to null for form validation\n\n\n    if (this.model.length === 0) {\n      this.model = null;\n    }\n  }\n\n}\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nclass SingleSelectComboboxModel {\n  containsItem(item) {\n    return this.model === item;\n  }\n\n  select(item) {\n    this.model = item;\n  }\n\n  unselect(item) {\n    if (this.containsItem(item)) {\n      this.model = null;\n    }\n  }\n\n  isEmpty() {\n    return !this.model;\n  }\n\n  pop() {\n    const item = this.model;\n    this.model = null;\n    return item;\n  }\n\n  toString(displayField) {\n    if (!this.model) {\n      return '';\n    }\n\n    if (displayField && this.model[displayField]) {\n      return this.model[displayField];\n    } else {\n      return this.model.toString();\n    }\n  }\n\n}\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrOptionSelected = /*#__PURE__*/(() => {\n  class ClrOptionSelected {\n    constructor(template) {\n      this.template = template;\n    }\n\n  }\n\n  ClrOptionSelected.ɵfac = function ClrOptionSelected_Factory(t) {\n    return new (t || ClrOptionSelected)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef));\n  };\n\n  ClrOptionSelected.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: ClrOptionSelected,\n    selectors: [[\"\", \"clrOptionSelected\", \"\"]],\n    inputs: {\n      selected: [\"clrOptionSelected\", \"selected\"]\n    }\n  });\n  return ClrOptionSelected;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nclass FocusableItem {}\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nfunction customFocusableItemProvider(implementation) {\n  return [UNIQUE_ID_PROVIDER, implementation, {\n    provide: FocusableItem,\n    useExisting: implementation\n  }];\n}\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nclass PseudoFocusModel extends SingleSelectComboboxModel {\n  constructor() {\n    super(...arguments);\n    this._focusChanged = new BehaviorSubject(null);\n  }\n\n  get focusChanged() {\n    return this._focusChanged.asObservable();\n  }\n\n  select(item) {\n    if (this.model !== item) {\n      this.model = item;\n\n      this._focusChanged.next(item);\n    }\n  }\n\n}\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet OptionSelectionService = /*#__PURE__*/(() => {\n  class OptionSelectionService {\n    constructor() {\n      this.loading = false;\n      this._currentInput = '';\n      this._inputChanged = new BehaviorSubject('');\n      this.inputChanged = this._inputChanged.asObservable();\n      this._selectionChanged = new ReplaySubject(1);\n    }\n\n    get currentInput() {\n      return this._currentInput;\n    }\n\n    set currentInput(input) {\n      // clear value in single selection model when input is empty\n      if (input === '' && !this.multiselectable) {\n        this.setSelectionValue(null);\n      }\n\n      this._currentInput = input;\n\n      this._inputChanged.next(input);\n    } // This observable is for notifying the ClrOption to update its\n    // selection by comparing the value\n\n\n    get selectionChanged() {\n      return this._selectionChanged.asObservable();\n    }\n\n    select(item) {\n      if (item === null || item === undefined || this.selectionModel.containsItem(item)) {\n        return;\n      }\n\n      this.selectionModel.select(item);\n\n      this._selectionChanged.next(this.selectionModel);\n    }\n\n    toggle(item) {\n      if (item === null || item === undefined) {\n        return;\n      }\n\n      if (this.selectionModel.containsItem(item)) {\n        this.selectionModel.unselect(item);\n      } else {\n        this.selectionModel.select(item);\n      }\n\n      this._selectionChanged.next(this.selectionModel);\n    }\n\n    unselect(item) {\n      if (item === null || item === undefined || !this.selectionModel.containsItem(item)) {\n        return;\n      }\n\n      this.selectionModel.unselect(item);\n\n      this._selectionChanged.next(this.selectionModel);\n    }\n\n    get multiselectable() {\n      return this.selectionModel instanceof MultiSelectComboboxModel;\n    } // TODO: Add support for trackBy and compareFn\n\n\n    setSelectionValue(value) {\n      // NOTE: Currently we assume that no 2 options will have the same value\n      // but Eudes and I discussed that this is a possibility but we will handle\n      // this later\n      // if selection is undefined, or its value hasn't changed, or changing from null <-> undefined, that's not really changing so we return\n      if (!this.selectionModel || this.selectionModel.model === value || !this.selectionModel.model && !value) {\n        return;\n      }\n\n      this.selectionModel.model = value;\n\n      this._selectionChanged.next(this.selectionModel);\n    }\n\n  }\n\n  OptionSelectionService.ɵfac = function OptionSelectionService_Factory(t) {\n    return new (t || OptionSelectionService)();\n  };\n\n  OptionSelectionService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: OptionSelectionService,\n    factory: OptionSelectionService.ɵfac\n  });\n  return OptionSelectionService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ComboboxFocusHandler = /*#__PURE__*/(() => {\n  class ComboboxFocusHandler {\n    constructor(id, rendererFactory, toggleService, selectionService, platformId) {\n      this.id = id;\n      this.toggleService = toggleService;\n      this.selectionService = selectionService;\n      this.platformId = platformId;\n      this.pseudoFocus = new PseudoFocusModel();\n      this.optionData = [];\n      this.handleFocusSubscription(); // Direct renderer injection can be problematic and leads to failing tests at least\n\n      this.renderer = rendererFactory.createRenderer(null, null);\n    }\n\n    handleFocusSubscription() {\n      this.toggleService.openChange.subscribe(open => {\n        if (!open) {\n          this.pseudoFocus.model = null;\n        }\n      });\n    }\n\n    get trigger() {\n      return this._trigger;\n    }\n\n    set trigger(el) {\n      this._trigger = el;\n      this.addFocusOnBlurListener(el);\n    }\n\n    get listbox() {\n      return this._listbox;\n    }\n\n    set listbox(el) {\n      this._listbox = el;\n      this.addFocusOnBlurListener(el);\n    }\n\n    get textInput() {\n      return this._textInput;\n    }\n\n    set textInput(el) {\n      this._textInput = el;\n      this.renderer.listen(el, 'keydown', event => !this.handleTextInput(event));\n      this.addFocusOnBlurListener(el);\n    }\n\n    moveFocusTo(direction) {\n      let index = this.optionData.findIndex(option => option.equals(this.pseudoFocus.model));\n\n      if (direction === ArrowKeyDirection.UP) {\n        if (index === -1 || index === 0) {\n          index = this.optionData.length - 1;\n        } else {\n          index--;\n        }\n      } else if (direction === ArrowKeyDirection.DOWN) {\n        if (index === -1 || index === this.optionData.length - 1) {\n          index = 0;\n        } else {\n          index++;\n        }\n      }\n\n      this.pseudoFocus.select(this.optionData[index]);\n\n      if (this.pseudoFocus.model && this.pseudoFocus.model.el) {\n        this.pseudoFocus.model.el.scrollIntoView({\n          behavior: 'smooth',\n          block: 'center',\n          inline: 'nearest'\n        });\n      }\n    }\n\n    openAndMoveTo(direction) {\n      if (!this.toggleService.open) {\n        this.toggleService.openChange.pipe(take(1)).subscribe(open => {\n          if (open) {\n            this.moveFocusTo(direction);\n          }\n        });\n        this.toggleService.open = true;\n      } else {\n        this.moveFocusTo(direction);\n      }\n    } // this service is only interested in keys that may move the focus\n\n\n    handleTextInput(event) {\n      let preventDefault = false;\n      const key = keyValidator(event.key);\n\n      if (event) {\n        switch (key) {\n          case KeyCodes.Enter:\n            if (this.toggleService.open && this.pseudoFocus.model) {\n              if (this.selectionService.multiselectable) {\n                this.selectionService.toggle(this.pseudoFocus.model.value);\n              } else {\n                this.selectionService.select(this.pseudoFocus.model.value);\n              }\n\n              preventDefault = true;\n            }\n\n            break;\n\n          case KeyCodes.Space:\n            if (!this.toggleService.open) {\n              this.toggleService.open = true;\n              preventDefault = true;\n            }\n\n            break;\n\n          case KeyCodes.ArrowUp:\n            this.preventViewportScrolling(event);\n            this.openAndMoveTo(ArrowKeyDirection.UP);\n            preventDefault = true;\n            break;\n\n          case KeyCodes.ArrowDown:\n            this.preventViewportScrolling(event);\n            this.openAndMoveTo(ArrowKeyDirection.DOWN);\n            preventDefault = true;\n            break;\n\n          default:\n            // Any other keypress\n            if (event.key !== KeyCodes.Tab && !(this.selectionService.multiselectable && event.key === KeyCodes.Backspace) && !(event.key === KeyCodes.Escape) && !this.toggleService.open) {\n              this.toggleService.open = true;\n            }\n\n            break;\n        }\n      }\n\n      return preventDefault;\n    }\n\n    preventViewportScrolling(event) {\n      event.preventDefault();\n      event.stopImmediatePropagation();\n    }\n\n    focusInput() {\n      if (this.textInput && isPlatformBrowser(this.platformId)) {\n        this.textInput.focus();\n      }\n    }\n\n    addFocusOnBlurListener(el) {\n      if (isPlatformBrowser(this.platformId)) {\n        this.renderer.listen(el, 'blur', event => {\n          if (this.focusOutOfComponent(event)) {\n            this.toggleService.open = false; // Workaround for popover close-on-outside-click timing issues in Edge browser\n\n            if (this.componentCdRef) {\n              this.componentCdRef.detectChanges();\n            }\n          }\n        });\n      }\n    }\n\n    focusOutOfComponent(event) {\n      // event.relatedTarget is null in IE11. In that case we use document.activeElement\n      // which points to the element that becomes active as the blur event occurs on the input.\n      const target = event.relatedTarget || document.activeElement;\n      return !(this.textInput.contains(target) || this.trigger.contains(target) || this.listbox.contains(target));\n    }\n\n    focusFirstActive() {\n      if (this.optionData.length > 0) {\n        if (this.selectionService.selectionModel.isEmpty()) {\n          this.pseudoFocus.select(this.optionData[0]);\n        } else {\n          let firstActive;\n\n          if (this.selectionService.multiselectable) {\n            firstActive = this.selectionService.selectionModel.model[0];\n          } else {\n            firstActive = this.selectionService.selectionModel.model;\n          }\n\n          const activeProxy = this.optionData.find(option => option.value === firstActive);\n\n          if (activeProxy) {\n            // active element is visible\n            this.pseudoFocus.select(activeProxy);\n          } else {\n            // we have active element, but it's filtered out\n            this.pseudoFocus.select(this.optionData[0]);\n          }\n        }\n      }\n    }\n\n    addOptionValues(options) {\n      this.optionData = options;\n    }\n\n  }\n\n  ComboboxFocusHandler.ɵfac = function ComboboxFocusHandler_Factory(t) {\n    return new (t || ComboboxFocusHandler)(ɵngcc0.ɵɵinject(UNIQUE_ID), ɵngcc0.ɵɵinject(ɵngcc0.RendererFactory2), ɵngcc0.ɵɵinject(ClrPopoverToggleService), ɵngcc0.ɵɵinject(OptionSelectionService), ɵngcc0.ɵɵinject(PLATFORM_ID));\n  };\n\n  ComboboxFocusHandler.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: ComboboxFocusHandler,\n    factory: ComboboxFocusHandler.ɵfac\n  });\n  return ComboboxFocusHandler;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nconst COMBOBOX_FOCUS_HANDLER_PROVIDER = customFocusableItemProvider(ComboboxFocusHandler);\n\nclass OptionData {\n  constructor(id, value) {\n    this.id = id;\n    this.value = value;\n  }\n\n  equals(other) {\n    if (!other) {\n      return false;\n    }\n\n    return this.id === other.id && this.value === other.value;\n  }\n\n}\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrCombobox = /*#__PURE__*/(() => {\n  class ClrCombobox extends WrappedFormControl {\n    constructor(vcr, injector, control, renderer, el, optionSelectionService, commonStrings, toggleService, positionService, controlStateService, containerService, platformId, ariaService, focusHandler, cdr) {\n      super(vcr, ClrComboboxContainer, injector, control, renderer, el);\n      this.control = control;\n      this.renderer = renderer;\n      this.el = el;\n      this.optionSelectionService = optionSelectionService;\n      this.commonStrings = commonStrings;\n      this.toggleService = toggleService;\n      this.positionService = positionService;\n      this.controlStateService = controlStateService;\n      this.containerService = containerService;\n      this.platformId = platformId;\n      this.ariaService = ariaService;\n      this.focusHandler = focusHandler;\n      this.cdr = cdr;\n      this.index = 1;\n      this.invalid = false;\n      this.focused = false;\n      this._searchText = '';\n      this.smartPosition = {\n        axis: ClrAxis.VERTICAL,\n        side: ClrSide.AFTER,\n        anchor: ClrAlignment.START,\n        content: ClrAlignment.START\n      };\n      this.placeholder = '';\n      this.clrInputChange = new EventEmitter(false);\n      this.clrOpenChange = this.toggleService.openChange; // This output should be used to set up a live region using aria-live and populate it with updates that reflect each combobox change\n\n      this.clrSelectionChange = this.optionSelectionService.selectionChanged;\n\n      if (control) {\n        control.valueAccessor = this;\n      } // default to SingleSelectComboboxModel, in case the optional input [ClrMulti] isn't used\n\n\n      this.optionSelectionService.selectionModel = new SingleSelectComboboxModel();\n      this.updateControlValue();\n    } // Override the id of WrappedFormControl, as we want to move it to the embedded input.\n    // Otherwise the label/component connection does not work and screen readers do not read the label.\n\n\n    get id() {\n      return this.controlIdService.id + '-combobox';\n    }\n\n    set id(id) {\n      super.id = id;\n    }\n\n    inputId() {\n      return this.controlIdService.id;\n    }\n\n    get openState() {\n      return this.toggleService.open;\n    }\n\n    set searchText(text) {\n      // if input text has changed since last time, fire a change event so application can react to it\n      if (text !== this._searchText) {\n        this._searchText = text;\n        this.clrInputChange.emit(this.searchText);\n        this.optionSelectionService.currentInput = this.searchText;\n      }\n    }\n\n    get searchText() {\n      return this._searchText;\n    }\n\n    get multiSelectModel() {\n      if (!this.multiSelect) {\n        throw Error('multiSelectModel is not available in single selection context');\n      }\n\n      return this.optionSelectionService.selectionModel.model;\n    }\n\n    loadingStateChange(state) {\n      this.optionSelectionService.loading = state === ClrLoadingState.LOADING;\n      this.positionService.realign();\n\n      if (state !== ClrLoadingState.LOADING && isPlatformBrowser(this.platformId)) {\n        setTimeout(() => {\n          this.focusFirstActive();\n        });\n      }\n    }\n\n    get disabled() {\n      return this.control && this.control.disabled;\n    }\n\n    unselect(item) {\n      if (!this.disabled) {\n        this.optionSelectionService.unselect(item);\n      }\n    }\n\n    set multiSelect(value) {\n      if (value) {\n        this.optionSelectionService.selectionModel = new MultiSelectComboboxModel();\n      } else {\n        // in theory, setting this again should not cause errors even though we already set it in constructor,\n        // since the initial call to writeValue (caused by [ngModel] input) should happen after this\n        this.optionSelectionService.selectionModel = new SingleSelectComboboxModel();\n      }\n\n      this.updateControlValue();\n    }\n\n    get multiSelect() {\n      return this.optionSelectionService.multiselectable;\n    }\n\n    get ariaControls() {\n      return this.ariaService.ariaControls;\n    }\n\n    get ariaOwns() {\n      return this.ariaService.ariaOwns;\n    }\n\n    get ariaDescribedBySelection() {\n      return 'selection-' + this.id;\n    }\n\n    get displayField() {\n      return this.optionSelectionService.displayField;\n    }\n\n    onBlur() {\n      this.onTouchedCallback();\n\n      if (this.control.control.updateOn === 'blur') {\n        this.control.control.updateValueAndValidity();\n      }\n\n      this.focused = false;\n    }\n\n    onFocus() {\n      this.focused = true;\n    }\n\n    getSelectionAriaLabel() {\n      if (this.containerService && this.containerService.labelText) {\n        return `${this.containerService.labelText} ${this.commonStrings.keys.comboboxSelection}`;\n      }\n\n      return this.commonStrings.keys.comboboxSelection;\n    }\n\n    onKeyUp(event) {\n      // if BACKSPACE in multiselect mode, delete the last pill if text is empty\n      if (event.keyCode === BACKSPACE && this.multiSelect && this._searchText.length === 0) {\n        const multiModel = this.optionSelectionService.selectionModel.model;\n\n        if (multiModel && multiModel.length > 0) {\n          const lastItem = multiModel[multiModel.length - 1];\n          this.control.control.markAsTouched();\n          this.optionSelectionService.unselect(lastItem);\n        }\n      }\n    }\n\n    initializeSubscriptions() {\n      this.subscriptions.push(this.optionSelectionService.selectionChanged.subscribe(newSelection => {\n        this.updateInputValue(newSelection);\n\n        if (this.multiSelect) {\n          this.positionService.realign();\n        }\n\n        if (!this.multiSelect && newSelection && !newSelection.isEmpty()) {\n          this.toggleService.open = false;\n        }\n\n        this.updateControlValue();\n      }));\n      this.subscriptions.push(this.toggleService.openChange.subscribe(open => {\n        if (open) {\n          this.focusFirstActive();\n        }\n\n        if (this.multiSelect) {\n          this.searchText = '';\n        } else {\n          this.searchText = this.getDisplayNames(this.optionSelectionService.selectionModel.model)[0] || '';\n        }\n      }));\n      this.subscriptions.push(this.toggleService.popoverAligned.subscribe(popoverNode => {\n        // When used outside a combobox container\n        if (!this.containerService) {\n          return;\n        }\n\n        const popover = popoverNode; // Update position if popover hides the label\n\n        if (popover.getBoundingClientRect().top < this.el.nativeElement.getBoundingClientRect().top) {\n          this.renderer.setStyle(popoverNode, 'top', `${popover.offsetTop + this.containerService.labelOffset}px`);\n        }\n      }));\n\n      if (this.controlStateService) {\n        this.subscriptions.push(this.controlStateService.statusChanges.subscribe(invalid => {\n          this.invalid = invalid === CONTROL_STATE.INVALID;\n        }));\n      }\n    }\n\n    focusFirstActive() {\n      this.focusHandler.focusFirstActive();\n    }\n\n    updateInputValue(model) {\n      if (!this.multiSelect) {\n        this.searchText = model.model ? this.getDisplayNames(model.model)[0] : '';\n\n        if (this.searchText) {\n          this.optionSelectionService.currentInput = this.searchText;\n        }\n      }\n    }\n\n    updateControlValue() {\n      if (this.onChangeCallback) {\n        this.onChangeCallback(this.optionSelectionService.selectionModel.model);\n      }\n    } // ControlValueAccessor implementation methods\n\n\n    writeValue(value) {\n      this.optionSelectionService.selectionModel.model = value;\n      this.updateInputValue(this.optionSelectionService.selectionModel);\n    }\n\n    registerOnChange(onChange) {\n      this.onChangeCallback = onChange;\n    }\n\n    getActiveDescendant() {\n      const model = this.focusHandler.pseudoFocus.model;\n      return model ? model.id : null;\n    }\n\n    registerOnTouched(onTouched) {\n      this.onTouchedCallback = onTouched;\n    }\n\n    setDisabledState() {// do nothing\n    }\n\n    focusInput() {\n      this.focusHandler.focusInput();\n    }\n\n    getDisplayNames(model) {\n      if (this.displayField) {\n        if (!Array.isArray(model)) {\n          model = [model];\n        }\n\n        return model.map(item => item ? item[this.displayField] : null);\n      }\n\n      return [this.optionSelectionService.selectionModel.model];\n    } // Lifecycle methods\n\n\n    ngAfterContentInit() {\n      this.initializeSubscriptions(); // Initialize with preselected value\n\n      if (!this.optionSelectionService.selectionModel.isEmpty()) {\n        this.updateInputValue(this.optionSelectionService.selectionModel);\n      }\n    }\n\n    ngAfterViewInit() {\n      this.focusHandler.componentCdRef = this.cdr;\n      this.focusHandler.textInput = this.textbox.nativeElement;\n      this.focusHandler.trigger = this.trigger.nativeElement; // The text input is the actual element we are wrapping\n      // This assignment is needed by the wrapper, so it can set\n      // the aria properties on the input element, not on the component.\n\n      this.el = this.textbox;\n    }\n\n    ngOnDestroy() {\n      this.subscriptions.forEach(sub => sub.unsubscribe());\n    }\n\n  }\n\n  ClrCombobox.ɵfac = function ClrCombobox_Factory(t) {\n    return new (t || ClrCombobox)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.NgControl, 10), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(OptionSelectionService), ɵngcc0.ɵɵdirectiveInject(ClrCommonStringsService), ɵngcc0.ɵɵdirectiveInject(ClrPopoverToggleService), ɵngcc0.ɵɵdirectiveInject(ClrPopoverPositionService), ɵngcc0.ɵɵdirectiveInject(IfControlStateService, 8), ɵngcc0.ɵɵdirectiveInject(ComboboxContainerService, 8), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID), ɵngcc0.ɵɵdirectiveInject(AriaService), ɵngcc0.ɵɵdirectiveInject(ComboboxFocusHandler), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef));\n  };\n\n  ClrCombobox.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ClrCombobox,\n    selectors: [[\"clr-combobox\"]],\n    contentQueries: function ClrCombobox_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, ClrOptionSelected, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.optionSelected = _t.first);\n      }\n    },\n    viewQuery: function ClrCombobox_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c18, 5);\n        ɵngcc0.ɵɵviewQuery(_c19, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.textbox = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.trigger = _t.first);\n      }\n    },\n    hostVars: 6,\n    hostBindings: function ClrCombobox_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"keydown\", function ClrCombobox_keydown_HostBindingHandler($event) {\n          return ctx.onKeyUp($event);\n        });\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"aria-required\", true)(\"clr-combobox\", true)(\"clr-combobox-disabled\", ctx.control == null ? null : ctx.control.disabled);\n      }\n    },\n    inputs: {\n      placeholder: \"placeholder\",\n      multiSelect: [\"clrMulti\", \"multiSelect\"]\n    },\n    outputs: {\n      clrInputChange: \"clrInputChange\",\n      clrOpenChange: \"clrOpenChange\",\n      clrSelectionChange: \"clrSelectionChange\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([ClrPopoverToggleService, {\n      provide: POPOVER_HOST_ANCHOR,\n      useExisting: ElementRef\n    }, OptionSelectionService, {\n      provide: LoadingListener,\n      useExisting: ClrCombobox\n    }, IF_ACTIVE_ID_PROVIDER, AriaService, FOCUS_SERVICE_PROVIDER, COMBOBOX_FOCUS_HANDLER_PROVIDER, ClrPopoverToggleService, ClrPopoverEventsService, ClrPopoverPositionService]), ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c0,\n    decls: 10,\n    vars: 21,\n    consts: [[\"clrPopoverAnchor\", \"\", 1, \"clr-combobox-wrapper\", 3, \"click\"], [\"role\", \"grid\", \"clrRovingTabindex\", \"\", \"clrDirection\", \"both\", 3, \"clrRovingTabindexDisabled\", 4, \"ngIf\"], [\"role\", \"combobox\", 1, \"clr-combobox-input-wrapper\"], [\"type\", \"text\", \"aria-haspopup\", \"listbox\", \"aria-autocomplete\", \"list\", \"autocomplete\", \"off\", 1, \"clr-input\", \"clr-combobox-input\", 3, \"id\", \"ngModel\", \"disabled\", \"ngModelChange\", \"blur\", \"focus\"], [\"textboxInput\", \"\"], [\"clrPopoverOpenCloseButton\", \"\", \"type\", \"button\", \"tabindex\", \"-1\", 1, \"clr-combobox-trigger\", 3, \"disabled\"], [\"trigger\", \"\"], [\"shape\", \"angle\", \"direction\", \"down\", \"size\", \"12\"], [1, \"clr-focus-indicator\"], [\"role\", \"dialog\", 4, \"clrPopoverContent\", \"clrPopoverContentAt\", \"clrPopoverContentOutsideClickToClose\", \"clrPopoverContentScrollToClose\"], [\"role\", \"grid\", \"clrRovingTabindex\", \"\", \"clrDirection\", \"both\", 3, \"clrRovingTabindexDisabled\"], [\"class\", \"label label-combobox-pill\", \"role\", \"row\", 4, \"ngFor\", \"ngForOf\"], [\"role\", \"row\", 1, \"label\", \"label-combobox-pill\"], [\"role\", \"gridcell\"], [\"clrKeyFocusItem\", \"\", 1, \"clr-combobox-pill-content\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\", 4, \"ngIf\"], [\"clrKeyFocusItem\", \"\", \"type\", \"button\", 1, \"clr-combobox-remove-btn\", 3, \"disabled\", \"click\"], [\"shape\", \"window-close\", \"size\", \"12\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [\"role\", \"dialog\"]],\n    template: function ClrCombobox_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵlistener(\"click\", function ClrCombobox_Template_div_click_0_listener() {\n          return ctx.focusInput();\n        });\n        ɵngcc0.ɵɵtemplate(1, ClrCombobox_span_1_Template, 2, 4, \"span\", 1);\n        ɵngcc0.ɵɵelementStart(2, \"span\", 2);\n        ɵngcc0.ɵɵelementStart(3, \"input\", 3, 4);\n        ɵngcc0.ɵɵlistener(\"ngModelChange\", function ClrCombobox_Template_input_ngModelChange_3_listener($event) {\n          return ctx.searchText = $event;\n        })(\"blur\", function ClrCombobox_Template_input_blur_3_listener() {\n          return ctx.onBlur();\n        })(\"focus\", function ClrCombobox_Template_input_focus_3_listener() {\n          return ctx.onFocus();\n        });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(5, \"button\", 5, 6);\n        ɵngcc0.ɵɵelement(7, \"cds-icon\", 7);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelement(8, \"div\", 8);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(9, ClrCombobox_div_9_Template, 2, 0, \"div\", 9);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"multi\", ctx.multiSelect)(\"invalid\", ctx.invalid);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.multiSelect && ctx.optionSelectionService.selectionModel.model);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"id\", ctx.inputId())(\"ngModel\", ctx.searchText)(\"disabled\", (ctx.control == null ? null : ctx.control.disabled) ? true : null);\n        ɵngcc0.ɵɵattribute(\"aria-expanded\", ctx.openState)(\"aria-owns\", ctx.ariaOwns)(\"aria-invalid\", (ctx.control == null ? null : ctx.control.invalid) ? true : null)(\"aria-activedescendant\", ctx.getActiveDescendant())(\"placeholder\", ctx.placeholder);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"disabled\", (ctx.control == null ? null : ctx.control.disabled) || null);\n        ɵngcc0.ɵɵattribute(\"aria-label\", ctx.commonStrings.keys.comboboxOpen);\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵclassProp(\"clr-focus\", ctx.focused);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"clrPopoverContent\", ctx.openState)(\"clrPopoverContentAt\", ctx.smartPosition)(\"clrPopoverContentOutsideClickToClose\", false)(\"clrPopoverContentScrollToClose\", false);\n      }\n    },\n    directives: [ClrPopoverAnchor, ɵngcc1.NgIf, ɵngcc2.DefaultValueAccessor, ɵngcc2.NgControlStatus, ɵngcc2.NgModel, ClrPopoverOpenCloseButton, CdsIconCustomTag, ClrPopoverContent, ClrRovingTabindex, ɵngcc1.NgForOf, ClrKeyFocusItem, ɵngcc1.NgTemplateOutlet],\n    encapsulation: 2\n  });\n  return ClrCombobox;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrOption = /*#__PURE__*/(() => {\n  class ClrOption {\n    constructor(elRef, commonStrings, focusHandler, optionSelectionService, autoId) {\n      this.elRef = elRef;\n      this.commonStrings = commonStrings;\n      this.focusHandler = focusHandler;\n      this.optionSelectionService = optionSelectionService;\n      this.autoId = autoId; // A proxy with only the necessary data to be used for a11y and the focus handler service.\n\n      this.optionProxy = new OptionData(null, null);\n      this.optionProxy.el = this.elRef.nativeElement;\n    }\n\n    set optionId(id) {\n      this._id = id;\n      this.optionProxy.id = this._id;\n    }\n\n    get optionId() {\n      return this._id;\n    }\n\n    set value(value) {\n      this._value = value;\n      this.optionProxy.value = value;\n    }\n\n    get value() {\n      return this._value;\n    }\n\n    get selected() {\n      return this.optionSelectionService.selectionModel && this.optionSelectionService.selectionModel.containsItem(this.value);\n    }\n\n    ngOnInit() {\n      if (!this._id) {\n        this._id = 'clr-option-' + this.autoId;\n        this.optionProxy.id = this._id;\n      }\n    }\n\n    onClick() {\n      if (this.optionSelectionService.multiselectable) {\n        this.optionSelectionService.toggle(this.value);\n      } else {\n        this.optionSelectionService.select(this.value);\n      } // As the popover stays open in multi-select mode now, we have to take focus back to the input\n      // This way we achieve two things:\n      // - do not lose focus\n      // - we're still able to use onBlur for \"outside-click\" handling\n\n\n      this.focusHandler.focusInput();\n    }\n\n    get focusClass() {\n      return this.focusHandler.pseudoFocus.containsItem(this.optionProxy);\n    }\n\n  }\n\n  ClrOption.ɵfac = function ClrOption_Factory(t) {\n    return new (t || ClrOption)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ClrCommonStringsService), ɵngcc0.ɵɵdirectiveInject(ComboboxFocusHandler), ɵngcc0.ɵɵdirectiveInject(OptionSelectionService), ɵngcc0.ɵɵdirectiveInject(UNIQUE_ID));\n  };\n\n  ClrOption.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ClrOption,\n    selectors: [[\"clr-option\"]],\n    hostVars: 9,\n    hostBindings: function ClrOption_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function ClrOption_click_HostBindingHandler() {\n          return ctx.onClick();\n        });\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"role\", \"option\")(\"tabindex\", -1)(\"id\", ctx.optionId);\n        ɵngcc0.ɵɵclassProp(\"clr-combobox-option\", true)(\"active\", ctx.selected)(\"clr-focus\", ctx.focusClass);\n      }\n    },\n    inputs: {\n      optionId: [\"id\", \"optionId\"],\n      value: [\"clrValue\", \"value\"]\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([UNIQUE_ID_PROVIDER])],\n    ngContentSelectors: _c0,\n    decls: 2,\n    vars: 1,\n    consts: [[\"class\", \"clr-sr-only\", 4, \"ngIf\"], [1, \"clr-sr-only\"]],\n    template: function ClrOption_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n        ɵngcc0.ɵɵtemplate(1, ClrOption_span_1_Template, 2, 1, \"span\", 0);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.selected);\n      }\n    },\n    directives: [ɵngcc1.NgIf],\n    encapsulation: 2\n  });\n  return ClrOption;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrOptionItems = /*#__PURE__*/(() => {\n  class ClrOptionItems {\n    constructor(template, differs, optionService, positionService, vcr) {\n      this.template = template;\n      this.differs = differs;\n      this.optionService = optionService;\n      this.positionService = positionService;\n      this.vcr = vcr;\n      this.subscriptions = [];\n      this.filter = '';\n      this.differ = null;\n      this.iterableProxy = new NgForOf(this.vcr, this.template, this.differs);\n      this.subscriptions.push(optionService.inputChanged.subscribe(filter => {\n        this.filter = filter;\n        this.updateItems();\n      }));\n    }\n\n    set rawItems(items) {\n      this._rawItems = items ? items : [];\n      this.updateItems();\n    }\n\n    set trackBy(value) {\n      this.iterableProxy.ngForTrackBy = value;\n    }\n\n    set field(field) {\n      this._filterField = field;\n      this.optionService.displayField = field;\n    }\n\n    updateItems() {\n      if (!this._rawItems || this.filter === undefined || this.filter === null) {\n        return;\n      }\n\n      if (this._filterField) {\n        this.filteredItems = this._rawItems.filter(item => {\n          const objValue = item[this._filterField];\n          return objValue ? objValue.toString().toLowerCase().indexOf(this.filter.toLowerCase().toString()) > -1 : false;\n        });\n      } else {\n        // Filter by all item object values\n        this.filteredItems = this._rawItems.filter(item => {\n          if (typeof item !== 'object') {\n            return item.toString().toLowerCase().indexOf(this.filter.toString().toLowerCase()) > -1;\n          }\n\n          const objValues = Object.values(item).filter(value => {\n            return value !== null && value !== undefined ? value.toString().toLowerCase().indexOf(this.filter.toString().toLowerCase()) > -1 : false;\n          });\n          return objValues.length > 0;\n        });\n      }\n\n      this.iterableProxy.ngForOf = this.filteredItems;\n    }\n\n    ngDoCheck() {\n      if (!this.differ) {\n        this.differ = this.differs.find(this.filteredItems).create(this.iterableProxy.ngForTrackBy);\n      }\n\n      if (this.differ) {\n        const changes = this.differ.diff(this.filteredItems);\n\n        if (changes) {\n          this.iterableProxy.ngDoCheck();\n          this.positionService.realign();\n        }\n      }\n    }\n\n    ngOnDestroy() {\n      this.subscriptions.forEach(sub => sub.unsubscribe());\n    }\n\n  }\n\n  ClrOptionItems.ɵfac = function ClrOptionItems_Factory(t) {\n    return new (t || ClrOptionItems)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(OptionSelectionService), ɵngcc0.ɵɵdirectiveInject(ClrPopoverPositionService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef));\n  };\n\n  ClrOptionItems.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: ClrOptionItems,\n    selectors: [[\"\", \"clrOptionItems\", \"\", \"clrOptionItemsOf\", \"\"]],\n    inputs: {\n      rawItems: [\"clrOptionItemsOf\", \"rawItems\"],\n      trackBy: [\"clrOptionItemsTrackBy\", \"trackBy\"],\n      field: [\"clrOptionItemsField\", \"field\"]\n    }\n  });\n  return ClrOptionItems;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet nbOptionsComponents = 0;\nlet ClrOptions = /*#__PURE__*/(() => {\n  class ClrOptions {\n    constructor(optionSelectionService, id, ariaService, el, commonStrings, focusHandler, toggleService, parentHost, document) {\n      this.optionSelectionService = optionSelectionService;\n      this.id = id;\n      this.ariaService = ariaService;\n      this.el = el;\n      this.commonStrings = commonStrings;\n      this.focusHandler = focusHandler;\n      this.toggleService = toggleService;\n      this.document = document;\n      this.loading = false;\n      this.subscriptions = [];\n\n      if (!parentHost) {\n        throw new Error('clr-options should only be used inside of a clr-combobox');\n      }\n\n      if (!this.optionsId) {\n        this.optionsId = 'clr-options-' + nbOptionsComponents++;\n      }\n    }\n\n    searchText(input) {\n      return this.commonStrings.parse(this.commonStrings.keys.comboboxSearching, {\n        INPUT: input\n      });\n    }\n    /**\n     * Tests if the list of options is empty, meaning it doesn't contain any items\n     */\n\n\n    get emptyOptions() {\n      return !this.optionSelectionService.loading && this.items.length === 0;\n    }\n\n    set optionsId(id) {\n      this.ariaService.ariaControls = id;\n      this.ariaService.ariaOwns = id;\n    }\n\n    get optionsId() {\n      return this.ariaService.ariaControls;\n    }\n\n    set items(items) {\n      this._items = items;\n      this.focusHandler.addOptionValues(this._items.map(option => option.optionProxy));\n    }\n\n    get items() {\n      return this._items;\n    }\n\n    loadingStateChange(state) {\n      this.loading = state === ClrLoadingState.LOADING;\n    }\n\n    ngAfterViewInit() {\n      this.focusHandler.listbox = this.el.nativeElement;\n      this.subscriptions.push(fromEvent(this.document, 'scroll', {\n        capture: true\n      }).subscribe(event => {\n        if (this.toggleService.open && event.target !== this.el.nativeElement && event.target !== this.focusHandler.textInput) {\n          this.toggleService.open = false;\n        }\n      }), this.items.changes.subscribe(() => {\n        setTimeout(() => {\n          this.focusHandler.focusFirstActive();\n        });\n      }));\n    }\n\n    ngOnDestroy() {\n      this.subscriptions.forEach(sub => sub.unsubscribe());\n    }\n\n  }\n\n  ClrOptions.ɵfac = function ClrOptions_Factory(t) {\n    return new (t || ClrOptions)(ɵngcc0.ɵɵdirectiveInject(OptionSelectionService), ɵngcc0.ɵɵdirectiveInject(IF_ACTIVE_ID), ɵngcc0.ɵɵdirectiveInject(AriaService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ClrCommonStringsService), ɵngcc0.ɵɵdirectiveInject(ComboboxFocusHandler), ɵngcc0.ɵɵdirectiveInject(ClrPopoverToggleService), ɵngcc0.ɵɵdirectiveInject(POPOVER_HOST_ANCHOR, 8), ɵngcc0.ɵɵdirectiveInject(DOCUMENT));\n  };\n\n  ClrOptions.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ClrOptions,\n    selectors: [[\"clr-options\"]],\n    contentQueries: function ClrOptions_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, ClrOption, 4);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.items = _t);\n      }\n    },\n    hostVars: 4,\n    hostBindings: function ClrOptions_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx.optionsId);\n        ɵngcc0.ɵɵattribute(\"role\", \"listbox\");\n        ɵngcc0.ɵɵclassProp(\"clr-combobox-options\", true);\n      }\n    },\n    inputs: {\n      optionsId: [\"id\", \"optionsId\"]\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: LoadingListener,\n      useExisting: ClrOptions\n    }])],\n    ngContentSelectors: _c0,\n    decls: 3,\n    vars: 2,\n    consts: [[\"class\", \"clr-combobox-options-loading\", 4, \"ngIf\"], [4, \"ngIf\"], [1, \"clr-combobox-options-loading\"], [\"clrInline\", \"\"], [1, \"clr-combobox-options-text\"], [1, \"clr-combobox-options-empty-text\"]],\n    template: function ClrOptions_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵtemplate(0, ClrOptions_div_0_Template, 5, 2, \"div\", 0);\n        ɵngcc0.ɵɵtemplate(1, ClrOptions_div_1_Template, 3, 1, \"div\", 1);\n        ɵngcc0.ɵɵprojection(2);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.optionSelectionService.loading);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.emptyOptions);\n      }\n    },\n    directives: [ɵngcc1.NgIf, ClrSpinner],\n    encapsulation: 2\n  });\n  return ClrOptions;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrComboboxModule = /*#__PURE__*/(() => {\n  class ClrComboboxModule {\n    constructor() {\n      ClarityIcons.addIcons(exclamationCircleIcon, checkCircleIcon, angleIcon, windowCloseIcon);\n    }\n\n  }\n\n  ClrComboboxModule.ɵfac = function ClrComboboxModule_Factory(t) {\n    return new (t || ClrComboboxModule)();\n  };\n\n  ClrComboboxModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: ClrComboboxModule\n  });\n  ClrComboboxModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule, FormsModule, ClrIconModule, ClrKeyFocusModule, ClrCommonFormsModule, ClrConditionalModule, ClrPopoverModuleNext, ClrSpinnerModule], ClrCommonFormsModule, ClrConditionalModule]\n  });\n  return ClrComboboxModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ClrComboboxModule, {\n    declarations: function () {\n      return [ClrCombobox, ClrComboboxContainer, ClrOptions, ClrOption, ClrOptionSelected, ClrOptionItems];\n    },\n    imports: function () {\n      return [CommonModule, FormsModule, ClrIconModule, ClrKeyFocusModule, ClrCommonFormsModule, ClrConditionalModule, ClrPopoverModuleNext, ClrSpinnerModule];\n    },\n    exports: function () {\n      return [ClrCommonFormsModule, ClrCombobox, ClrComboboxContainer, ClrOptions, ClrOption, ClrOptionSelected, ClrConditionalModule, ClrOptionItems];\n    }\n  });\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrInputContainer = /*#__PURE__*/(() => {\n  class ClrInputContainer extends ClrAbstractContainer {}\n\n  ClrInputContainer.ɵfac = /*@__PURE__*/function () {\n    let ɵClrInputContainer_BaseFactory;\n    return function ClrInputContainer_Factory(t) {\n      return (ɵClrInputContainer_BaseFactory || (ɵClrInputContainer_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(ClrInputContainer)))(t || ClrInputContainer);\n    };\n  }();\n\n  ClrInputContainer.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ClrInputContainer,\n    selectors: [[\"clr-input-container\"]],\n    hostVars: 6,\n    hostBindings: function ClrInputContainer_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"clr-form-control\", true)(\"clr-form-control-disabled\", ctx.control == null ? null : ctx.control.disabled)(\"clr-row\", ctx.addGrid());\n      }\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([IfControlStateService, NgControlService, ControlIdService, ControlClassService]), ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c22,\n    decls: 10,\n    vars: 7,\n    consts: [[4, \"ngIf\"], [1, \"clr-control-container\", 3, \"ngClass\"], [1, \"clr-input-wrapper\"], [\"class\", \"clr-validate-icon\", \"shape\", \"exclamation-circle\", \"aria-hidden\", \"true\", 4, \"ngIf\"], [\"class\", \"clr-validate-icon\", \"shape\", \"check-circle\", \"status\", \"success\", \"aria-hidden\", \"true\", 4, \"ngIf\"], [\"shape\", \"exclamation-circle\", \"aria-hidden\", \"true\", 1, \"clr-validate-icon\"], [\"shape\", \"check-circle\", \"status\", \"success\", \"aria-hidden\", \"true\", 1, \"clr-validate-icon\"]],\n    template: function ClrInputContainer_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c21);\n        ɵngcc0.ɵɵprojection(0);\n        ɵngcc0.ɵɵtemplate(1, ClrInputContainer_label_1_Template, 1, 0, \"label\", 0);\n        ɵngcc0.ɵɵelementStart(2, \"div\", 1);\n        ɵngcc0.ɵɵelementStart(3, \"div\", 2);\n        ɵngcc0.ɵɵprojection(4, 1);\n        ɵngcc0.ɵɵtemplate(5, ClrInputContainer_cds_icon_5_Template, 1, 0, \"cds-icon\", 3);\n        ɵngcc0.ɵɵtemplate(6, ClrInputContainer_cds_icon_6_Template, 1, 0, \"cds-icon\", 4);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(7, ClrInputContainer_ng_content_7_Template, 1, 0, \"ng-content\", 0);\n        ɵngcc0.ɵɵtemplate(8, ClrInputContainer_ng_content_8_Template, 1, 0, \"ng-content\", 0);\n        ɵngcc0.ɵɵtemplate(9, ClrInputContainer_ng_content_9_Template, 1, 0, \"ng-content\", 0);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.label && ctx.addGrid());\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngClass\", ctx.controlClass());\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showInvalid);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showValid);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showHelper);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showInvalid);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showValid);\n      }\n    },\n    directives: [ɵngcc1.NgIf, ɵngcc1.NgClass, ClrLabel, CdsIconCustomTag],\n    encapsulation: 2\n  });\n  return ClrInputContainer;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrInput = /*#__PURE__*/(() => {\n  class ClrInput extends WrappedFormControl {\n    constructor(vcr, injector, control, renderer, el) {\n      super(vcr, ClrInputContainer, injector, control, renderer, el);\n      this.index = 1;\n    }\n\n  }\n\n  ClrInput.ɵfac = function ClrInput_Factory(t) {\n    return new (t || ClrInput)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.NgControl, 10), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  ClrInput.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: ClrInput,\n    selectors: [[\"\", \"clrInput\", \"\"]],\n    hostVars: 2,\n    hostBindings: function ClrInput_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"clr-input\", true);\n      }\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  return ClrInput;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrInputModule = /*#__PURE__*/(() => {\n  class ClrInputModule {\n    constructor() {\n      ClarityIcons.addIcons(exclamationCircleIcon, checkCircleIcon // caret\n      );\n    }\n\n  }\n\n  ClrInputModule.ɵfac = function ClrInputModule_Factory(t) {\n    return new (t || ClrInputModule)();\n  };\n\n  ClrInputModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: ClrInputModule\n  });\n  ClrInputModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule, FormsModule, ClrIconModule, ClrCommonFormsModule], ClrCommonFormsModule]\n  });\n  return ClrInputModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ClrInputModule, {\n    declarations: function () {\n      return [ClrInput, ClrInputContainer];\n    },\n    imports: function () {\n      return [CommonModule, FormsModule, ClrIconModule, ClrCommonFormsModule];\n    },\n    exports: function () {\n      return [ClrCommonFormsModule, ClrInput, ClrInputContainer];\n    }\n  });\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet counter = 0;\nlet DatalistIdService = /*#__PURE__*/(() => {\n  class DatalistIdService {\n    constructor() {\n      this._id = 'clr-datalist-' + ++counter;\n      this._idChange = new BehaviorSubject(this._id);\n    }\n\n    get id() {\n      return this._id;\n    }\n\n    set id(value) {\n      this._id = value;\n\n      this._idChange.next(value);\n    }\n\n    get idChange() {\n      return this._idChange.asObservable();\n    }\n\n  }\n\n  DatalistIdService.ɵfac = function DatalistIdService_Factory(t) {\n    return new (t || DatalistIdService)();\n  };\n\n  DatalistIdService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: DatalistIdService,\n    factory: DatalistIdService.ɵfac\n  });\n  return DatalistIdService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrDatalist = /*#__PURE__*/(() => {\n  class ClrDatalist {\n    constructor(datalistIdService) {\n      this.datalistIdService = datalistIdService;\n      this.subscriptions = [];\n    }\n\n    ngAfterContentInit() {\n      if (!this.datalistIdService) {\n        return;\n      }\n\n      this.subscriptions.push(this.datalistIdService.idChange.subscribe(id => this.datalistId = id));\n    }\n\n    set id(idValue) {\n      if (!!idValue && this.datalistIdService) {\n        this.datalistId = idValue;\n        this.datalistIdService.id = idValue;\n      } else if (idValue) {\n        this.datalistId = idValue;\n      }\n    }\n\n    ngOnDestroy() {\n      this.subscriptions.forEach(sub => sub.unsubscribe());\n    }\n\n  }\n\n  ClrDatalist.ɵfac = function ClrDatalist_Factory(t) {\n    return new (t || ClrDatalist)(ɵngcc0.ɵɵdirectiveInject(DatalistIdService, 8));\n  };\n\n  ClrDatalist.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: ClrDatalist,\n    selectors: [[\"datalist\"]],\n    hostVars: 1,\n    hostBindings: function ClrDatalist_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx.datalistId);\n      }\n    },\n    inputs: {\n      id: \"id\"\n    }\n  });\n  return ClrDatalist;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet FocusService = /*#__PURE__*/(() => {\n  class FocusService {\n    constructor() {\n      this._focused = new BehaviorSubject(false);\n    }\n\n    get focusChange() {\n      return this._focused.asObservable();\n    }\n\n    set focused(state) {\n      this._focused.next(state);\n    }\n\n  }\n\n  FocusService.ɵfac = function FocusService_Factory(t) {\n    return new (t || FocusService)();\n  };\n\n  FocusService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: FocusService,\n    factory: FocusService.ɵfac\n  });\n  return FocusService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrDatalistContainer = /*#__PURE__*/(() => {\n  class ClrDatalistContainer extends ClrAbstractContainer {\n    constructor(controlClassService, layoutService, ngControlService, focusService, ifControlStateService) {\n      super(ifControlStateService, layoutService, controlClassService, ngControlService);\n      this.focusService = focusService;\n      this.ifControlStateService = ifControlStateService;\n      this.focus = false;\n      this.subscriptions.push(this.focusService.focusChange.subscribe(state => this.focus = state));\n    }\n\n  }\n\n  ClrDatalistContainer.ɵfac = function ClrDatalistContainer_Factory(t) {\n    return new (t || ClrDatalistContainer)(ɵngcc0.ɵɵdirectiveInject(ControlClassService), ɵngcc0.ɵɵdirectiveInject(LayoutService, 8), ɵngcc0.ɵɵdirectiveInject(NgControlService), ɵngcc0.ɵɵdirectiveInject(FocusService), ɵngcc0.ɵɵdirectiveInject(IfControlStateService));\n  };\n\n  ClrDatalistContainer.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ClrDatalistContainer,\n    selectors: [[\"clr-datalist-container\"]],\n    hostVars: 6,\n    hostBindings: function ClrDatalistContainer_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"clr-form-control\", true)(\"clr-form-control-disabled\", ctx.control == null ? null : ctx.control.disabled)(\"clr-row\", ctx.addGrid());\n      }\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([ControlClassService, LayoutService, ControlIdService, FocusService, NgControlService, DatalistIdService, IfControlStateService]), ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c24,\n    decls: 12,\n    vars: 9,\n    consts: [[4, \"ngIf\"], [1, \"clr-control-container\", 3, \"ngClass\"], [1, \"clr-input-wrapper\"], [1, \"clr-input-group\"], [\"class\", \"clr-validate-icon\", \"status\", \"danger\", \"shape\", \"exclamation-circle\", \"aria-hidden\", \"true\", 4, \"ngIf\"], [\"class\", \"clr-validate-icon\", \"shape\", \"check-circle\", \"status\", \"success\", \"aria-hidden\", \"true\", 4, \"ngIf\"], [\"status\", \"danger\", \"shape\", \"exclamation-circle\", \"aria-hidden\", \"true\", 1, \"clr-validate-icon\"], [\"shape\", \"check-circle\", \"status\", \"success\", \"aria-hidden\", \"true\", 1, \"clr-validate-icon\"]],\n    template: function ClrDatalistContainer_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c23);\n        ɵngcc0.ɵɵprojection(0);\n        ɵngcc0.ɵɵtemplate(1, ClrDatalistContainer_label_1_Template, 1, 0, \"label\", 0);\n        ɵngcc0.ɵɵelementStart(2, \"div\", 1);\n        ɵngcc0.ɵɵelementStart(3, \"div\", 2);\n        ɵngcc0.ɵɵelementStart(4, \"div\", 3);\n        ɵngcc0.ɵɵprojection(5, 1);\n        ɵngcc0.ɵɵprojection(6, 2);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(7, ClrDatalistContainer_cds_icon_7_Template, 1, 0, \"cds-icon\", 4);\n        ɵngcc0.ɵɵtemplate(8, ClrDatalistContainer_cds_icon_8_Template, 1, 0, \"cds-icon\", 5);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(9, ClrDatalistContainer_ng_content_9_Template, 1, 0, \"ng-content\", 0);\n        ɵngcc0.ɵɵtemplate(10, ClrDatalistContainer_ng_content_10_Template, 1, 0, \"ng-content\", 0);\n        ɵngcc0.ɵɵtemplate(11, ClrDatalistContainer_ng_content_11_Template, 1, 0, \"ng-content\", 0);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.label && ctx.addGrid());\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngClass\", ctx.controlClass());\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵclassProp(\"clr-focus\", ctx.focus);\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showInvalid);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showValid);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showHelper);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showInvalid);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showValid);\n      }\n    },\n    directives: [ɵngcc1.NgIf, ɵngcc1.NgClass, ClrLabel, CdsIconCustomTag],\n    encapsulation: 2\n  });\n  return ClrDatalistContainer;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrDatalistInput = /*#__PURE__*/(() => {\n  class ClrDatalistInput extends WrappedFormControl {\n    constructor(focusService, vcr, injector, control, renderer, el, datalistIdService) {\n      super(vcr, ClrDatalistContainer, injector, control, renderer, el);\n      this.focusService = focusService;\n      this.datalistIdService = datalistIdService;\n\n      if (!this.focusService) {\n        throw new Error('clrDatalist requires being wrapped in <clr-datalist-container>');\n      }\n    }\n\n    ngAfterContentInit() {\n      // Subscriptions is inherited from WrappedFormControl, unsubscribe is handled there\n      this.subscriptions.push(this.datalistIdService.idChange.subscribe(id => this.listValue = id));\n    }\n\n    triggerFocus() {\n      if (this.focusService) {\n        this.focusService.focused = true;\n      }\n    }\n\n    triggerValidation() {\n      super.triggerValidation();\n\n      if (this.focusService) {\n        this.focusService.focused = false;\n      }\n    }\n\n  }\n\n  ClrDatalistInput.ɵfac = function ClrDatalistInput_Factory(t) {\n    return new (t || ClrDatalistInput)(ɵngcc0.ɵɵdirectiveInject(FocusService, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.NgControl, 10), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(DatalistIdService));\n  };\n\n  ClrDatalistInput.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: ClrDatalistInput,\n    selectors: [[\"\", \"clrDatalistInput\", \"\"]],\n    hostVars: 3,\n    hostBindings: function ClrDatalistInput_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focus\", function ClrDatalistInput_focus_HostBindingHandler() {\n          return ctx.triggerFocus();\n        })(\"blur\", function ClrDatalistInput_blur_HostBindingHandler() {\n          return ctx.triggerValidation();\n        });\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"list\", ctx.listValue);\n        ɵngcc0.ɵɵclassProp(\"clr-input\", true);\n      }\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  return ClrDatalistInput;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrDatalistModule = /*#__PURE__*/(() => {\n  class ClrDatalistModule {\n    constructor() {\n      ClarityIcons.addIcons(exclamationCircleIcon, checkCircleIcon);\n    }\n\n  }\n\n  ClrDatalistModule.ɵfac = function ClrDatalistModule_Factory(t) {\n    return new (t || ClrDatalistModule)();\n  };\n\n  ClrDatalistModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: ClrDatalistModule\n  });\n  ClrDatalistModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule, ClrInputModule, ClrIconModule]]\n  });\n  return ClrDatalistModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ClrDatalistModule, {\n    declarations: function () {\n      return [ClrDatalist, ClrDatalistInput, ClrDatalistContainer];\n    },\n    imports: function () {\n      return [CommonModule, ClrInputModule, ClrIconModule];\n    },\n    exports: function () {\n      return [ClrDatalist, ClrDatalistInput, ClrDatalistContainer];\n    }\n  });\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet FocusTrapTracker = /*#__PURE__*/(() => {\n  class FocusTrapTracker {\n    constructor() {\n      this._previousFocusTraps = [];\n    }\n\n    get current() {\n      return this._current;\n    }\n\n    set current(value) {\n      this._previousFocusTraps.push(this._current);\n\n      this._current = value;\n    }\n\n    get nbFocusTrappers() {\n      return this._previousFocusTraps.length;\n    }\n\n    activatePreviousTrapper() {\n      this._current = this._previousFocusTraps.pop();\n    }\n\n  }\n\n  FocusTrapTracker.ɵfac = function FocusTrapTracker_Factory(t) {\n    return new (t || FocusTrapTracker)();\n  };\n\n  FocusTrapTracker.ɵprov = i0.ɵɵdefineInjectable({\n    factory: function FocusTrapTracker_Factory() {\n      return new FocusTrapTracker();\n    },\n    token: FocusTrapTracker,\n    providedIn: \"root\"\n  });\n  return FocusTrapTracker;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nconst FOCUSABLES = '[href]:not([tabindex=\"-1\"]), button:not([disabled]):not([tabindex=\"-1\"]), input:not([disabled]):not([tabindex=\"-1\"]), select:not([disabled]):not([tabindex=\"-1\"]), textarea:not([disabled]):not([tabindex=\"-1\"]), [contenteditable=\"true\"]:not([tabindex=\"-1\"]), [tabindex]:not([tabindex=\"-1\"]) ';\nlet FocusTrapDirective = /*#__PURE__*/(() => {\n  class FocusTrapDirective {\n    constructor(el, injector, focusTrapsTracker, renderer, platformId) {\n      this.el = el;\n      this.injector = injector;\n      this.focusTrapsTracker = focusTrapsTracker;\n      this.renderer = renderer;\n      this.platformId = platformId;\n      this.localFocusEscaped = false;\n      this._config = {\n        strict: true\n      };\n      this.document = this.injector.get(DOCUMENT);\n      this.focusTrapsTracker.current = this;\n    }\n\n    set config(config) {\n      this._config = Object.assign(this._config, config === '' ? {} : config);\n    }\n\n    onFocusIn(event) {\n      const nativeElement = this.el.nativeElement;\n\n      if (this.focusTrapsTracker.current !== this || !isPlatformBrowser(this.platformId) || this.localFocusEscaped || nativeElement.contains(event.target)) {\n        return;\n      }\n\n      if (event.target === this.topReboundEl && nativeElement.contains(event.relatedTarget)) {\n        this.focusLastFocusable(); // if it fails to focus element inside the trap, focus the trap element.\n\n        this.focusTrapElIfOutside();\n      } else if (event.target === this.bottomReboundEl && nativeElement.contains(event.relatedTarget)) {\n        this.focusFirstFocusable(); // if it fails to focus element inside the trap, focus the trap element.\n\n        this.focusTrapElIfOutside();\n      } else {\n        this._config.strict ? this.el.nativeElement.focus() : this.localFocusEscaped = true;\n      }\n    }\n\n    createFocusableOffScreenEl() {\n      // Not using Renderer2's createElement method because that leads to DOM leakage.\n      // https://github.com/angular/angular/issues/26954\n      const offScreenSpan = this.document.createElement('span');\n      this.renderer.setAttribute(offScreenSpan, 'tabindex', '0');\n      this.renderer.addClass(offScreenSpan, 'offscreen-focus-rebounder');\n      return offScreenSpan;\n    }\n\n    addReboundEls() {\n      if (isPlatformBrowser(this.platformId)) {\n        this.topReboundEl = this.createFocusableOffScreenEl();\n        this.bottomReboundEl = this.createFocusableOffScreenEl();\n        const hostElement = this.el.nativeElement; // Add reboundBeforeTrapEl right outside of host element\n\n        this.renderer.insertBefore(hostElement.parentElement, this.topReboundEl, hostElement); // Add reboundAfterTrapEl right after host element\n\n        if (hostElement.nextSibling) {\n          this.renderer.insertBefore(hostElement.parentNode, this.bottomReboundEl, hostElement.nextSibling);\n        } else {\n          this.renderer.appendChild(hostElement.parentNode, this.bottomReboundEl);\n        }\n      }\n    }\n\n    removeReboundEls() {\n      if (isPlatformBrowser(this.platformId) && this.topReboundEl && this.bottomReboundEl) {\n        this.parentElement.removeChild(this.topReboundEl);\n        this.parentElement.removeChild(this.bottomReboundEl); // These are here to to make sure that\n        // we completely delete all traces of the removed DOM objects.\n\n        delete this.topReboundEl;\n        delete this.bottomReboundEl;\n      }\n    }\n\n    setPreviousFocus() {\n      if (this.previousActiveElement && this.previousActiveElement.focus) {\n        this.previousActiveElement.focus();\n      }\n    }\n\n    ngOnInit() {\n      if (isPlatformBrowser(this.platformId)) {\n        this.renderer.setAttribute(this.el.nativeElement, 'tabindex', '-1');\n        this.el.nativeElement.focus();\n      }\n    }\n\n    ngAfterViewInit() {\n      if (isPlatformBrowser(this.platformId)) {\n        this.previousActiveElement = this.document.activeElement;\n        this.parentElement = this.el.nativeElement.parentElement;\n      }\n\n      this.addReboundEls();\n    }\n\n    get potentiallyFocusableEls() {\n      return [...this.el.nativeElement.querySelectorAll(FOCUSABLES)];\n    }\n\n    focusFirstFocusable() {\n      for (let i = 0; i < this.potentiallyFocusableEls.length; i++) {\n        this.firstFocusableEl = this.focusElement(this.potentiallyFocusableEls[i]);\n\n        if (this.firstFocusableEl) {\n          break;\n        }\n      }\n    }\n\n    focusLastFocusable() {\n      for (let i = this.potentiallyFocusableEls.length - 1; i >= 0; i--) {\n        this.lastFocusableEl = this.focusElement(this.potentiallyFocusableEls[i]);\n\n        if (this.lastFocusableEl) {\n          break;\n        }\n      }\n    }\n\n    focusTrapElIfOutside() {\n      if (!this.el.nativeElement.contains(document.activeElement)) {\n        this.el.nativeElement.focus();\n      }\n    }\n\n    focusElement(el) {\n      if (el && el.focus) {\n        el.focus();\n\n        if (document.activeElement === el) {\n          return el;\n        }\n      }\n\n      return null;\n    }\n\n    ngOnDestroy() {\n      this.removeReboundEls();\n      this.setPreviousFocus();\n      this.focusTrapsTracker.activatePreviousTrapper();\n    }\n\n  }\n\n  FocusTrapDirective.ɵfac = function FocusTrapDirective_Factory(t) {\n    return new (t || FocusTrapDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector), ɵngcc0.ɵɵdirectiveInject(FocusTrapTracker), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID));\n  };\n\n  FocusTrapDirective.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: FocusTrapDirective,\n    selectors: [[\"\", \"clrFocusTrap\", \"\"]],\n    hostBindings: function FocusTrapDirective_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focusin\", function FocusTrapDirective_focusin_HostBindingHandler($event) {\n          return ctx.onFocusIn($event);\n        }, false, ɵngcc0.ɵɵresolveDocument);\n      }\n    },\n    inputs: {\n      config: [\"clrFocusTrap\", \"config\"]\n    }\n  });\n  return FocusTrapDirective;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nconst FOCUS_TRAP_DIRECTIVES = [FocusTrapDirective];\nlet ClrFocusTrapModule = /*#__PURE__*/(() => {\n  class ClrFocusTrapModule {}\n\n  ClrFocusTrapModule.ɵfac = function ClrFocusTrapModule_Factory(t) {\n    return new (t || ClrFocusTrapModule)();\n  };\n\n  ClrFocusTrapModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: ClrFocusTrapModule\n  });\n  ClrFocusTrapModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule]]\n  });\n  return ClrFocusTrapModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ClrFocusTrapModule, {\n    declarations: function () {\n      return [FocusTrapDirective];\n    },\n    imports: function () {\n      return [CommonModule];\n    },\n    exports: function () {\n      return [FocusTrapDirective];\n    }\n  });\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/**\n * This is the en-001 short locale date format. Setting as default.\n */\n\n\nconst DEFAULT_LOCALE_FORMAT = 'dd/MM/y'; // https://en.wikipedia.org/wiki/Date_format_by_country\n\nconst LITTLE_ENDIAN_REGEX = /d+.+m+.+y+/i;\nconst MIDDLE_ENDIAN_REGEX = /m+.+d+.+y+/i; // No need for BIG_ENDIAN_REGEX because anything that doesn't satisfy the above 2\n// is automatically BIG_ENDIAN\n\nconst DELIMITER_REGEX = /d+|m+|y+/i;\nconst USER_INPUT_REGEX = /\\d+/g;\nconst MOBILE_USERAGENT_REGEX = /Mobi/i;\nconst RTL_REGEX = /\\u200f/g;\nconst YEAR = 'YYYY';\nconst MONTH = 'MM';\nconst DATE = 'DD';\nconst LITTLE_ENDIAN = {\n  name: 'LITTLE_ENDIAN',\n  format: [DATE, MONTH, YEAR]\n};\nconst MIDDLE_ENDIAN = {\n  name: 'MIDDLE_ENDIAN',\n  format: [MONTH, DATE, YEAR]\n};\nconst BIG_ENDIAN = {\n  name: 'BIG_ENDIAN',\n  format: [YEAR, MONTH, DATE]\n};\nconst NO_OF_DAYS_IN_A_WEEK = 7;\nconst NO_OF_ROWS_IN_CALENDAR_VIEW = 6;\nconst TOTAL_DAYS_IN_DAYS_VIEW = NO_OF_DAYS_IN_A_WEEK * NO_OF_ROWS_IN_CALENDAR_VIEW;\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/**\n * Returns the number of days in a month.\n */\n\nfunction getNumberOfDaysInTheMonth(year, month) {\n  // If we go to the next month, but use a day of 0, it returns the last day from the previous month\n  return new Date(year, month + 1, 0).getDate();\n}\n/**\n * Returns the day for the corresponding date where 0 represents Sunday.\n */\n\n\nfunction getDay(year, month, date) {\n  return new Date(year, month, date).getDay();\n}\n/**\n * Takes in a year and if it is a 2 digit year, returns the corresponding 4 digit year.\n * Window of 80 years before and 20 years after the present year.\n * Credit: https://github.com/globalizejs/globalize/blob/e1b31cd6a4f1cff75b185b68b7a32220aac5196f/src/date/parse.js\n */\n\n\nfunction parseToFourDigitYear(year) {\n  if (year > 9999 || year > 100 && year < 999 || year < 10) {\n    return -1;\n  }\n\n  if (year > 999) {\n    return year;\n  }\n\n  const currYear = new Date().getFullYear();\n  const century = Math.floor(currYear / 100) * 100;\n  let result = year + century;\n\n  if (result > currYear + 20) {\n    result = result - 100;\n  }\n\n  return result;\n}\n\nfunction datesAreEqual(date1, date2) {\n  if (date1 instanceof Date && date2 instanceof Date) {\n    return date1.getFullYear() === date2.getFullYear() && date1.getMonth() === date2.getMonth() && date1.getDate() === date2.getDate();\n  } else {\n    return false;\n  }\n}\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nclass DayViewModel {\n  constructor(dayModel, isTodaysDate = false, isExcluded = false, isDisabled = false, isSelected = false, isFocusable = false) {\n    this.dayModel = dayModel;\n    this.isTodaysDate = isTodaysDate;\n    this.isExcluded = isExcluded;\n    this.isDisabled = isDisabled;\n    this.isSelected = isSelected;\n    this.isFocusable = isFocusable;\n  }\n  /**\n   * Gets the tab index based on the isFocusable flag.\n   */\n\n\n  get tabIndex() {\n    return this.isFocusable ? 0 : -1;\n  }\n\n}\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nclass DayModel {\n  constructor(year, month, date) {\n    this.year = year;\n    this.month = month;\n    this.date = date;\n  }\n  /**\n   * Checks if the passed CalendarDate is equal to itself.\n   */\n\n\n  isEqual(day) {\n    if (day) {\n      return this.year === day.year && this.month === day.month && this.date === day.date;\n    }\n\n    return false;\n  }\n\n  toDate() {\n    return new Date(this.year, this.month, this.date);\n  }\n  /**\n   * Returns a new DayModel which is incremented based on the value passed.\n   */\n\n\n  incrementBy(value) {\n    // Creating new Javascript Date object to increment because\n    // it will automatically take care of switching to next or previous\n    // months & years without we having to worry about it.\n    const date = new Date(this.year, this.month, this.date + value);\n    return new DayModel(date.getFullYear(), date.getMonth(), date.getDate());\n  }\n  /**\n   * Clones the current day model.\n   */\n\n\n  clone() {\n    return new DayModel(this.year, this.month, this.date);\n  }\n\n  toComparisonString() {\n    return `${this.year}${this.pad(this.month)}${this.pad(this.date)}`;\n  }\n\n  pad(num) {\n    return num < 10 ? `0${num}` : `${num}`;\n  }\n\n  toDateString() {\n    return this.toDate().toLocaleDateString();\n  }\n\n}\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nclass CalendarViewModel {\n  constructor(calendar, selectedDay, focusableDay, today, firstDayOfWeek, excludedDates) {\n    this.calendar = calendar;\n    this.selectedDay = selectedDay;\n    this.focusableDay = focusableDay;\n    this.today = today;\n    this.firstDayOfWeek = firstDayOfWeek;\n    this.excludedDates = excludedDates;\n    this.currMonthDayViews = [];\n    this.initializeCalendarView();\n  }\n  /**\n   * DayViewModel matrix. Size 6x7\n   */\n\n\n  get calendarView() {\n    return this._calendarView;\n  }\n  /**\n   * Generates a 6x7 matrix of DayViewModel based on the Calendar.\n   * The 6x7 matrix is structured according to the first day of the week.\n   * 6 rows to accommodate months which might have dates spanning over 6 weeks.\n   * 7 columns because there are 7 days in a week :P :D\n   */\n\n\n  initializeCalendarView() {\n    // Generate prev and next month calendar models.\n    const prevMonthCalendar = this.calendar.previousMonth();\n    const nextMonthCalendar = this.calendar.nextMonth(); // Get no of days from prev and next months.\n\n    const daysFromPrevMonthInCalView = this.numDaysFromPrevMonthInCalView(this.calendar.year, this.calendar.month);\n    const daysFromNextMonthInCalView = TOTAL_DAYS_IN_DAYS_VIEW - (this.calendar.days.length + daysFromPrevMonthInCalView); // Generate prev, curr and next day view models\n\n    let prevMonthDayViews = [];\n    let nextMonthDayViews = [];\n\n    if (daysFromPrevMonthInCalView > 0) {\n      prevMonthDayViews = this.generateDayViewModels(prevMonthCalendar.days.slice(-1 * daysFromPrevMonthInCalView), true, false);\n    }\n\n    this.currMonthDayViews = this.generateDayViewModels(this.calendar.days, false, true);\n\n    if (daysFromNextMonthInCalView > 0) {\n      nextMonthDayViews = this.generateDayViewModels(nextMonthCalendar.days.slice(0, daysFromNextMonthInCalView), true, false);\n    } // Generate calendar view and initialize flags\n\n\n    this._calendarView = this.generateCalendarView(prevMonthDayViews, this.currMonthDayViews, nextMonthDayViews);\n    this.initializeSelectedDay();\n    this.initializeFocusableDay();\n  }\n\n  isDateExcluded(date) {\n    const {\n      minDate,\n      maxDate\n    } = this.excludedDates;\n    const from = minDate.toComparisonString();\n    const to = maxDate.toComparisonString();\n    const today = date.toComparisonString();\n    return !(today >= from && today <= to);\n  }\n  /**\n   * Generates a DayViewModel array based on the DayModel passed\n   */\n\n\n  generateDayViewModels(days, isExcluded, isCurrentCalendar) {\n    const dayViews = days.map(day => {\n      return new DayViewModel(day, false, isExcluded, this.isDateExcluded(day), false, false);\n    });\n\n    if (isCurrentCalendar && this.calendar.isDayInCalendar(this.today)) {\n      dayViews[this.today.date - 1].isTodaysDate = true;\n    }\n\n    return dayViews;\n  }\n  /**\n   * Gets the first day of the current month to figure out how many dates of previous month\n   * are needed to complete the Calendar View based on the first day of the week.\n   * eg: Assuming locale en-US, the first day of the week is Sunday,\n   * if first day of the current month lands on Wednesday, then\n   * (this.getDay function would return 3 since\n   * first day of the week is 0), we need the 3 days from the previous month.\n   */\n\n\n  numDaysFromPrevMonthInCalView(currentYear, currentMonth) {\n    const firstDayOfCurrMonth = getDay(currentYear, currentMonth, 1);\n\n    if (firstDayOfCurrMonth >= this.firstDayOfWeek) {\n      return firstDayOfCurrMonth - this.firstDayOfWeek;\n    } else {\n      return NO_OF_DAYS_IN_A_WEEK + firstDayOfCurrMonth - this.firstDayOfWeek;\n    }\n  }\n  /**\n   * Checks if the Day passed is in the CalendarView.\n   */\n\n\n  isDayInCalendarView(day) {\n    if (!this.calendar.isDayInCalendar(day)) {\n      return false;\n    }\n\n    return true;\n  }\n  /**\n   * Using the DayViewModels from the previous, current and next month, this function\n   * generates the CalendarView.\n   */\n\n\n  generateCalendarView(prev, curr, next) {\n    const combinationArr = [...prev, ...curr, ...next];\n    const calendarView = [];\n\n    for (let i = 0; i < NO_OF_ROWS_IN_CALENDAR_VIEW; i++) {\n      calendarView[i] = combinationArr.slice(i * NO_OF_DAYS_IN_A_WEEK, (i + 1) * NO_OF_DAYS_IN_A_WEEK);\n    }\n\n    return calendarView;\n  }\n  /**\n   * Initialize the selected day if the day is in the calendar.\n   */\n\n\n  initializeSelectedDay() {\n    if (this.selectedDay && this.isDayInCalendarView(this.selectedDay)) {\n      this.currMonthDayViews[this.selectedDay.date - 1].isSelected = true;\n    }\n  }\n  /**\n   * Initializes the focusable day if the day is in the calendar. If focusable day is not set, then\n   * we check for the selected day. If selected day is not set then check if today is in the current\n   * calendar. If not then just set the 15th of the current calendar month.\n   */\n\n\n  initializeFocusableDay() {\n    if (this.focusableDay && this.isDayInCalendarView(this.focusableDay)) {\n      this.setFocusableFlag(this.focusableDay, true);\n    } else if (this.selectedDay && this.isDayInCalendarView(this.selectedDay)) {\n      this.setFocusableFlag(this.selectedDay, true);\n      this.focusableDay = this.selectedDay.clone();\n    } else if (this.isDayInCalendarView(this.today)) {\n      this.setFocusableFlag(this.today, true);\n      this.focusableDay = this.today.clone();\n    } else {\n      this.focusableDay = new DayModel(this.calendar.year, this.calendar.month, 15);\n      this.setFocusableFlag(this.focusableDay, true);\n    }\n  }\n\n  setFocusableFlag(day, flag) {\n    if (day) {\n      this.currMonthDayViews[day.date - 1].isFocusable = flag;\n    }\n  }\n  /**\n   * Updates the focusable day in the calendar.\n   */\n\n\n  updateFocusableDay(day) {\n    this.setFocusableFlag(this.focusableDay, false);\n    this.setFocusableFlag(day, true);\n    this.focusableDay = day;\n  }\n\n}\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/**\n * This service extracts the Angular CLDR data needed by the datepicker.\n */\n\n\nlet LocaleHelperService = /*#__PURE__*/(() => {\n  class LocaleHelperService {\n    constructor(locale) {\n      this.locale = locale;\n      this._firstDayOfWeek = 0;\n      this.initializeLocaleData();\n    }\n\n    get firstDayOfWeek() {\n      return this._firstDayOfWeek;\n    }\n\n    get localeDays() {\n      return this._localeDays;\n    } // leave for backward compatibility\n\n\n    get localeDaysNarrow() {\n      return this._localeDays.map(day => day.narrow);\n    }\n\n    get localeMonthsAbbreviated() {\n      return this._localeMonthsAbbreviated;\n    }\n\n    get localeMonthsWide() {\n      return this._localeMonthsWide;\n    }\n\n    get localeDateFormat() {\n      return this._localeDateFormat;\n    }\n    /**\n     * Initializes the locale data.\n     */\n\n\n    initializeLocaleData() {\n      // Order in which these functions is called is very important.\n      this.initializeFirstDayOfWeek();\n      this.initializeLocaleDateFormat();\n      this.initializeLocaleMonthsAbbreviated();\n      this.initializeLocaleMonthsWide();\n      this.initializeLocaleDays();\n    }\n    /**\n     * Initialize day names based on the locale.\n     * eg: [{day: Sunday, narrow: S}, {day: Monday, narrow: M}...] for en-US.\n     */\n\n\n    initializeLocaleDays() {\n      // Get locale day names starting with Sunday\n      const tempArr = [];\n      const tempWideArr = getLocaleDayNames(this.locale, FormStyle.Standalone, TranslationWidth.Wide).slice();\n      const tempNarrowArr = getLocaleDayNames(this.locale, FormStyle.Standalone, TranslationWidth.Narrow).slice(); // Get first day of the week based on the locale\n\n      const firstDayOfWeek = this.firstDayOfWeek;\n\n      for (let i = 0; i < 7; i++) {\n        tempArr.push({\n          day: tempWideArr[i],\n          narrow: tempNarrowArr[i]\n        });\n      } // Rearrange the tempArr to start with the first day of the week based on the locale.\n\n\n      if (firstDayOfWeek > 0) {\n        const prevDays = tempArr.splice(0, firstDayOfWeek);\n        tempArr.push(...prevDays);\n      }\n\n      this._localeDays = tempArr;\n    }\n    /**\n     * Initializes the array of month names in the TranslationWidth.Abbreviated format.\n     * e.g. `[Jan, Feb, ...]` for en-US\n     */\n\n\n    initializeLocaleMonthsAbbreviated() {\n      this._localeMonthsAbbreviated = getLocaleMonthNames(this.locale, FormStyle.Standalone, TranslationWidth.Abbreviated).slice();\n    }\n    /**\n     * Initializes the array of month names in the TranslationWidth.Wide format.\n     * e.g. `[January, February, ...]` for en-US\n     */\n\n\n    initializeLocaleMonthsWide() {\n      this._localeMonthsWide = getLocaleMonthNames(this.locale, FormStyle.Standalone, TranslationWidth.Wide).slice();\n    }\n    /**\n     * Initializes the first day of the week based on the locale.\n     */\n\n\n    initializeFirstDayOfWeek() {\n      this._firstDayOfWeek = getLocaleFirstDayOfWeek(this.locale);\n    }\n\n    initializeLocaleDateFormat() {\n      this._localeDateFormat = getLocaleDateFormat(this.locale, FormatWidth.Short);\n    }\n\n  }\n\n  LocaleHelperService.ɵfac = function LocaleHelperService_Factory(t) {\n    return new (t || LocaleHelperService)(ɵngcc0.ɵɵinject(LOCALE_ID));\n  };\n\n  LocaleHelperService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: LocaleHelperService,\n    factory: LocaleHelperService.ɵfac\n  });\n  return LocaleHelperService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet DateIOService = /*#__PURE__*/(() => {\n  class DateIOService {\n    constructor(_localeHelperService) {\n      this._localeHelperService = _localeHelperService;\n      this.disabledDates = {\n        // This is the default range. It approximates the beginning of time to the end of time.\n        // Unless a minDate or maxDate is set with the native HTML5 api the range is all dates\n        // TODO: turn this into an Array of min/max ranges that allow configuration of multiple ranges.\n        minDate: new DayModel(0, 0, 1),\n        maxDate: new DayModel(9999, 11, 31)\n      };\n      this.cldrLocaleDateFormat = DEFAULT_LOCALE_FORMAT;\n      this.localeDisplayFormat = LITTLE_ENDIAN;\n      this.delimiters = ['/', '/'];\n      this.cldrLocaleDateFormat = this._localeHelperService.localeDateFormat;\n      this.initializeLocaleDisplayFormat();\n    }\n\n    setMinDate(date) {\n      // NOTE: I'm expecting consumers to pass one of four things here:\n      //       A proper date string(2019-11-11), null, undefined or empty string ('')\n      if (!date) {\n        // attribute binding was removed, reset back to the beginning of time\n        this.disabledDates.minDate = new DayModel(0, 0, 1);\n      } else {\n        const [year, month, day] = date.split('-').map(n => parseInt(n, 10));\n        this.disabledDates.minDate = new DayModel(year, month - 1, day);\n      }\n    }\n\n    setMaxDate(date) {\n      // NOTE: I'm expecting consumers to pass one of four things here:\n      //       A proper date string(2019-11-11), null, undefined or empty string ('')\n      if (!date) {\n        // attribute binding was removed, reset forward to the end of time\n        this.disabledDates.maxDate = new DayModel(9999, 11, 31);\n      } else {\n        const [year, month, day] = date.split('-').map(n => parseInt(n, 10));\n        this.disabledDates.maxDate = new DayModel(year, month - 1, day);\n      }\n    }\n\n    initializeLocaleDisplayFormat() {\n      const format = this.cldrLocaleDateFormat.toLocaleLowerCase();\n\n      if (LITTLE_ENDIAN_REGEX.test(format)) {\n        this.localeDisplayFormat = LITTLE_ENDIAN;\n      } else if (MIDDLE_ENDIAN_REGEX.test(format)) {\n        this.localeDisplayFormat = MIDDLE_ENDIAN;\n      } else {\n        // everything else is set to BIG-ENDIAN FORMAT\n        this.localeDisplayFormat = BIG_ENDIAN;\n      }\n\n      this.extractDelimiters();\n    }\n\n    extractDelimiters() {\n      if (this.cldrLocaleDateFormat) {\n        // Sanitize Date Format. Remove RTL characters.\n        // FIXME: When we support RTL, remove this and handle it correctly.\n        const localeFormat = this.cldrLocaleDateFormat.replace(RTL_REGEX, '');\n        const delimiters = localeFormat.split(DELIMITER_REGEX); // NOTE: The split from the CLDR date format should always result\n        // in an arary with 4 elements. The 1st and the 2nd values are the delimiters\n        // we will use in order.\n        // Eg: \"dd/MM/y\".split(/d+|m+|y+/i) results in [\"\", \"/\", \"/\", \"\"]\n\n        if (delimiters && delimiters.length === 4) {\n          this.delimiters = [delimiters[1], delimiters[2]];\n        } else {\n          console.error('Unexpected date format received. Delimiters extracted: ', delimiters);\n        }\n      }\n    }\n\n    toLocaleDisplayFormatString(date) {\n      if (date) {\n        if (isNaN(date.getTime())) {\n          return '';\n        }\n\n        const dateNo = date.getDate();\n        const monthNo = date.getMonth() + 1;\n        const dateStr = dateNo > 9 ? dateNo.toString() : '0' + dateNo;\n        const monthStr = monthNo > 9 ? monthNo.toString() : '0' + monthNo;\n\n        if (this.localeDisplayFormat === LITTLE_ENDIAN) {\n          return dateStr + this.delimiters[0] + monthStr + this.delimiters[1] + date.getFullYear();\n        } else if (this.localeDisplayFormat === MIDDLE_ENDIAN) {\n          return monthStr + this.delimiters[0] + dateStr + this.delimiters[1] + date.getFullYear();\n        } else {\n          return date.getFullYear() + this.delimiters[0] + monthStr + this.delimiters[1] + dateStr;\n        }\n      }\n\n      return '';\n    }\n\n    get placeholderText() {\n      const format = this.localeDisplayFormat.format;\n      return format[0] + this.delimiters[0] + format[1] + this.delimiters[1] + format[2];\n    }\n    /**\n     * Checks if the month entered by the user is valid or not.\n     * Note: Month is 0 based.\n     */\n\n\n    isValidMonth(month) {\n      return month > -1 && month < 12;\n    }\n    /**\n     * Checks if the date is valid depending on the year and month provided.\n     */\n\n\n    isValidDate(year, month, date) {\n      return date > 0 && date <= getNumberOfDaysInTheMonth(year, month);\n    }\n    /**\n     * Validates the parameters provided and returns the date.\n     * If the parameters are not\n     * valid then return null.\n     * NOTE: (Month here is 1 based since the user has provided that as an input)\n     */\n\n\n    validateAndGetDate(year, month, date) {\n      // I don't know whats wrong with the TS compiler. It throws an error if I write\n      // the below if statement. The error is:\n      // Operator '!==' cannot be applied to types '2' and '4'\n      // More info here: https://github.com/Microsoft/TypeScript/issues/12794#issuecomment-270342936\n\n      /*\n          if (year.length !== 2 || year.length !== 4) {\n              return null;\n          }\n          */\n      // Instead I have to write the logic like this x-(\n      const y = +year;\n      const m = +month - 1; // month is 0 based\n\n      const d = +date;\n\n      if (!this.isValidMonth(m) || !this.isValidDate(y, m, d)) {\n        return null;\n      }\n\n      const result = parseToFourDigitYear(y);\n      return result !== -1 ? new Date(result, m, d) : null;\n    }\n\n    getDateValueFromDateString(date) {\n      if (!date) {\n        return null;\n      }\n\n      const dateParts = date.match(USER_INPUT_REGEX);\n\n      if (!dateParts || dateParts.length !== 3) {\n        return null;\n      }\n\n      const [firstPart, secondPart, thirdPart] = dateParts;\n\n      if (this.localeDisplayFormat === LITTLE_ENDIAN) {\n        // secondPart is month && firstPart is date\n        return this.validateAndGetDate(thirdPart, secondPart, firstPart);\n      } else if (this.localeDisplayFormat === MIDDLE_ENDIAN) {\n        // firstPart is month && secondPart is date\n        return this.validateAndGetDate(thirdPart, firstPart, secondPart);\n      } else {\n        // secondPart is month && thirdPart is date\n        return this.validateAndGetDate(firstPart, secondPart, thirdPart);\n      }\n    }\n\n  }\n\n  DateIOService.ɵfac = function DateIOService_Factory(t) {\n    return new (t || DateIOService)(ɵngcc0.ɵɵinject(LocaleHelperService));\n  };\n\n  DateIOService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: DateIOService,\n    factory: DateIOService.ɵfac\n  });\n  return DateIOService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nclass CalendarModel {\n  constructor(year, month) {\n    this.year = year;\n    this.month = month;\n    this.initializeDaysInCalendar();\n  }\n  /**\n   * Populates the days array with the DayModels in the current Calendar.\n   */\n\n\n  initializeDaysInCalendar() {\n    const noOfDaysInCalendar = getNumberOfDaysInTheMonth(this.year, this.month);\n    this.days = Array(noOfDaysInCalendar).fill(null).map((_date, index) => {\n      return new DayModel(this.year, this.month, index + 1);\n    });\n  }\n  /**\n   * Checks if the calendar passed is equal to the current calendar.\n   */\n\n\n  isEqual(calendar) {\n    if (calendar) {\n      return this.year === calendar.year && this.month === calendar.month;\n    }\n\n    return false;\n  }\n  /**\n   * Checks if a DayModel is in the Calendar\n   */\n\n\n  isDayInCalendar(day) {\n    if (day) {\n      return this.year === day.year && this.month === day.month;\n    }\n\n    return false;\n  }\n  /**\n   * Returns CalendarModel of the previous month.\n   */\n\n\n  previousMonth() {\n    if (this.month === 0) {\n      return new CalendarModel(this.year - 1, 11);\n    } else {\n      return new CalendarModel(this.year, this.month - 1);\n    }\n  }\n  /**\n   * Returns CalendarModel of the next month.\n   */\n\n\n  nextMonth() {\n    if (this.month === 11) {\n      return new CalendarModel(this.year + 1, 0);\n    } else {\n      return new CalendarModel(this.year, this.month + 1);\n    }\n  }\n\n}\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/**\n * This service is responsible for:\n * 1. Initializing the displayed calendar.\n * 2. Moving the calendar to the next, previous or current months\n * 3. Managing the focused and selected day models.\n */\n\n\nlet DateNavigationService = /*#__PURE__*/(() => {\n  class DateNavigationService {\n    constructor() {\n      /**\n       * Variable to store today's date.\n       */\n      this._todaysFullDate = new Date();\n      this._selectedDayChange = new Subject();\n      this._displayedCalendarChange = new Subject();\n      this._focusOnCalendarChange = new Subject();\n      this._focusedDayChange = new Subject();\n    }\n\n    get displayedCalendar() {\n      return this._displayedCalendar;\n    } // not a setter because i want this to remain private\n\n\n    setDisplayedCalendar(value) {\n      if (!this._displayedCalendar.isEqual(value)) {\n        this._displayedCalendar = value;\n\n        this._displayedCalendarChange.next();\n      }\n    }\n\n    initializeTodaysDate() {\n      this._todaysFullDate = new Date();\n      this._today = new DayModel(this._todaysFullDate.getFullYear(), this._todaysFullDate.getMonth(), this._todaysFullDate.getDate());\n    }\n\n    get today() {\n      return this._today;\n    }\n\n    get selectedDayChange() {\n      return this._selectedDayChange.asObservable();\n    }\n    /**\n     * Notifies that the selected day has changed so that the date can be emitted to the user.\n     * Note: Only to be called from day.ts\n     */\n\n\n    notifySelectedDayChanged(dayModel) {\n      this.selectedDay = dayModel;\n\n      this._selectedDayChange.next(dayModel);\n    }\n    /**\n     * Initializes the calendar based on the selected day.\n     */\n\n\n    initializeCalendar() {\n      this.focusedDay = null; // Can be removed later on the store focus\n\n      this.initializeTodaysDate();\n\n      if (this.selectedDay) {\n        this._displayedCalendar = new CalendarModel(this.selectedDay.year, this.selectedDay.month);\n      } else {\n        this._displayedCalendar = new CalendarModel(this.today.year, this.today.month);\n      }\n    }\n\n    changeMonth(month) {\n      this.setDisplayedCalendar(new CalendarModel(this._displayedCalendar.year, month));\n    }\n\n    changeYear(year) {\n      this.setDisplayedCalendar(new CalendarModel(year, this._displayedCalendar.month));\n    }\n    /**\n     * Moves the displayed calendar to the next month.\n     */\n\n\n    moveToNextMonth() {\n      this.setDisplayedCalendar(this._displayedCalendar.nextMonth());\n    }\n    /**\n     * Moves the displayed calendar to the previous month.\n     */\n\n\n    moveToPreviousMonth() {\n      this.setDisplayedCalendar(this._displayedCalendar.previousMonth());\n    }\n    /**\n     * Moves the displayed calendar to the current month and year.\n     */\n\n\n    moveToCurrentMonth() {\n      if (!this.displayedCalendar.isDayInCalendar(this.today)) {\n        this.setDisplayedCalendar(new CalendarModel(this.today.year, this.today.month));\n      }\n\n      this._focusOnCalendarChange.next();\n    }\n\n    incrementFocusDay(value) {\n      this.focusedDay = this.focusedDay.incrementBy(value);\n\n      if (this._displayedCalendar.isDayInCalendar(this.focusedDay)) {\n        this._focusedDayChange.next(this.focusedDay);\n      } else {\n        this.setDisplayedCalendar(new CalendarModel(this.focusedDay.year, this.focusedDay.month));\n      }\n\n      this._focusOnCalendarChange.next();\n    }\n    /**\n     * This observable lets the subscriber know that the displayed calendar has changed.\n     */\n\n\n    get displayedCalendarChange() {\n      return this._displayedCalendarChange.asObservable();\n    }\n    /**\n     * This observable lets the subscriber know that the focus should be applied on the calendar.\n     */\n\n\n    get focusOnCalendarChange() {\n      return this._focusOnCalendarChange.asObservable();\n    }\n    /**\n     * This observable lets the subscriber know that the focused day in the displayed calendar has changed.\n     */\n\n\n    get focusedDayChange() {\n      return this._focusedDayChange.asObservable();\n    }\n\n  }\n\n  DateNavigationService.ɵfac = function DateNavigationService_Factory(t) {\n    return new (t || DateNavigationService)();\n  };\n\n  DateNavigationService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: DateNavigationService,\n    factory: DateNavigationService.ɵfac\n  });\n  return DateNavigationService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/**\n * This service focuses the day that is focusable in the calendar.\n */\n\n\nlet DatepickerFocusService = /*#__PURE__*/(() => {\n  class DatepickerFocusService {\n    constructor(_ngZone, platformId) {\n      this._ngZone = _ngZone;\n      this.platformId = platformId;\n    }\n\n    focusCell(elRef) {\n      this._ngZone.runOutsideAngular(() => {\n        this.ngZoneIsStableInBrowser().subscribe(() => {\n          const focusEl = elRef.nativeElement.querySelector('[tabindex=\"0\"]');\n\n          if (focusEl) {\n            focusEl.focus();\n          }\n        });\n      });\n    }\n\n    focusInput(element) {\n      this._ngZone.runOutsideAngular(() => this.ngZoneIsStableInBrowser().subscribe(() => element.focus()));\n    }\n\n    elementIsFocused(element) {\n      return isPlatformBrowser(this.platformId) && document.activeElement === element;\n    }\n\n    ngZoneIsStableInBrowser() {\n      // Credit: Material: https://github.com/angular/material2/blob/master/src/lib/datepicker/calendar.ts\n      return this._ngZone.onStable.asObservable().pipe(first(), filter(() => isPlatformBrowser(this.platformId)));\n    }\n\n  }\n\n  DatepickerFocusService.ɵfac = function DatepickerFocusService_Factory(t) {\n    return new (t || DatepickerFocusService)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(PLATFORM_ID));\n  };\n\n  DatepickerFocusService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: DatepickerFocusService,\n    factory: DatepickerFocusService.ɵfac\n  });\n  return DatepickerFocusService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrCalendar = /*#__PURE__*/(() => {\n  class ClrCalendar {\n    constructor(_localeHelperService, _dateNavigationService, _datepickerFocusService, _dateIOService, _elRef) {\n      this._localeHelperService = _localeHelperService;\n      this._dateNavigationService = _dateNavigationService;\n      this._datepickerFocusService = _datepickerFocusService;\n      this._dateIOService = _dateIOService;\n      this._elRef = _elRef;\n      this._subs = [];\n      this.generateCalendarView();\n      this.initializeSubscriptions();\n    }\n    /**\n     * Gets the locale days according to the TranslationWidth.Narrow format.\n     */\n\n\n    get localeDays() {\n      return this._localeHelperService.localeDays;\n    }\n\n    get calendar() {\n      return this._dateNavigationService.displayedCalendar;\n    }\n\n    get selectedDay() {\n      return this._dateNavigationService.selectedDay;\n    }\n\n    get focusedDay() {\n      return this._dateNavigationService.focusedDay;\n    }\n\n    get today() {\n      return this._dateNavigationService.today;\n    }\n    /**\n     * Initialize subscriptions to:\n     * 1. update the calendar view model.\n     * 2. update the focusable day in the calendar view model.\n     * 3. focus on the focusable day in the calendar.\n     */\n\n\n    initializeSubscriptions() {\n      this._subs.push(this._dateNavigationService.displayedCalendarChange.subscribe(() => {\n        this.generateCalendarView();\n      }));\n\n      this._subs.push(this._dateNavigationService.focusedDayChange.subscribe(focusedDay => {\n        this.calendarViewModel.updateFocusableDay(focusedDay);\n      }));\n\n      this._subs.push(this._dateNavigationService.focusOnCalendarChange.subscribe(() => {\n        this._datepickerFocusService.focusCell(this._elRef);\n      }));\n    }\n    /**\n     * Generates the Calendar View based on the calendar retrieved from the DateNavigationService.\n     */\n\n\n    generateCalendarView() {\n      this.calendarViewModel = new CalendarViewModel(this.calendar, this.selectedDay, this.focusedDay, this.today, this._localeHelperService.firstDayOfWeek, this._dateIOService.disabledDates);\n    }\n    /**\n     * Delegates Keyboard arrow navigation to the DateNavigationService.\n     */\n\n\n    onKeyDown(event) {\n      if (event && this.focusedDay) {\n        switch (event.keyCode) {\n          case UP_ARROW:\n            event.preventDefault();\n\n            this._dateNavigationService.incrementFocusDay(-1 * NO_OF_DAYS_IN_A_WEEK);\n\n            break;\n\n          case DOWN_ARROW:\n            event.preventDefault();\n\n            this._dateNavigationService.incrementFocusDay(NO_OF_DAYS_IN_A_WEEK);\n\n            break;\n\n          case LEFT_ARROW:\n            event.preventDefault();\n\n            this._dateNavigationService.incrementFocusDay(-1);\n\n            break;\n\n          case RIGHT_ARROW:\n            event.preventDefault();\n\n            this._dateNavigationService.incrementFocusDay(1);\n\n            break;\n\n          default:\n            break;\n          // No default case. ESLint x-(\n        }\n      }\n    }\n    /**\n     * Focuses on the focusable day when the Calendar View is initialized.\n     */\n\n\n    ngAfterViewInit() {\n      this._datepickerFocusService.focusCell(this._elRef);\n    }\n    /**\n     * Unsubscribe from subscriptions.\n     */\n\n\n    ngOnDestroy() {\n      this._subs.forEach(sub => sub.unsubscribe());\n    }\n\n  }\n\n  ClrCalendar.ɵfac = function ClrCalendar_Factory(t) {\n    return new (t || ClrCalendar)(ɵngcc0.ɵɵdirectiveInject(LocaleHelperService), ɵngcc0.ɵɵdirectiveInject(DateNavigationService), ɵngcc0.ɵɵdirectiveInject(DatepickerFocusService), ɵngcc0.ɵɵdirectiveInject(DateIOService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  ClrCalendar.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ClrCalendar,\n    selectors: [[\"clr-calendar\"]],\n    hostBindings: function ClrCalendar_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"keydown\", function ClrCalendar_keydown_HostBindingHandler($event) {\n          return ctx.onKeyDown($event);\n        });\n      }\n    },\n    decls: 4,\n    vars: 2,\n    consts: [[1, \"calendar-table\"], [1, \"calendar-row\", \"weekdays\"], [\"class\", \"calendar-cell weekday\", \"role\", \"heading\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"calendar-row\", 4, \"ngFor\", \"ngForOf\"], [\"role\", \"heading\", 1, \"calendar-cell\", \"weekday\"], [1, \"calendar-row\"], [\"class\", \"calendar-cell\", 4, \"ngFor\", \"ngForOf\"], [1, \"calendar-cell\"], [3, \"clrDayView\"]],\n    template: function ClrCalendar_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"table\", 0);\n        ɵngcc0.ɵɵelementStart(1, \"tr\", 1);\n        ɵngcc0.ɵɵtemplate(2, ClrCalendar_th_2_Template, 2, 2, \"th\", 2);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(3, ClrCalendar_tr_3_Template, 2, 1, \"tr\", 3);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.localeDays);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.calendarViewModel.calendarView);\n      }\n    },\n    directives: function () {\n      return [ɵngcc1.NgForOf, ClrDay];\n    },\n    encapsulation: 2\n  });\n  return ClrCalendar;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet DateFormControlService = /*#__PURE__*/(() => {\n  class DateFormControlService {\n    constructor() {\n      this._touchedChange = new Subject();\n      this._dirtyChange = new Subject();\n    }\n\n    get touchedChange() {\n      return this._touchedChange.asObservable();\n    }\n\n    get dirtyChange() {\n      return this._dirtyChange.asObservable();\n    }\n\n    markAsTouched() {\n      this._touchedChange.next();\n    }\n\n    markAsDirty() {\n      this._dirtyChange.next();\n    } // friendly wrapper\n\n\n    setDisabled(state) {\n      this.disabled = state;\n    }\n\n  }\n\n  DateFormControlService.ɵfac = function DateFormControlService_Factory(t) {\n    return new (t || DateFormControlService)();\n  };\n\n  DateFormControlService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: DateFormControlService,\n    factory: DateFormControlService.ɵfac\n  });\n  return DateFormControlService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/**\n * TODO:\n * Using core functions like:\n * - pluckPixelValue\n * - getCssPropertyValue\n *\n * to get the value of the design token.\n *\n * Note: Memoization/Cache usage possible.\n */\n// iPad mini screen width\n// http://stephen.io/mediaqueries/#iPadMini\n\n\nconst DATEPICKER_ENABLE_BREAKPOINT = 768;\nconst SMALL_BREAKPOINT = 576;\nconst MEDIUM_BREAKPOINT = 768;\nconst LARGE_BREAKPOINT = 992;\nconst EXTRA_LARGE_BREAKPOINT = 1200;\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nlet DatepickerEnabledService = /*#__PURE__*/(() => {\n  class DatepickerEnabledService {\n    constructor(_document) {\n      this._document = _document;\n      this._isUserAgentMobile = false;\n\n      if (this._document) {\n        this._isUserAgentMobile = MOBILE_USERAGENT_REGEX.test(_document.defaultView.navigator.userAgent);\n        this._innerWidth = _document.defaultView.innerWidth;\n      }\n    }\n    /**\n     * Returns if the calendar should be active or not.\n     * If the user agent is mobile and the screen width is less than DATEPICKER_ACTIVE_BREAKPOINT\n     * then the calendar is inactive.\n     */\n\n\n    get isEnabled() {\n      // https://developer.mozilla.org/en-US/docs/Web/HTTP/Browser_detection_using_the_user_agent\n      // What they recommend is:\n      //\"In summary, we recommend looking for the string 'Mobi'\n      // anywhere in the User Agent to detect a mobile device.\"\n      if (this._document) {\n        if (this._innerWidth < DATEPICKER_ENABLE_BREAKPOINT && this._isUserAgentMobile) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n  }\n\n  DatepickerEnabledService.ɵfac = function DatepickerEnabledService_Factory(t) {\n    return new (t || DatepickerEnabledService)(ɵngcc0.ɵɵinject(DOCUMENT));\n  };\n\n  DatepickerEnabledService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: DatepickerEnabledService,\n    factory: DatepickerEnabledService.ɵfac\n  });\n  return DatepickerEnabledService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/**\n * This service manages which view is visible in the datepicker popover.\n */\n\n\nlet ViewManagerService = /*#__PURE__*/(() => {\n  class ViewManagerService {\n    constructor() {\n      this._currentView = \"DAYVIEW\"\n      /* DAYVIEW */\n      ;\n      this.position = ClrPopoverPositions['bottom-left'];\n    }\n\n    get isDayView() {\n      return this._currentView === \"DAYVIEW\"\n      /* DAYVIEW */\n      ;\n    }\n\n    get isYearView() {\n      return this._currentView === \"YEARVIEW\"\n      /* YEARVIEW */\n      ;\n    }\n\n    get isMonthView() {\n      return this._currentView === \"MONTHVIEW\"\n      /* MONTHVIEW */\n      ;\n    }\n\n    changeToMonthView() {\n      this._currentView = \"MONTHVIEW\"\n      /* MONTHVIEW */\n      ;\n    }\n\n    changeToYearView() {\n      this._currentView = \"YEARVIEW\"\n      /* YEARVIEW */\n      ;\n    }\n\n    changeToDayView() {\n      this._currentView = \"DAYVIEW\"\n      /* DAYVIEW */\n      ;\n    }\n\n  }\n\n  ViewManagerService.ɵfac = function ViewManagerService_Factory(t) {\n    return new (t || ViewManagerService)();\n  };\n\n  ViewManagerService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: ViewManagerService,\n    factory: ViewManagerService.ɵfac\n  });\n  return ViewManagerService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrDateContainer = /*#__PURE__*/(() => {\n  class ClrDateContainer extends ClrAbstractContainer {\n    constructor(renderer, toggleService, dateNavigationService, datepickerEnabledService, dateFormControlService, dateIOService, commonStrings, focusService, viewManagerService, controlClassService, layoutService, ngControlService, ifControlStateService) {\n      super(ifControlStateService, layoutService, controlClassService, ngControlService);\n      this.renderer = renderer;\n      this.toggleService = toggleService;\n      this.dateNavigationService = dateNavigationService;\n      this.datepickerEnabledService = datepickerEnabledService;\n      this.dateFormControlService = dateFormControlService;\n      this.dateIOService = dateIOService;\n      this.commonStrings = commonStrings;\n      this.focusService = focusService;\n      this.viewManagerService = viewManagerService;\n      this.controlClassService = controlClassService;\n      this.layoutService = layoutService;\n      this.ngControlService = ngControlService;\n      this.ifControlStateService = ifControlStateService;\n      this.focus = false;\n      this.subscriptions.push(this.focusService.focusChange.subscribe(state => {\n        this.focus = state;\n      }));\n      this.subscriptions.push(this.toggleService.openChange.subscribe(() => {\n        this.dateFormControlService.markAsTouched();\n      }));\n    }\n\n    set clrPosition(position) {\n      if (position && ClrPopoverPositions[position]) {\n        this.viewManagerService.position = ClrPopoverPositions[position];\n      }\n    }\n\n    get popoverPosition() {\n      return this.viewManagerService.position;\n    }\n\n    get open() {\n      return this.toggleService.open;\n    }\n\n    set actionButton(button) {\n      this.toggleButton = button;\n    }\n\n    ngAfterViewInit() {\n      this.subscriptions.push(this.toggleService.openChange.subscribe(open => {\n        if (open) {\n          this.initializeCalendar();\n        } else {\n          this.toggleButton.nativeElement.focus();\n        }\n      }));\n      this.subscriptions.push(this.listenForDateChanges());\n    }\n    /**\n     * Returns if the Datepicker is enabled or not. If disabled, hides the datepicker trigger.\n     */\n\n\n    get isEnabled() {\n      return this.datepickerEnabledService.isEnabled;\n    }\n    /**\n     * Return if Datepicker is diabled or not as Form Control\n     */\n\n\n    get isInputDateDisabled() {\n      /* clrForm wrapper or without clrForm */\n      return this.control && this.control.disabled || this.dateFormControlService && this.dateFormControlService.disabled;\n    }\n    /**\n     * Return the label for the toggle button.\n     * If there's a selected date, the date is included in the label.\n     */\n\n\n    getToggleButtonLabel(day) {\n      if (day) {\n        const formattedDate = this.dateIOService.toLocaleDisplayFormatString(day.toDate());\n        return this.commonStrings.parse(this.commonStrings.keys.datepickerToggleChangeDateLabel, {\n          SELECTED_DATE: formattedDate\n        }) || this.commonStrings.keys.datepickerToggle;\n      }\n\n      return this.commonStrings.keys.datepickerToggleChooseDateLabel || this.commonStrings.keys.datepickerToggle;\n    }\n\n    listenForDateChanges() {\n      // because date-input.ts initializes the input in ngAfterViewInit,\n      // using a databound attribute to change the button labels results in ExpressionChangedAfterItHasBeenCheckedError.\n      // so instead, update the attribute directly on the element\n      return this.dateNavigationService.selectedDayChange.pipe(startWith(this.dateNavigationService.selectedDay)).subscribe(day => {\n        const label = this.getToggleButtonLabel(day);\n        const toggleEl = this.toggleButton.nativeElement;\n        this.renderer.setAttribute(toggleEl, 'aria-label', label);\n        this.renderer.setAttribute(toggleEl, 'title', label);\n      });\n    }\n    /**\n     * Processes the user input and Initializes the Calendar everytime the datepicker popover is open.\n     */\n\n\n    initializeCalendar() {\n      this.dateNavigationService.initializeCalendar();\n    }\n\n  }\n\n  ClrDateContainer.ɵfac = function ClrDateContainer_Factory(t) {\n    return new (t || ClrDateContainer)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ClrPopoverToggleService), ɵngcc0.ɵɵdirectiveInject(DateNavigationService), ɵngcc0.ɵɵdirectiveInject(DatepickerEnabledService), ɵngcc0.ɵɵdirectiveInject(DateFormControlService), ɵngcc0.ɵɵdirectiveInject(DateIOService), ɵngcc0.ɵɵdirectiveInject(ClrCommonStringsService), ɵngcc0.ɵɵdirectiveInject(FocusService), ɵngcc0.ɵɵdirectiveInject(ViewManagerService), ɵngcc0.ɵɵdirectiveInject(ControlClassService), ɵngcc0.ɵɵdirectiveInject(LayoutService, 8), ɵngcc0.ɵɵdirectiveInject(NgControlService), ɵngcc0.ɵɵdirectiveInject(IfControlStateService));\n  };\n\n  ClrDateContainer.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ClrDateContainer,\n    selectors: [[\"clr-date-container\"]],\n    viewQuery: function ClrDateContainer_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c25, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.actionButton = _t.first);\n      }\n    },\n    hostVars: 8,\n    hostBindings: function ClrDateContainer_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"clr-date-container\", true)(\"clr-form-control-disabled\", ctx.isInputDateDisabled)(\"clr-form-control\", true)(\"clr-row\", ctx.addGrid());\n      }\n    },\n    inputs: {\n      clrPosition: \"clrPosition\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([ControlIdService, ClrPopoverToggleService, ClrPopoverEventsService, ClrPopoverPositionService, LocaleHelperService, ControlClassService, FocusService, NgControlService, DateIOService, DateNavigationService, DatepickerEnabledService, DateFormControlService, ViewManagerService, IfControlStateService]), ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c27,\n    decls: 13,\n    vars: 14,\n    consts: [[4, \"ngIf\"], [1, \"clr-control-container\", 3, \"ngClass\"], [\"clrPopoverAnchor\", \"\", 1, \"clr-input-wrapper\"], [1, \"clr-input-group\"], [\"type\", \"button\", \"clrPopoverOpenCloseButton\", \"\", \"class\", \"clr-input-group-icon-action\", 3, \"disabled\", 4, \"ngIf\"], [\"clrFocusTrap\", \"\", 4, \"clrPopoverContent\", \"clrPopoverContentAt\", \"clrPopoverContentOutsideClickToClose\", \"clrPopoverContentScrollToClose\"], [\"class\", \"clr-validate-icon\", \"status\", \"danger\", \"shape\", \"exclamation-circle\", \"aria-hidden\", \"true\", 4, \"ngIf\"], [\"class\", \"clr-validate-icon\", \"shape\", \"check-circle\", \"status\", \"success\", \"aria-hidden\", \"true\", 4, \"ngIf\"], [\"type\", \"button\", \"clrPopoverOpenCloseButton\", \"\", 1, \"clr-input-group-icon-action\", 3, \"disabled\"], [\"actionButton\", \"\"], [\"status\", \"info\", \"shape\", \"calendar\"], [\"clrFocusTrap\", \"\"], [\"status\", \"danger\", \"shape\", \"exclamation-circle\", \"aria-hidden\", \"true\", 1, \"clr-validate-icon\"], [\"shape\", \"check-circle\", \"status\", \"success\", \"aria-hidden\", \"true\", 1, \"clr-validate-icon\"]],\n    template: function ClrDateContainer_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c26);\n        ɵngcc0.ɵɵprojection(0);\n        ɵngcc0.ɵɵtemplate(1, ClrDateContainer_label_1_Template, 1, 0, \"label\", 0);\n        ɵngcc0.ɵɵelementStart(2, \"div\", 1);\n        ɵngcc0.ɵɵelementStart(3, \"div\", 2);\n        ɵngcc0.ɵɵelementStart(4, \"div\", 3);\n        ɵngcc0.ɵɵprojection(5, 1);\n        ɵngcc0.ɵɵtemplate(6, ClrDateContainer_button_6_Template, 3, 1, \"button\", 4);\n        ɵngcc0.ɵɵtemplate(7, ClrDateContainer_clr_datepicker_view_manager_7_Template, 1, 0, \"clr-datepicker-view-manager\", 5);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(8, ClrDateContainer_cds_icon_8_Template, 1, 0, \"cds-icon\", 6);\n        ɵngcc0.ɵɵtemplate(9, ClrDateContainer_cds_icon_9_Template, 1, 0, \"cds-icon\", 7);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(10, ClrDateContainer_ng_content_10_Template, 1, 0, \"ng-content\", 0);\n        ɵngcc0.ɵɵtemplate(11, ClrDateContainer_ng_content_11_Template, 1, 0, \"ng-content\", 0);\n        ɵngcc0.ɵɵtemplate(12, ClrDateContainer_ng_content_12_Template, 1, 0, \"ng-content\", 0);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.label && ctx.addGrid());\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngClass\", ctx.controlClass());\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵclassProp(\"clr-focus\", ctx.focus);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.isEnabled);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"clrPopoverContent\", ctx.open)(\"clrPopoverContentAt\", ctx.popoverPosition)(\"clrPopoverContentOutsideClickToClose\", true)(\"clrPopoverContentScrollToClose\", true);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showInvalid);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showValid);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showHelper);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showInvalid);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showValid);\n      }\n    },\n    directives: function () {\n      return [ɵngcc1.NgIf, ɵngcc1.NgClass, ClrPopoverAnchor, ClrPopoverContent, ClrLabel, ClrPopoverOpenCloseButton, CdsIconCustomTag, ClrDatepickerViewManager, FocusTrapDirective];\n    },\n    encapsulation: 2\n  });\n  return ClrDateContainer;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n// There are four ways the datepicker value is set\n// 1. Value set by user typing into text input as a string ex: '01/28/2015'\n// 2. Value set explicitly by Angular Forms APIs as a string ex: '01/28/2015'\n// 3. Value set by user via datepicker UI as a Date Object\n// 4. Value set via `clrDate` input as a Date Object\n\n\nlet ClrDateInput = /*#__PURE__*/(() => {\n  class ClrDateInput extends WrappedFormControl {\n    constructor(viewContainerRef, injector, el, renderer, control, container, dateIOService, dateNavigationService, datepickerEnabledService, dateFormControlService, platformId, focusService, datepickerFocusService) {\n      super(viewContainerRef, ClrDateContainer, injector, control, renderer, el);\n      this.el = el;\n      this.renderer = renderer;\n      this.control = control;\n      this.container = container;\n      this.dateIOService = dateIOService;\n      this.dateNavigationService = dateNavigationService;\n      this.datepickerEnabledService = datepickerEnabledService;\n      this.dateFormControlService = dateFormControlService;\n      this.platformId = platformId;\n      this.focusService = focusService;\n      this.datepickerFocusService = datepickerFocusService;\n      this.dateChange = new EventEmitter(false);\n      this.index = 1;\n    }\n\n    set date(date) {\n      if (this.previousDateChange !== date) {\n        this.updateDate(this.getValidDateValueFromDate(date));\n      }\n\n      if (!this.initialClrDateInputValue) {\n        this.initialClrDateInputValue = date;\n      }\n    }\n\n    set min(dateString) {\n      this.dateIOService.setMinDate(dateString);\n    }\n\n    set max(dateString) {\n      this.dateIOService.setMaxDate(dateString);\n    }\n\n    ngOnInit() {\n      super.ngOnInit();\n      this.populateServicesFromContainerComponent();\n      this.subscriptions.push(this.listenForUserSelectedDayChanges(), this.listenForControlValueChanges(), this.listenForTouchChanges(), this.listenForDirtyChanges(), this.listenForInputRefocus());\n    }\n\n    ngAfterViewInit() {\n      // I don't know why I have to do this but after using the new HostWrapping Module I have to delay the processing\n      // of the initial Input set by the user to here. If I do not 2 issues occur:\n      // 1. The Input setter is called before ngOnInit. ngOnInit initializes the services without which the setter fails.\n      // 2. The Renderer doesn't work before ngAfterViewInit (It used to before the new HostWrapping Module for some reason).\n      // I need the renderer to set the value property on the input to make sure that if the user has supplied a Date\n      // input object, we reflect it with the right date on the input field using the IO service. I am not sure if\n      // these are major issues or not but just noting them down here.\n      this.processInitialInputs();\n    }\n\n    setFocusStates() {\n      this.setFocus(true);\n    }\n\n    triggerValidation() {\n      super.triggerValidation();\n      this.setFocus(false);\n    }\n\n    get placeholderText() {\n      return this.placeholder ? this.placeholder : this.dateIOService.placeholderText;\n    }\n\n    get inputType() {\n      return isPlatformBrowser(this.platformId) && this.usingNativeDatepicker() ? 'date' : 'text';\n    }\n\n    onValueChange(target) {\n      const validDateValue = this.dateIOService.getDateValueFromDateString(target.value);\n\n      if (this.usingClarityDatepicker() && validDateValue) {\n        this.updateDate(validDateValue, true);\n      } else if (this.usingNativeDatepicker()) {\n        const [year, month, day] = target.value.split('-');\n        this.updateDate(new Date(+year, +month - 1, +day), true);\n      } else {\n        this.emitDateOutput(null);\n      }\n    }\n\n    set disabled(value) {\n      if (this.dateFormControlService) {\n        this.dateFormControlService.setDisabled(isBooleanAttributeSet(value));\n      }\n    }\n\n    get disabled() {\n      if (this.dateFormControlService) {\n        return this.dateFormControlService.disabled;\n      }\n\n      return null;\n    }\n\n    usingClarityDatepicker() {\n      return this.datepickerEnabledService.isEnabled;\n    }\n\n    usingNativeDatepicker() {\n      return !this.datepickerEnabledService.isEnabled;\n    }\n\n    setFocus(focus) {\n      if (this.focusService) {\n        this.focusService.focused = focus;\n      }\n    }\n\n    populateServicesFromContainerComponent() {\n      if (!this.container) {\n        this.dateIOService = this.getProviderFromContainer(DateIOService);\n        this.dateNavigationService = this.getProviderFromContainer(DateNavigationService);\n        this.datepickerEnabledService = this.getProviderFromContainer(DatepickerEnabledService);\n        this.dateFormControlService = this.getProviderFromContainer(DateFormControlService);\n      }\n    }\n\n    processInitialInputs() {\n      if (this.datepickerHasFormControl()) {\n        this.updateDate(this.dateIOService.getDateValueFromDateString(this.control.value));\n      } else {\n        this.updateDate(this.initialClrDateInputValue);\n      }\n    }\n\n    updateDate(value, setByUserInteraction = false) {\n      const date = this.getValidDateValueFromDate(value);\n\n      if (setByUserInteraction) {\n        this.emitDateOutput(date);\n      } else {\n        this.previousDateChange = date;\n      }\n\n      if (this.dateNavigationService) {\n        this.dateNavigationService.selectedDay = date ? new DayModel(date.getFullYear(), date.getMonth(), date.getDate()) : null;\n      }\n\n      this.updateInput(date);\n    }\n\n    updateInput(date) {\n      if (date) {\n        const dateString = this.dateIOService.toLocaleDisplayFormatString(date);\n\n        if (this.usingNativeDatepicker()) {\n          // valueAsDate expects UTC, date from input is time-zoned\n          date.setMinutes(date.getMinutes() - date.getTimezoneOffset());\n          this.renderer.setProperty(this.el.nativeElement, 'valueAsDate', date);\n        } else if (this.datepickerHasFormControl() && dateString !== this.control.value) {\n          this.control.control.setValue(dateString);\n        } else {\n          this.renderer.setProperty(this.el.nativeElement, 'value', dateString);\n        }\n      } else {\n        this.renderer.setProperty(this.el.nativeElement, 'value', '');\n      }\n    }\n\n    getValidDateValueFromDate(date) {\n      if (this.dateIOService) {\n        const dateString = this.dateIOService.toLocaleDisplayFormatString(date);\n        return this.dateIOService.getDateValueFromDateString(dateString);\n      } else {\n        return null;\n      }\n    }\n\n    emitDateOutput(date) {\n      if (!datesAreEqual(date, this.previousDateChange)) {\n        this.dateChange.emit(date);\n        this.previousDateChange = date;\n      } else if (!date && this.previousDateChange) {\n        this.dateChange.emit(null);\n        this.previousDateChange = null;\n      }\n    }\n\n    datepickerHasFormControl() {\n      return !!this.control;\n    }\n\n    listenForControlValueChanges() {\n      return of(this.datepickerHasFormControl()).pipe(filter(hasControl => hasControl), switchMap(() => this.control.valueChanges), // only update date value if not being set by user\n      filter(() => !this.datepickerFocusService.elementIsFocused(this.el.nativeElement))).subscribe(value => this.updateDate(this.dateIOService.getDateValueFromDateString(value)));\n    }\n\n    listenForUserSelectedDayChanges() {\n      return this.dateNavigationService.selectedDayChange.subscribe(dayModel => this.updateDate(dayModel.toDate(), true));\n    }\n\n    listenForTouchChanges() {\n      return this.dateFormControlService.touchedChange.pipe(filter(() => this.datepickerHasFormControl())).subscribe(() => this.control.control.markAsTouched());\n    }\n\n    listenForDirtyChanges() {\n      return this.dateFormControlService.dirtyChange.pipe(filter(() => this.datepickerHasFormControl())).subscribe(() => this.control.control.markAsDirty());\n    }\n\n    listenForInputRefocus() {\n      return this.dateNavigationService.selectedDayChange.pipe(filter(date => !!date)).subscribe(() => this.datepickerFocusService.focusInput(this.el.nativeElement));\n    }\n\n  }\n\n  ClrDateInput.ɵfac = function ClrDateInput_Factory(t) {\n    return new (t || ClrDateInput)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.NgControl, 10), ɵngcc0.ɵɵdirectiveInject(ClrDateContainer, 8), ɵngcc0.ɵɵdirectiveInject(DateIOService, 8), ɵngcc0.ɵɵdirectiveInject(DateNavigationService, 8), ɵngcc0.ɵɵdirectiveInject(DatepickerEnabledService, 8), ɵngcc0.ɵɵdirectiveInject(DateFormControlService, 8), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID), ɵngcc0.ɵɵdirectiveInject(FocusService, 8), ɵngcc0.ɵɵdirectiveInject(DatepickerFocusService));\n  };\n\n  ClrDateInput.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: ClrDateInput,\n    selectors: [[\"\", \"clrDate\", \"\"]],\n    hostVars: 5,\n    hostBindings: function ClrDateInput_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focus\", function ClrDateInput_focus_HostBindingHandler() {\n          return ctx.setFocusStates();\n        })(\"blur\", function ClrDateInput_blur_HostBindingHandler() {\n          return ctx.triggerValidation();\n        })(\"change\", function ClrDateInput_change_HostBindingHandler($event) {\n          return ctx.onValueChange($event.target);\n        });\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"disabled\", ctx.disabled);\n        ɵngcc0.ɵɵattribute(\"placeholder\", ctx.placeholderText)(\"type\", ctx.inputType);\n        ɵngcc0.ɵɵclassProp(\"clr-input\", true);\n      }\n    },\n    inputs: {\n      date: [\"clrDate\", \"date\"],\n      min: \"min\",\n      max: \"max\",\n      disabled: \"disabled\",\n      placeholder: \"placeholder\"\n    },\n    outputs: {\n      dateChange: \"clrDateChange\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([DatepickerFocusService]), ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  return ClrDateInput;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrDatepickerViewManager = /*#__PURE__*/(() => {\n  class ClrDatepickerViewManager {\n    constructor(commonStrings, viewManagerService) {\n      this.commonStrings = commonStrings;\n      this.viewManagerService = viewManagerService;\n    }\n    /**\n     * Returns if the current view is the monthpicker.\n     */\n\n\n    get isMonthView() {\n      return this.viewManagerService.isMonthView;\n    }\n    /**\n     * Returns if the current view is the yearpicker.\n     */\n\n\n    get isYearView() {\n      return this.viewManagerService.isYearView;\n    }\n    /**\n     * Returns if the current view is the daypicker.\n     */\n\n\n    get isDayView() {\n      return this.viewManagerService.isDayView;\n    }\n\n  }\n\n  ClrDatepickerViewManager.ɵfac = function ClrDatepickerViewManager_Factory(t) {\n    return new (t || ClrDatepickerViewManager)(ɵngcc0.ɵɵdirectiveInject(ClrCommonStringsService), ɵngcc0.ɵɵdirectiveInject(ViewManagerService));\n  };\n\n  ClrDatepickerViewManager.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ClrDatepickerViewManager,\n    selectors: [[\"clr-datepicker-view-manager\"]],\n    hostAttrs: [\"role\", \"dialog\"],\n    hostVars: 4,\n    hostBindings: function ClrDatepickerViewManager_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-modal\", true)(\"aria-label\", ctx.commonStrings.keys.datepickerDialogLabel);\n        ɵngcc0.ɵɵclassProp(\"datepicker\", true);\n      }\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([DatepickerFocusService])],\n    decls: 3,\n    vars: 3,\n    consts: [[4, \"ngIf\"]],\n    template: function ClrDatepickerViewManager_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, ClrDatepickerViewManager_clr_monthpicker_0_Template, 1, 0, \"clr-monthpicker\", 0);\n        ɵngcc0.ɵɵtemplate(1, ClrDatepickerViewManager_clr_yearpicker_1_Template, 1, 0, \"clr-yearpicker\", 0);\n        ɵngcc0.ɵɵtemplate(2, ClrDatepickerViewManager_clr_daypicker_2_Template, 1, 0, \"clr-daypicker\", 0);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.isMonthView);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.isYearView);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.isDayView);\n      }\n    },\n    directives: function () {\n      return [ɵngcc1.NgIf, ClrMonthpicker, ClrYearpicker, ClrDaypicker];\n    },\n    encapsulation: 2\n  });\n  return ClrDatepickerViewManager;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrDay = /*#__PURE__*/(() => {\n  class ClrDay {\n    constructor(_dateNavigationService, _toggleService, dateFormControlService) {\n      this._dateNavigationService = _dateNavigationService;\n      this._toggleService = _toggleService;\n      this.dateFormControlService = dateFormControlService;\n    }\n    /**\n     * DayViewModel input which is used to build the Day View.\n     */\n\n\n    set dayView(day) {\n      this._dayView = day;\n      this.dayString = this._dayView.dayModel.toDateString();\n    }\n\n    get dayView() {\n      return this._dayView;\n    }\n    /**\n     * Updates the focusedDay in the DateNavigationService when the ClrDay is focused.\n     */\n\n\n    onDayViewFocus() {\n      this._dateNavigationService.focusedDay = this.dayView.dayModel;\n    }\n    /**\n     * Updates the selectedDay when the ClrDay is selected and closes the datepicker popover.\n     */\n\n\n    selectDay() {\n      const day = this.dayView.dayModel;\n\n      this._dateNavigationService.notifySelectedDayChanged(day);\n\n      this.dateFormControlService.markAsDirty();\n      this._toggleService.open = false;\n    }\n\n  }\n\n  ClrDay.ɵfac = function ClrDay_Factory(t) {\n    return new (t || ClrDay)(ɵngcc0.ɵɵdirectiveInject(DateNavigationService), ɵngcc0.ɵɵdirectiveInject(ClrPopoverToggleService), ɵngcc0.ɵɵdirectiveInject(DateFormControlService));\n  };\n\n  ClrDay.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ClrDay,\n    selectors: [[\"clr-day\"]],\n    hostVars: 2,\n    hostBindings: function ClrDay_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"day\", true);\n      }\n    },\n    inputs: {\n      dayView: [\"clrDayView\", \"dayView\"]\n    },\n    decls: 2,\n    vars: 12,\n    consts: [[\"type\", \"button\", 1, \"day-btn\", 3, \"click\", \"focus\"]],\n    template: function ClrDay_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"button\", 0);\n        ɵngcc0.ɵɵlistener(\"click\", function ClrDay_Template_button_click_0_listener() {\n          return ctx.selectDay();\n        })(\"focus\", function ClrDay_Template_button_focus_0_listener() {\n          return ctx.onDayViewFocus();\n        });\n        ɵngcc0.ɵɵtext(1);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"is-today\", ctx.dayView.isTodaysDate)(\"is-excluded\", ctx.dayView.isExcluded)(\"is-disabled\", ctx.dayView.isDisabled)(\"is-selected\", ctx.dayView.isSelected);\n        ɵngcc0.ɵɵattribute(\"tabindex\", ctx.dayView.tabIndex)(\"aria-label\", ctx.dayString)(\"aria-selected\", ctx.dayView.isSelected);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵtextInterpolate1(\" \", ctx.dayView.dayModel.date, \" \");\n      }\n    },\n    encapsulation: 2\n  });\n  return ClrDay;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrDaypicker = /*#__PURE__*/(() => {\n  class ClrDaypicker {\n    constructor(_viewManagerService, _dateNavigationService, _localeHelperService, commonStrings) {\n      this._viewManagerService = _viewManagerService;\n      this._dateNavigationService = _dateNavigationService;\n      this._localeHelperService = _localeHelperService;\n      this.commonStrings = commonStrings;\n    }\n\n    get monthAttrString() {\n      return this.commonStrings.parse(this.commonStrings.keys.datepickerSelectMonthText, {\n        CALENDAR_MONTH: this.calendarMonth\n      });\n    }\n\n    get yearAttrString() {\n      return this.commonStrings.parse(this.commonStrings.keys.datepickerSelectYearText, {\n        CALENDAR_YEAR: this.calendarYear.toString()\n      });\n    }\n    /**\n     * Calls the ViewManagerService to change to the monthpicker view.\n     */\n\n\n    changeToMonthView() {\n      this._viewManagerService.changeToMonthView();\n    }\n    /**\n     * Calls the ViewManagerService to change to the yearpicker view.\n     */\n\n\n    changeToYearView() {\n      this._viewManagerService.changeToYearView();\n    }\n    /**\n     * Returns the month value of the calendar in the TranslationWidth.Abbreviated format.\n     */\n\n\n    get calendarMonth() {\n      return this._localeHelperService.localeMonthsAbbreviated[this._dateNavigationService.displayedCalendar.month];\n    }\n    /**\n     * Returns the year value of the calendar.\n     */\n\n\n    get calendarYear() {\n      return this._dateNavigationService.displayedCalendar.year;\n    }\n    /**\n     * Calls the DateNavigationService to move to the next month.\n     */\n\n\n    nextMonth() {\n      this._dateNavigationService.moveToNextMonth();\n    }\n    /**\n     * Calls the DateNavigationService to move to the previous month.\n     */\n\n\n    previousMonth() {\n      this._dateNavigationService.moveToPreviousMonth();\n    }\n    /**\n     * Calls the DateNavigationService to move to the current month.\n     */\n\n\n    currentMonth() {\n      this._dateNavigationService.moveToCurrentMonth();\n    }\n\n  }\n\n  ClrDaypicker.ɵfac = function ClrDaypicker_Factory(t) {\n    return new (t || ClrDaypicker)(ɵngcc0.ɵɵdirectiveInject(ViewManagerService), ɵngcc0.ɵɵdirectiveInject(DateNavigationService), ɵngcc0.ɵɵdirectiveInject(LocaleHelperService), ɵngcc0.ɵɵdirectiveInject(ClrCommonStringsService));\n  };\n\n  ClrDaypicker.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ClrDaypicker,\n    selectors: [[\"clr-daypicker\"]],\n    hostVars: 2,\n    hostBindings: function ClrDaypicker_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"daypicker\", true);\n      }\n    },\n    decls: 18,\n    vars: 13,\n    consts: [[1, \"clr-sr-only\"], [1, \"calendar-header\"], [1, \"calendar-pickers\"], [\"type\", \"button\", 1, \"calendar-btn\", \"monthpicker-trigger\", 3, \"click\"], [\"type\", \"button\", 1, \"calendar-btn\", \"yearpicker-trigger\", 3, \"click\"], [1, \"calendar-switchers\"], [\"type\", \"button\", 1, \"calendar-btn\", \"switcher\", 3, \"click\"], [\"shape\", \"angle\", \"direction\", \"left\"], [\"shape\", \"event\"], [\"shape\", \"angle\", \"direction\", \"right\"]],\n    template: function ClrDaypicker_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵtext(1);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(2, \"div\", 1);\n        ɵngcc0.ɵɵelementStart(3, \"div\", 2);\n        ɵngcc0.ɵɵelementStart(4, \"button\", 3);\n        ɵngcc0.ɵɵlistener(\"click\", function ClrDaypicker_Template_button_click_4_listener() {\n          return ctx.changeToMonthView();\n        });\n        ɵngcc0.ɵɵtext(5);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(6, \"button\", 4);\n        ɵngcc0.ɵɵlistener(\"click\", function ClrDaypicker_Template_button_click_6_listener() {\n          return ctx.changeToYearView();\n        });\n        ɵngcc0.ɵɵtext(7);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(8, \"div\", 5);\n        ɵngcc0.ɵɵelementStart(9, \"button\", 6);\n        ɵngcc0.ɵɵlistener(\"click\", function ClrDaypicker_Template_button_click_9_listener() {\n          return ctx.previousMonth();\n        });\n        ɵngcc0.ɵɵelement(10, \"cds-icon\", 7);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(11, \"button\", 6);\n        ɵngcc0.ɵɵlistener(\"click\", function ClrDaypicker_Template_button_click_11_listener() {\n          return ctx.currentMonth();\n        });\n        ɵngcc0.ɵɵelement(12, \"cds-icon\", 8);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(13, \"button\", 6);\n        ɵngcc0.ɵɵlistener(\"click\", function ClrDaypicker_Template_button_click_13_listener() {\n          return ctx.nextMonth();\n        });\n        ɵngcc0.ɵɵelement(14, \"cds-icon\", 9);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelement(15, \"clr-calendar\");\n        ɵngcc0.ɵɵelementStart(16, \"div\", 0);\n        ɵngcc0.ɵɵtext(17);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵtextInterpolate(ctx.commonStrings.keys.modalContentStart);\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵattribute(\"aria-label\", ctx.monthAttrString)(\"title\", ctx.monthAttrString);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵtextInterpolate1(\" \", ctx.calendarMonth, \" \");\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵattribute(\"aria-label\", ctx.yearAttrString)(\"title\", ctx.yearAttrString);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵtextInterpolate1(\" \", ctx.calendarYear, \" \");\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵattribute(\"aria-label\", ctx.commonStrings.keys.datepickerPreviousMonth);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵattribute(\"title\", ctx.commonStrings.keys.datepickerPreviousMonth);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵattribute(\"aria-label\", ctx.commonStrings.keys.datepickerCurrentMonth);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵattribute(\"title\", ctx.commonStrings.keys.datepickerCurrentMonth);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵattribute(\"aria-label\", ctx.commonStrings.keys.datepickerNextMonth);\n        ɵngcc0.ɵɵadvance(4);\n        ɵngcc0.ɵɵtextInterpolate(ctx.commonStrings.keys.modalContentEnd);\n      }\n    },\n    directives: [CdsIconCustomTag, ClrCalendar],\n    encapsulation: 2\n  });\n  return ClrDaypicker;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrMonthpicker = /*#__PURE__*/(() => {\n  class ClrMonthpicker {\n    constructor(_viewManagerService, _localeHelperService, _dateNavigationService, _datepickerFocusService, _elRef) {\n      this._viewManagerService = _viewManagerService;\n      this._localeHelperService = _localeHelperService;\n      this._dateNavigationService = _dateNavigationService;\n      this._datepickerFocusService = _datepickerFocusService;\n      this._elRef = _elRef;\n      this._focusedMonthIndex = this.calendarMonthIndex;\n    }\n    /**\n     * Gets the months array which is used to rendered the monthpicker view.\n     * Months are in the TranslationWidth.Wide format.\n     */\n\n\n    get monthNames() {\n      return this._localeHelperService.localeMonthsWide;\n    }\n    /**\n     * Gets the month value of the Calendar.\n     */\n\n\n    get calendarMonthIndex() {\n      return this._dateNavigationService.displayedCalendar.month;\n    }\n    /**\n     * Calls the DateNavigationService to update the month value of the calendar.\n     * Also changes the view to the daypicker.\n     */\n\n\n    changeMonth(monthIndex) {\n      this._dateNavigationService.changeMonth(monthIndex);\n\n      this._viewManagerService.changeToDayView();\n    }\n    /**\n     * Compares the month passed to the focused month and returns the tab index.\n     */\n\n\n    getTabIndex(monthIndex) {\n      return monthIndex === this._focusedMonthIndex ? 0 : -1;\n    }\n    /**\n     * Handles the Keyboard arrow navigation for the monthpicker.\n     */\n\n\n    onKeyDown(event) {\n      // NOTE: Didn't move this to the date navigation service because\n      // the logic is fairly simple and it didn't make sense for me\n      // to create extra observables just to move this logic to the service.\n      if (event) {\n        const keyCode = event.keyCode;\n\n        if (keyCode === UP_ARROW && this._focusedMonthIndex > 0) {\n          event.preventDefault();\n          this._focusedMonthIndex--;\n\n          this._datepickerFocusService.focusCell(this._elRef);\n        } else if (keyCode === DOWN_ARROW && this._focusedMonthIndex < 11) {\n          event.preventDefault();\n          this._focusedMonthIndex++;\n\n          this._datepickerFocusService.focusCell(this._elRef);\n        } else if (keyCode === RIGHT_ARROW && this._focusedMonthIndex < 6) {\n          event.preventDefault();\n          this._focusedMonthIndex = this._focusedMonthIndex + 6;\n\n          this._datepickerFocusService.focusCell(this._elRef);\n        } else if (keyCode === LEFT_ARROW && this._focusedMonthIndex > 5) {\n          event.preventDefault();\n          this._focusedMonthIndex = this._focusedMonthIndex - 6;\n\n          this._datepickerFocusService.focusCell(this._elRef);\n        }\n      }\n    }\n    /**\n     * Focuses on the current calendar month when the View is initialized.\n     */\n\n\n    ngAfterViewInit() {\n      this._datepickerFocusService.focusCell(this._elRef);\n    }\n\n  }\n\n  ClrMonthpicker.ɵfac = function ClrMonthpicker_Factory(t) {\n    return new (t || ClrMonthpicker)(ɵngcc0.ɵɵdirectiveInject(ViewManagerService), ɵngcc0.ɵɵdirectiveInject(LocaleHelperService), ɵngcc0.ɵɵdirectiveInject(DateNavigationService), ɵngcc0.ɵɵdirectiveInject(DatepickerFocusService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  ClrMonthpicker.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ClrMonthpicker,\n    selectors: [[\"clr-monthpicker\"]],\n    hostVars: 2,\n    hostBindings: function ClrMonthpicker_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"keydown\", function ClrMonthpicker_keydown_HostBindingHandler($event) {\n          return ctx.onKeyDown($event);\n        });\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"monthpicker\", true);\n      }\n    },\n    decls: 1,\n    vars: 1,\n    consts: [[\"type\", \"button\", \"class\", \"calendar-btn month\", 3, \"is-selected\", \"click\", 4, \"ngFor\", \"ngForOf\"], [\"type\", \"button\", 1, \"calendar-btn\", \"month\", 3, \"click\"]],\n    template: function ClrMonthpicker_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, ClrMonthpicker_button_0_Template, 2, 4, \"button\", 0);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.monthNames);\n      }\n    },\n    directives: [ɵngcc1.NgForOf],\n    encapsulation: 2\n  });\n  return ClrMonthpicker;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nconst YEARS_TO_DISPLAY = 10;\n\nclass YearRangeModel {\n  constructor(year) {\n    this.year = year;\n    this.yearRange = [];\n    this.generateYearRange();\n  }\n  /**\n   * Gets the number in the middle of the range.\n   */\n\n\n  get middleYear() {\n    return this.yearRange[Math.floor(this.yearRange.length / 2)];\n  }\n  /**\n   * Generates the year range based on the year parameter.\n   * eg: If 2018 is passed the output will be [2010, 2011, ..., 2019]\n   */\n\n\n  generateYearRange() {\n    const remainder = this.year % YEARS_TO_DISPLAY;\n    const floor = this.year - remainder;\n    const ceil = floor + YEARS_TO_DISPLAY;\n    this.yearRange = this.generateRange(floor, ceil);\n  }\n  /**\n   * Function which generate a range of numbers from floor to ceil.\n   */\n\n\n  generateRange(floor, ceil) {\n    return Array.from({\n      length: ceil - floor\n    }, (_v, k) => k + floor);\n  }\n  /**\n   * Generates the YearRangeModel for the next decade.\n   */\n\n\n  nextDecade() {\n    return new YearRangeModel(this.year + 10);\n  }\n  /**\n   * Generates the YearRangeModel for the previous decade.\n   */\n\n\n  previousDecade() {\n    return new YearRangeModel(this.year - 10);\n  }\n  /**\n   * Generates the YearRangeModel for the current decade.\n   */\n\n\n  currentDecade() {\n    return new YearRangeModel(new Date().getFullYear());\n  }\n  /**\n   * Checks if the value is in the YearRangeModel.\n   */\n\n\n  inRange(value) {\n    return this.yearRange.indexOf(value) > -1;\n  }\n\n}\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrYearpicker = /*#__PURE__*/(() => {\n  class ClrYearpicker {\n    constructor(_dateNavigationService, _viewManagerService, _datepickerFocusService, _elRef, commonStrings) {\n      this._dateNavigationService = _dateNavigationService;\n      this._viewManagerService = _viewManagerService;\n      this._datepickerFocusService = _datepickerFocusService;\n      this._elRef = _elRef;\n      this.commonStrings = commonStrings;\n      this.yearRangeModel = new YearRangeModel(this.calendarYear);\n      this._focusedYear = this.calendarYear;\n      this.updateRange(this.yearRangeModel);\n    }\n    /**\n     * Gets the year which the user is currently on.\n     */\n\n\n    get calendarYear() {\n      return this._dateNavigationService.displayedCalendar.year;\n    }\n    /**\n     * Increments the focus year by the value passed. Updates the YearRangeModel if the\n     * new value is not in the current decade.\n     */\n\n\n    incrementFocusYearBy(value) {\n      this._focusedYear = this._focusedYear + value;\n\n      if (!this.yearRangeModel.inRange(this._focusedYear)) {\n        if (value > 0) {\n          this.yearRangeModel = this.yearRangeModel.nextDecade();\n        } else {\n          this.yearRangeModel = this.yearRangeModel.previousDecade();\n        }\n      }\n\n      this._datepickerFocusService.focusCell(this._elRef);\n    }\n    /**\n     * Calls the DateNavigationService to update the year value of the calendar.\n     * Also changes the view to the daypicker.\n     */\n\n\n    changeYear(year) {\n      this._dateNavigationService.changeYear(year);\n\n      this._viewManagerService.changeToDayView();\n    }\n    /**\n     * Updates the YearRangeModel to the previous decade.\n     */\n\n\n    previousDecade() {\n      this.yearRangeModel = this.yearRangeModel.previousDecade();\n      this.updateRange(this.yearRangeModel); // Year in the yearpicker is not focused because while navigating to a different decade,\n      // you want the focus to remain on the decade switcher arrows.\n    }\n    /**\n     * Updates the YearRangeModel to the current decade.\n     */\n\n\n    currentDecade() {\n      if (!this.yearRangeModel.inRange(this._dateNavigationService.today.year)) {\n        this.yearRangeModel = this.yearRangeModel.currentDecade();\n      }\n\n      this._datepickerFocusService.focusCell(this._elRef);\n\n      this.updateRange(this.yearRangeModel);\n    }\n    /**\n     * Updates the YearRangeModel to the next decade.\n     */\n\n\n    nextDecade() {\n      this.yearRangeModel = this.yearRangeModel.nextDecade();\n      this.updateRange(this.yearRangeModel); // Year in the yearpicker is not focused because while navigating to a different decade,\n      // you want the focus to remain on the decade switcher arrows.\n    }\n    /**\n     * Compares the year passed to the focused year and returns the tab index.\n     */\n\n\n    getTabIndex(year) {\n      if (!this.yearRangeModel.inRange(this._focusedYear)) {\n        if (this.yearRangeModel.inRange(this.calendarYear)) {\n          this._focusedYear = this.calendarYear;\n        } else {\n          this._focusedYear = this.yearRangeModel.middleYear;\n        }\n      }\n\n      return this._focusedYear === year ? 0 : -1;\n    }\n    /**\n     * Handles the Keyboard arrow navigation for the yearpicker.\n     */\n\n\n    onKeyDown(event) {\n      // NOTE: Didn't move this to the date navigation service because\n      // the logic is fairly simple and it didn't make sense for me\n      // to create extra observables just to move this logic to the service.\n      if (event) {\n        const keyCode = event.keyCode;\n\n        if (keyCode === UP_ARROW) {\n          event.preventDefault();\n          this.incrementFocusYearBy(-1);\n        } else if (keyCode === DOWN_ARROW) {\n          event.preventDefault();\n          this.incrementFocusYearBy(1);\n        } else if (keyCode === RIGHT_ARROW) {\n          event.preventDefault();\n          this.incrementFocusYearBy(5);\n        } else if (keyCode === LEFT_ARROW) {\n          event.preventDefault();\n          this.incrementFocusYearBy(-5);\n        }\n      }\n    }\n\n    updateRange(yrm) {\n      const floor = yrm.yearRange[0];\n      const ceil = yrm.yearRange[yrm.yearRange.length - 1];\n      this.decadeRange = `${floor} to ${ceil}`;\n    }\n    /**\n     * Focuses on the current calendar year when the View is initialized.\n     */\n\n\n    ngAfterViewInit() {\n      this._datepickerFocusService.focusCell(this._elRef);\n    }\n\n  }\n\n  ClrYearpicker.ɵfac = function ClrYearpicker_Factory(t) {\n    return new (t || ClrYearpicker)(ɵngcc0.ɵɵdirectiveInject(DateNavigationService), ɵngcc0.ɵɵdirectiveInject(ViewManagerService), ɵngcc0.ɵɵdirectiveInject(DatepickerFocusService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ClrCommonStringsService));\n  };\n\n  ClrYearpicker.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ClrYearpicker,\n    selectors: [[\"clr-yearpicker\"]],\n    hostVars: 2,\n    hostBindings: function ClrYearpicker_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"keydown\", function ClrYearpicker_keydown_HostBindingHandler($event) {\n          return ctx.onKeyDown($event);\n        });\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"yearpicker\", true);\n      }\n    },\n    decls: 9,\n    vars: 7,\n    consts: [[1, \"year-switchers\"], [\"type\", \"button\", 1, \"calendar-btn\", \"switcher\", 3, \"click\"], [\"shape\", \"angle\", \"direction\", \"left\"], [\"shape\", \"event\"], [\"shape\", \"angle\", \"direction\", \"right\"], [1, \"years\"], [\"type\", \"button\", \"class\", \"calendar-btn year\", 3, \"is-selected\", \"click\", 4, \"ngFor\", \"ngForOf\"], [\"type\", \"button\", 1, \"calendar-btn\", \"year\", 3, \"click\"]],\n    template: function ClrYearpicker_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵelementStart(1, \"button\", 1);\n        ɵngcc0.ɵɵlistener(\"click\", function ClrYearpicker_Template_button_click_1_listener() {\n          return ctx.previousDecade();\n        });\n        ɵngcc0.ɵɵelement(2, \"cds-icon\", 2);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(3, \"button\", 1);\n        ɵngcc0.ɵɵlistener(\"click\", function ClrYearpicker_Template_button_click_3_listener() {\n          return ctx.currentDecade();\n        });\n        ɵngcc0.ɵɵelement(4, \"cds-icon\", 3);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(5, \"button\", 1);\n        ɵngcc0.ɵɵlistener(\"click\", function ClrYearpicker_Template_button_click_5_listener() {\n          return ctx.nextDecade();\n        });\n        ɵngcc0.ɵɵelement(6, \"cds-icon\", 4);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(7, \"div\", 5);\n        ɵngcc0.ɵɵtemplate(8, ClrYearpicker_button_8_Template, 2, 4, \"button\", 6);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵattribute(\"aria-label\", ctx.commonStrings.keys.datepickerPreviousDecade);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵattribute(\"title\", ctx.commonStrings.keys.datepickerPreviousDecade);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵattribute(\"aria-label\", ctx.commonStrings.keys.datepickerCurrentDecade);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵattribute(\"title\", ctx.commonStrings.keys.datepickerCurrentDecade);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵattribute(\"aria-label\", ctx.commonStrings.keys.datepickerNextDecade);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵattribute(\"title\", ctx.commonStrings.keys.datepickerNextDecade);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.yearRangeModel.yearRange);\n      }\n    },\n    directives: [CdsIconCustomTag, ɵngcc1.NgForOf],\n    encapsulation: 2\n  });\n  return ClrYearpicker;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nconst CLR_DATEPICKER_DIRECTIVES = [ClrDay, ClrDateContainer, ClrDateInput, ClrDatepickerViewManager, ClrMonthpicker, ClrYearpicker, ClrDaypicker, ClrCalendar];\nlet ClrDatepickerModule = /*#__PURE__*/(() => {\n  class ClrDatepickerModule {\n    constructor() {\n      ClarityIcons.addIcons(exclamationCircleIcon, checkCircleIcon, angleIcon, eventIcon, calendarIcon);\n    }\n\n  }\n\n  ClrDatepickerModule.ɵfac = function ClrDatepickerModule_Factory(t) {\n    return new (t || ClrDatepickerModule)();\n  };\n\n  ClrDatepickerModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: ClrDatepickerModule\n  });\n  ClrDatepickerModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule, ClrHostWrappingModule, ClrConditionalModule, ClrPopoverModuleNext, ClrIconModule, ClrFocusTrapModule, ClrCommonFormsModule]]\n  });\n  return ClrDatepickerModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ClrDatepickerModule, {\n    declarations: function () {\n      return [ClrDay, ClrDateContainer, ClrDateInput, ClrDatepickerViewManager, ClrMonthpicker, ClrYearpicker, ClrDaypicker, ClrCalendar];\n    },\n    imports: function () {\n      return [CommonModule, ClrHostWrappingModule, ClrConditionalModule, ClrPopoverModuleNext, ClrIconModule, ClrFocusTrapModule, ClrCommonFormsModule];\n    },\n    exports: function () {\n      return [ClrDay, ClrDateContainer, ClrDateInput, ClrDatepickerViewManager, ClrMonthpicker, ClrYearpicker, ClrDaypicker, ClrCalendar];\n    }\n  });\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nconst TOGGLE_SERVICE = new InjectionToken(undefined);\n\nfunction ToggleServiceFactory() {\n  return new BehaviorSubject(false);\n}\n\nconst TOGGLE_SERVICE_PROVIDER = {\n  provide: TOGGLE_SERVICE,\n  useFactory: ToggleServiceFactory\n};\nlet ClrPasswordContainer = /*#__PURE__*/(() => {\n  class ClrPasswordContainer extends ClrAbstractContainer {\n    constructor(ifControlStateService, layoutService, controlClassService, ngControlService, focusService, toggleService, commonStrings) {\n      super(ifControlStateService, layoutService, controlClassService, ngControlService);\n      this.focusService = focusService;\n      this.toggleService = toggleService;\n      this.commonStrings = commonStrings;\n      this.show = false;\n      this.focus = false;\n      this._toggle = true;\n      /* The unsubscribe is handle inside the ClrAbstractContainer */\n\n      this.subscriptions.push(this.focusService.focusChange.subscribe(state => {\n        this.focus = state;\n      }));\n    }\n\n    set clrToggle(state) {\n      this._toggle = state;\n\n      if (!state) {\n        this.show = false;\n      }\n    }\n\n    get clrToggle() {\n      return this._toggle;\n    }\n\n    toggle() {\n      this.show = !this.show;\n      this.toggleService.next(this.show);\n    }\n\n  }\n\n  ClrPasswordContainer.ɵfac = function ClrPasswordContainer_Factory(t) {\n    return new (t || ClrPasswordContainer)(ɵngcc0.ɵɵdirectiveInject(IfControlStateService), ɵngcc0.ɵɵdirectiveInject(LayoutService, 8), ɵngcc0.ɵɵdirectiveInject(ControlClassService), ɵngcc0.ɵɵdirectiveInject(NgControlService), ɵngcc0.ɵɵdirectiveInject(FocusService), ɵngcc0.ɵɵdirectiveInject(TOGGLE_SERVICE), ɵngcc0.ɵɵdirectiveInject(ClrCommonStringsService));\n  };\n\n  ClrPasswordContainer.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ClrPasswordContainer,\n    selectors: [[\"clr-password-container\"]],\n    hostVars: 6,\n    hostBindings: function ClrPasswordContainer_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"clr-form-control\", true)(\"clr-form-control-disabled\", ctx.control == null ? null : ctx.control.disabled)(\"clr-row\", ctx.addGrid());\n      }\n    },\n    inputs: {\n      clrToggle: \"clrToggle\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([NgControlService, ControlIdService, ControlClassService, FocusService, TOGGLE_SERVICE_PROVIDER, IfControlStateService]), ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c29,\n    decls: 12,\n    vars: 10,\n    consts: [[4, \"ngIf\"], [1, \"clr-control-container\", 3, \"ngClass\"], [1, \"clr-input-wrapper\"], [1, \"clr-input-group\"], [\"class\", \"clr-input-group-icon-action\", \"type\", \"button\", 3, \"disabled\", \"click\", 4, \"ngIf\"], [\"class\", \"clr-validate-icon\", \"status\", \"danger\", \"shape\", \"exclamation-circle\", \"aria-hidden\", \"true\", 4, \"ngIf\"], [\"class\", \"clr-validate-icon\", \"shape\", \"check-circle\", \"status\", \"success\", \"aria-hidden\", \"true\", 4, \"ngIf\"], [\"type\", \"button\", 1, \"clr-input-group-icon-action\", 3, \"disabled\", \"click\"], [\"status\", \"info\"], [1, \"clr-sr-only\"], [\"status\", \"danger\", \"shape\", \"exclamation-circle\", \"aria-hidden\", \"true\", 1, \"clr-validate-icon\"], [\"shape\", \"check-circle\", \"status\", \"success\", \"aria-hidden\", \"true\", 1, \"clr-validate-icon\"]],\n    template: function ClrPasswordContainer_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c28);\n        ɵngcc0.ɵɵprojection(0);\n        ɵngcc0.ɵɵtemplate(1, ClrPasswordContainer_label_1_Template, 1, 0, \"label\", 0);\n        ɵngcc0.ɵɵelementStart(2, \"div\", 1);\n        ɵngcc0.ɵɵelementStart(3, \"div\", 2);\n        ɵngcc0.ɵɵelementStart(4, \"div\", 3);\n        ɵngcc0.ɵɵprojection(5, 1);\n        ɵngcc0.ɵɵtemplate(6, ClrPasswordContainer_button_6_Template, 4, 3, \"button\", 4);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(7, ClrPasswordContainer_cds_icon_7_Template, 1, 0, \"cds-icon\", 5);\n        ɵngcc0.ɵɵtemplate(8, ClrPasswordContainer_cds_icon_8_Template, 1, 0, \"cds-icon\", 6);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(9, ClrPasswordContainer_ng_content_9_Template, 1, 0, \"ng-content\", 0);\n        ɵngcc0.ɵɵtemplate(10, ClrPasswordContainer_ng_content_10_Template, 1, 0, \"ng-content\", 0);\n        ɵngcc0.ɵɵtemplate(11, ClrPasswordContainer_ng_content_11_Template, 1, 0, \"ng-content\", 0);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.label && ctx.addGrid());\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngClass\", ctx.controlClass());\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵclassProp(\"clr-focus\", ctx.focus);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.clrToggle);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showInvalid);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showValid);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showHelper);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showInvalid);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showValid);\n      }\n    },\n    directives: [ɵngcc1.NgIf, ɵngcc1.NgClass, ClrLabel, CdsIconCustomTag],\n    encapsulation: 2\n  });\n  return ClrPasswordContainer;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrPassword = /*#__PURE__*/(() => {\n  class ClrPassword extends WrappedFormControl {\n    constructor(vcr, injector, control, renderer, el, focusService, toggleService) {\n      super(vcr, ClrPasswordContainer, injector, control, renderer, el);\n      this.focusService = focusService;\n      this.toggleService = toggleService;\n      this.index = 1;\n\n      if (!this.focusService) {\n        throw new Error('clrPassword requires being wrapped in <clr-password-container>');\n      }\n\n      this.subscriptions.push(this.toggleService.subscribe(toggle => {\n        renderer.setProperty(el.nativeElement, 'type', toggle ? 'text' : 'password');\n      }));\n    }\n\n    triggerFocus() {\n      if (this.focusService) {\n        this.focusService.focused = true;\n      }\n    }\n\n    triggerValidation() {\n      super.triggerValidation();\n\n      if (this.focusService) {\n        this.focusService.focused = false;\n      }\n    }\n\n  }\n\n  ClrPassword.ɵfac = function ClrPassword_Factory(t) {\n    return new (t || ClrPassword)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.NgControl, 10), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(FocusService, 8), ɵngcc0.ɵɵdirectiveInject(TOGGLE_SERVICE, 8));\n  };\n\n  ClrPassword.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: ClrPassword,\n    selectors: [[\"\", \"clrPassword\", \"\"]],\n    hostVars: 2,\n    hostBindings: function ClrPassword_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focus\", function ClrPassword_focus_HostBindingHandler() {\n          return ctx.triggerFocus();\n        })(\"blur\", function ClrPassword_blur_HostBindingHandler() {\n          return ctx.triggerValidation();\n        });\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"clr-input\", true);\n      }\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  return ClrPassword;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrPasswordModule = /*#__PURE__*/(() => {\n  class ClrPasswordModule {\n    constructor() {\n      ClarityIcons.addIcons(eyeHideIcon, eyeIcon, exclamationCircleIcon, checkCircleIcon);\n    }\n\n  }\n\n  ClrPasswordModule.ɵfac = function ClrPasswordModule_Factory(t) {\n    return new (t || ClrPasswordModule)();\n  };\n\n  ClrPasswordModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: ClrPasswordModule\n  });\n  ClrPasswordModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule, FormsModule, ClrIconModule, ClrCommonFormsModule], ClrCommonFormsModule]\n  });\n  return ClrPasswordModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ClrPasswordModule, {\n    declarations: function () {\n      return [ClrPassword, ClrPasswordContainer];\n    },\n    imports: function () {\n      return [CommonModule, FormsModule, ClrIconModule, ClrCommonFormsModule];\n    },\n    exports: function () {\n      return [ClrCommonFormsModule, ClrPassword, ClrPasswordContainer];\n    }\n  });\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrRadioWrapper = /*#__PURE__*/(() => {\n  class ClrRadioWrapper {\n    constructor() {\n      // We need both _dynamic for HostWrapper and ContentChild(ClrLabel) in cases where\n      // the user puts a radio inside a wrapper without a label, host wrapping doesn't apply\n      // but we'd still need to insert a label\n      this._dynamic = false;\n    }\n\n    ngOnInit() {\n      if (this.label) {\n        this.label.disableGrid();\n      }\n    }\n\n  }\n\n  ClrRadioWrapper.ɵfac = function ClrRadioWrapper_Factory(t) {\n    return new (t || ClrRadioWrapper)();\n  };\n\n  ClrRadioWrapper.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ClrRadioWrapper,\n    selectors: [[\"clr-radio-wrapper\"]],\n    contentQueries: function ClrRadioWrapper_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, ClrLabel, 7);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.label = _t.first);\n      }\n    },\n    hostVars: 2,\n    hostBindings: function ClrRadioWrapper_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"clr-radio-wrapper\", true);\n      }\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([ControlIdService])],\n    ngContentSelectors: _c31,\n    decls: 3,\n    vars: 1,\n    consts: [[4, \"ngIf\"]],\n    template: function ClrRadioWrapper_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c30);\n        ɵngcc0.ɵɵprojection(0);\n        ɵngcc0.ɵɵprojection(1, 1);\n        ɵngcc0.ɵɵtemplate(2, ClrRadioWrapper_label_2_Template, 1, 0, \"label\", 0);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.label);\n      }\n    },\n    directives: [ɵngcc1.NgIf, ClrLabel],\n    encapsulation: 2\n  });\n  return ClrRadioWrapper;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrRadio = /*#__PURE__*/(() => {\n  class ClrRadio extends WrappedFormControl {\n    constructor(vcr, injector, control, renderer, el) {\n      super(vcr, ClrRadioWrapper, injector, control, renderer, el);\n    }\n\n  }\n\n  ClrRadio.ɵfac = function ClrRadio_Factory(t) {\n    return new (t || ClrRadio)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.NgControl, 10), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  ClrRadio.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: ClrRadio,\n    selectors: [[\"\", \"clrRadio\", \"\"]],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  return ClrRadio;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrRadioContainer = /*#__PURE__*/(() => {\n  class ClrRadioContainer extends ClrAbstractContainer {\n    constructor(layoutService, controlClassService, ngControlService, ifControlStateService) {\n      super(ifControlStateService, layoutService, controlClassService, ngControlService);\n      this.layoutService = layoutService;\n      this.controlClassService = controlClassService;\n      this.ngControlService = ngControlService;\n      this.ifControlStateService = ifControlStateService;\n      this.inline = false;\n    }\n    /*\n     * Here we want to support the following cases\n     * clrInline - true by presence\n     * clrInline=\"true|false\" - unless it is explicitly false, strings are considered true\n     * [clrInline]=\"true|false\" - expect a boolean\n     */\n\n\n    set clrInline(value) {\n      if (typeof value === 'string') {\n        this.inline = value === 'false' ? false : true;\n      } else {\n        this.inline = !!value;\n      }\n    }\n\n    get clrInline() {\n      return this.inline;\n    }\n\n    ngAfterContentInit() {\n      this.setAriaRoles();\n    }\n\n    setAriaRoles() {\n      this.role = this.radios.length ? 'group' : null;\n    }\n\n  }\n\n  ClrRadioContainer.ɵfac = function ClrRadioContainer_Factory(t) {\n    return new (t || ClrRadioContainer)(ɵngcc0.ɵɵdirectiveInject(LayoutService, 8), ɵngcc0.ɵɵdirectiveInject(ControlClassService), ɵngcc0.ɵɵdirectiveInject(NgControlService), ɵngcc0.ɵɵdirectiveInject(IfControlStateService));\n  };\n\n  ClrRadioContainer.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ClrRadioContainer,\n    selectors: [[\"clr-radio-container\"]],\n    contentQueries: function ClrRadioContainer_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, ClrRadio, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.radios = _t);\n      }\n    },\n    hostVars: 7,\n    hostBindings: function ClrRadioContainer_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"role\", ctx.role);\n        ɵngcc0.ɵɵclassProp(\"clr-form-control\", true)(\"clr-form-control-disabled\", ctx.control == null ? null : ctx.control.disabled)(\"clr-row\", ctx.addGrid());\n      }\n    },\n    inputs: {\n      clrInline: \"clrInline\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([NgControlService, IfControlStateService, ControlClassService, ContainerIdService]), ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c33,\n    decls: 10,\n    vars: 9,\n    consts: [[4, \"ngIf\"], [1, \"clr-control-container\", 3, \"ngClass\"], [1, \"clr-subtext-wrapper\"], [\"class\", \"clr-validate-icon\", \"status\", \"danger\", \"shape\", \"exclamation-circle\", \"aria-hidden\", \"true\", 4, \"ngIf\"], [\"class\", \"clr-validate-icon\", \"shape\", \"check-circle\", \"status\", \"success\", \"aria-hidden\", \"true\", 4, \"ngIf\"], [\"status\", \"danger\", \"shape\", \"exclamation-circle\", \"aria-hidden\", \"true\", 1, \"clr-validate-icon\"], [\"shape\", \"check-circle\", \"status\", \"success\", \"aria-hidden\", \"true\", 1, \"clr-validate-icon\"]],\n    template: function ClrRadioContainer_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c32);\n        ɵngcc0.ɵɵprojection(0);\n        ɵngcc0.ɵɵtemplate(1, ClrRadioContainer_label_1_Template, 1, 0, \"label\", 0);\n        ɵngcc0.ɵɵelementStart(2, \"div\", 1);\n        ɵngcc0.ɵɵprojection(3, 1);\n        ɵngcc0.ɵɵelementStart(4, \"div\", 2);\n        ɵngcc0.ɵɵtemplate(5, ClrRadioContainer_ng_content_5_Template, 1, 0, \"ng-content\", 0);\n        ɵngcc0.ɵɵtemplate(6, ClrRadioContainer_cds_icon_6_Template, 1, 0, \"cds-icon\", 3);\n        ɵngcc0.ɵɵtemplate(7, ClrRadioContainer_cds_icon_7_Template, 1, 0, \"cds-icon\", 4);\n        ɵngcc0.ɵɵtemplate(8, ClrRadioContainer_ng_content_8_Template, 1, 0, \"ng-content\", 0);\n        ɵngcc0.ɵɵtemplate(9, ClrRadioContainer_ng_content_9_Template, 1, 0, \"ng-content\", 0);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.label && ctx.addGrid());\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵclassProp(\"clr-control-inline\", ctx.clrInline);\n        ɵngcc0.ɵɵproperty(\"ngClass\", ctx.controlClass());\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showHelper);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showInvalid);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showValid);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showInvalid);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showValid);\n      }\n    },\n    directives: [ɵngcc1.NgIf, ɵngcc1.NgClass, ClrLabel, CdsIconCustomTag],\n    encapsulation: 2\n  });\n  return ClrRadioContainer;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrRadioModule = /*#__PURE__*/(() => {\n  class ClrRadioModule {\n    constructor() {\n      ClarityIcons.addIcons(exclamationCircleIcon, checkCircleIcon);\n    }\n\n  }\n\n  ClrRadioModule.ɵfac = function ClrRadioModule_Factory(t) {\n    return new (t || ClrRadioModule)();\n  };\n\n  ClrRadioModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: ClrRadioModule\n  });\n  ClrRadioModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule, ClrCommonFormsModule, ClrHostWrappingModule, ClrIconModule], ClrCommonFormsModule]\n  });\n  return ClrRadioModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ClrRadioModule, {\n    declarations: function () {\n      return [ClrRadio, ClrRadioContainer, ClrRadioWrapper];\n    },\n    imports: function () {\n      return [CommonModule, ClrCommonFormsModule, ClrHostWrappingModule, ClrIconModule];\n    },\n    exports: function () {\n      return [ClrCommonFormsModule, ClrRadio, ClrRadioContainer, ClrRadioWrapper];\n    }\n  });\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrRangeContainer = /*#__PURE__*/(() => {\n  class ClrRangeContainer extends ClrAbstractContainer {\n    constructor(layoutService, controlClassService, ngControlService, renderer, idService, ifControlStateService) {\n      super(ifControlStateService, layoutService, controlClassService, ngControlService);\n      this.renderer = renderer;\n      this.idService = idService;\n      this.ifControlStateService = ifControlStateService;\n      this._hasProgress = false;\n    }\n\n    set hasProgress(val) {\n      const valBool = !!val;\n\n      if (valBool !== this._hasProgress) {\n        this._hasProgress = valBool;\n      }\n    }\n\n    get hasProgress() {\n      return this._hasProgress;\n    }\n\n    getRangeProgressFillWidth() {\n      const input = this.renderer.selectRootElement('[clrRange]#' + this.idService.id);\n      const inputWidth = input.offsetWidth;\n      const inputMinValue = +input.min;\n      let inputMaxValue = +input.max;\n\n      if (inputMinValue === 0 && inputMaxValue === 0) {\n        inputMaxValue = 100;\n      }\n\n      const inputMiddle = (inputMinValue + inputMaxValue) / 2;\n      const inputValue = !!this.control && this.control.value !== undefined ? this.control.value : inputMiddle;\n      const valueAsPercent = (inputValue - inputMinValue) * 100 / (inputMaxValue - inputMinValue);\n      return valueAsPercent * inputWidth / 100 + 'px';\n    }\n\n  }\n\n  ClrRangeContainer.ɵfac = function ClrRangeContainer_Factory(t) {\n    return new (t || ClrRangeContainer)(ɵngcc0.ɵɵdirectiveInject(LayoutService, 8), ɵngcc0.ɵɵdirectiveInject(ControlClassService), ɵngcc0.ɵɵdirectiveInject(NgControlService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ControlIdService), ɵngcc0.ɵɵdirectiveInject(IfControlStateService));\n  };\n\n  ClrRangeContainer.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ClrRangeContainer,\n    selectors: [[\"clr-range-container\"]],\n    hostVars: 6,\n    hostBindings: function ClrRangeContainer_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"clr-form-control\", true)(\"clr-form-control-disabled\", ctx.control == null ? null : ctx.control.disabled)(\"clr-row\", ctx.addGrid());\n      }\n    },\n    inputs: {\n      hasProgress: [\"clrRangeHasProgress\", \"hasProgress\"]\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([IfControlStateService, NgControlService, ControlIdService, ControlClassService]), ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c35,\n    decls: 11,\n    vars: 10,\n    consts: [[4, \"ngIf\"], [1, \"clr-control-container\", 3, \"ngClass\"], [1, \"clr-range-wrapper\"], [\"class\", \"fill-input\", 3, \"width\", 4, \"ngIf\"], [\"class\", \"clr-validate-icon\", \"status\", \"danger\", \"shape\", \"exclamation-circle\", \"aria-hidden\", \"true\", 4, \"ngIf\"], [\"class\", \"clr-validate-icon\", \"shape\", \"check-circle\", \"status\", \"success\", \"aria-hidden\", \"true\", 4, \"ngIf\"], [1, \"fill-input\"], [\"status\", \"danger\", \"shape\", \"exclamation-circle\", \"aria-hidden\", \"true\", 1, \"clr-validate-icon\"], [\"shape\", \"check-circle\", \"status\", \"success\", \"aria-hidden\", \"true\", 1, \"clr-validate-icon\"]],\n    template: function ClrRangeContainer_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c34);\n        ɵngcc0.ɵɵprojection(0);\n        ɵngcc0.ɵɵtemplate(1, ClrRangeContainer_label_1_Template, 1, 0, \"label\", 0);\n        ɵngcc0.ɵɵelementStart(2, \"div\", 1);\n        ɵngcc0.ɵɵelementStart(3, \"div\", 2);\n        ɵngcc0.ɵɵprojection(4, 1);\n        ɵngcc0.ɵɵtemplate(5, ClrRangeContainer_span_5_Template, 1, 2, \"span\", 3);\n        ɵngcc0.ɵɵtemplate(6, ClrRangeContainer_cds_icon_6_Template, 1, 0, \"cds-icon\", 4);\n        ɵngcc0.ɵɵtemplate(7, ClrRangeContainer_cds_icon_7_Template, 1, 0, \"cds-icon\", 5);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(8, ClrRangeContainer_ng_content_8_Template, 1, 0, \"ng-content\", 0);\n        ɵngcc0.ɵɵtemplate(9, ClrRangeContainer_ng_content_9_Template, 1, 0, \"ng-content\", 0);\n        ɵngcc0.ɵɵtemplate(10, ClrRangeContainer_ng_content_10_Template, 1, 0, \"ng-content\", 0);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.label && ctx.addGrid());\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngClass\", ctx.controlClass());\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵclassProp(\"progress-fill\", ctx.hasProgress);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.hasProgress);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showInvalid);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showValid);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showHelper);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showInvalid);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showValid);\n      }\n    },\n    directives: [ɵngcc1.NgIf, ɵngcc1.NgClass, ClrLabel, CdsIconCustomTag],\n    encapsulation: 2\n  });\n  return ClrRangeContainer;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrRange = /*#__PURE__*/(() => {\n  class ClrRange extends WrappedFormControl {\n    constructor(vcr, injector, control, renderer, el) {\n      super(vcr, ClrRangeContainer, injector, control, renderer, el);\n    }\n\n  }\n\n  ClrRange.ɵfac = function ClrRange_Factory(t) {\n    return new (t || ClrRange)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.NgControl, 10), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  ClrRange.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: ClrRange,\n    selectors: [[\"\", \"clrRange\", \"\"]],\n    hostVars: 2,\n    hostBindings: function ClrRange_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"clr-range\", true);\n      }\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  return ClrRange;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrRangeModule = /*#__PURE__*/(() => {\n  class ClrRangeModule {\n    constructor() {\n      ClarityIcons.addIcons(exclamationCircleIcon, checkCircleIcon);\n    }\n\n  }\n\n  ClrRangeModule.ɵfac = function ClrRangeModule_Factory(t) {\n    return new (t || ClrRangeModule)();\n  };\n\n  ClrRangeModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: ClrRangeModule\n  });\n  ClrRangeModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule, ClrCommonFormsModule, ClrHostWrappingModule, ClrIconModule], ClrCommonFormsModule]\n  });\n  return ClrRangeModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ClrRangeModule, {\n    declarations: function () {\n      return [ClrRange, ClrRangeContainer];\n    },\n    imports: function () {\n      return [CommonModule, ClrCommonFormsModule, ClrHostWrappingModule, ClrIconModule];\n    },\n    exports: function () {\n      return [ClrCommonFormsModule, ClrRange, ClrRangeContainer];\n    }\n  });\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrSelectContainer = /*#__PURE__*/(() => {\n  class ClrSelectContainer extends ClrAbstractContainer {\n    constructor(layoutService, controlClassService, ngControlService, ifControlStateService) {\n      super(ifControlStateService, layoutService, controlClassService, ngControlService);\n      this.layoutService = layoutService;\n      this.controlClassService = controlClassService;\n      this.ngControlService = ngControlService;\n      this.ifControlStateService = ifControlStateService;\n      this.multi = false;\n    }\n\n    ngOnInit() {\n      /* The unsubscribe is handle inside the ClrAbstractContainer */\n      this.subscriptions.push(this.ngControlService.controlChanges.subscribe(control => {\n        if (control) {\n          this.multi = control.valueAccessor instanceof SelectMultipleControlValueAccessor;\n          this.control = control;\n        }\n      }));\n    }\n\n    wrapperClass() {\n      return this.multi ? 'clr-multiselect-wrapper' : 'clr-select-wrapper';\n    }\n\n  }\n\n  ClrSelectContainer.ɵfac = function ClrSelectContainer_Factory(t) {\n    return new (t || ClrSelectContainer)(ɵngcc0.ɵɵdirectiveInject(LayoutService, 8), ɵngcc0.ɵɵdirectiveInject(ControlClassService), ɵngcc0.ɵɵdirectiveInject(NgControlService), ɵngcc0.ɵɵdirectiveInject(IfControlStateService));\n  };\n\n  ClrSelectContainer.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ClrSelectContainer,\n    selectors: [[\"clr-select-container\"]],\n    contentQueries: function ClrSelectContainer_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, SelectMultipleControlValueAccessor, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.multiple = _t.first);\n      }\n    },\n    hostVars: 6,\n    hostBindings: function ClrSelectContainer_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"clr-form-control\", true)(\"clr-form-control-disabled\", ctx.control == null ? null : ctx.control.disabled)(\"clr-row\", ctx.addGrid());\n      }\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([IfControlStateService, NgControlService, ControlIdService, ControlClassService]), ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c37,\n    decls: 10,\n    vars: 8,\n    consts: [[4, \"ngIf\"], [1, \"clr-control-container\", 3, \"ngClass\"], [3, \"ngClass\"], [\"class\", \"clr-validate-icon\", \"status\", \"danger\", \"shape\", \"exclamation-circle\", \"aria-hidden\", \"true\", 4, \"ngIf\"], [\"class\", \"clr-validate-icon\", \"shape\", \"check-circle\", \"status\", \"success\", \"aria-hidden\", \"true\", 4, \"ngIf\"], [\"status\", \"danger\", \"shape\", \"exclamation-circle\", \"aria-hidden\", \"true\", 1, \"clr-validate-icon\"], [\"shape\", \"check-circle\", \"status\", \"success\", \"aria-hidden\", \"true\", 1, \"clr-validate-icon\"]],\n    template: function ClrSelectContainer_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c36);\n        ɵngcc0.ɵɵprojection(0);\n        ɵngcc0.ɵɵtemplate(1, ClrSelectContainer_label_1_Template, 1, 0, \"label\", 0);\n        ɵngcc0.ɵɵelementStart(2, \"div\", 1);\n        ɵngcc0.ɵɵelementStart(3, \"div\", 2);\n        ɵngcc0.ɵɵprojection(4, 1);\n        ɵngcc0.ɵɵtemplate(5, ClrSelectContainer_cds_icon_5_Template, 1, 0, \"cds-icon\", 3);\n        ɵngcc0.ɵɵtemplate(6, ClrSelectContainer_cds_icon_6_Template, 1, 0, \"cds-icon\", 4);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(7, ClrSelectContainer_ng_content_7_Template, 1, 0, \"ng-content\", 0);\n        ɵngcc0.ɵɵtemplate(8, ClrSelectContainer_ng_content_8_Template, 1, 0, \"ng-content\", 0);\n        ɵngcc0.ɵɵtemplate(9, ClrSelectContainer_ng_content_9_Template, 1, 0, \"ng-content\", 0);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.label && ctx.addGrid());\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngClass\", ctx.controlClass());\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngClass\", ctx.wrapperClass());\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showInvalid);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showValid);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showHelper);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showInvalid);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showValid);\n      }\n    },\n    directives: [ɵngcc1.NgIf, ɵngcc1.NgClass, ClrLabel, CdsIconCustomTag],\n    encapsulation: 2\n  });\n  return ClrSelectContainer;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrSelect = /*#__PURE__*/(() => {\n  class ClrSelect extends WrappedFormControl {\n    constructor(vcr, injector, control, renderer, el) {\n      super(vcr, ClrSelectContainer, injector, control, renderer, el);\n      this.index = 1;\n    }\n\n  }\n\n  ClrSelect.ɵfac = function ClrSelect_Factory(t) {\n    return new (t || ClrSelect)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.NgControl, 10), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  ClrSelect.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: ClrSelect,\n    selectors: [[\"\", \"clrSelect\", \"\"]],\n    hostVars: 2,\n    hostBindings: function ClrSelect_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"clr-select\", true);\n      }\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  return ClrSelect;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrSelectModule = /*#__PURE__*/(() => {\n  class ClrSelectModule {\n    constructor() {\n      ClarityIcons.addIcons(exclamationCircleIcon, checkCircleIcon);\n    }\n\n  }\n\n  ClrSelectModule.ɵfac = function ClrSelectModule_Factory(t) {\n    return new (t || ClrSelectModule)();\n  };\n\n  ClrSelectModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: ClrSelectModule\n  });\n  ClrSelectModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule, FormsModule, ClrIconModule, ClrCommonFormsModule], ClrCommonFormsModule]\n  });\n  return ClrSelectModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ClrSelectModule, {\n    declarations: function () {\n      return [ClrSelect, ClrSelectContainer];\n    },\n    imports: function () {\n      return [CommonModule, FormsModule, ClrIconModule, ClrCommonFormsModule];\n    },\n    exports: function () {\n      return [ClrCommonFormsModule, ClrSelect, ClrSelectContainer];\n    }\n  });\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrTextareaContainer = /*#__PURE__*/(() => {\n  class ClrTextareaContainer extends ClrAbstractContainer {}\n\n  ClrTextareaContainer.ɵfac = /*@__PURE__*/function () {\n    let ɵClrTextareaContainer_BaseFactory;\n    return function ClrTextareaContainer_Factory(t) {\n      return (ɵClrTextareaContainer_BaseFactory || (ɵClrTextareaContainer_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(ClrTextareaContainer)))(t || ClrTextareaContainer);\n    };\n  }();\n\n  ClrTextareaContainer.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ClrTextareaContainer,\n    selectors: [[\"clr-textarea-container\"]],\n    hostVars: 6,\n    hostBindings: function ClrTextareaContainer_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"clr-form-control\", true)(\"clr-form-control-disabled\", ctx.control == null ? null : ctx.control.disabled)(\"clr-row\", ctx.addGrid());\n      }\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([IfControlStateService, NgControlService, ControlIdService, ControlClassService]), ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c39,\n    decls: 10,\n    vars: 7,\n    consts: [[4, \"ngIf\"], [1, \"clr-control-container\", 3, \"ngClass\"], [1, \"clr-textarea-wrapper\"], [\"class\", \"clr-validate-icon\", \"status\", \"danger\", \"shape\", \"exclamation-circle\", \"aria-hidden\", \"true\", 4, \"ngIf\"], [\"class\", \"clr-validate-icon\", \"shape\", \"check-circle\", \"status\", \"success\", \"aria-hidden\", \"true\", 4, \"ngIf\"], [\"status\", \"danger\", \"shape\", \"exclamation-circle\", \"aria-hidden\", \"true\", 1, \"clr-validate-icon\"], [\"shape\", \"check-circle\", \"status\", \"success\", \"aria-hidden\", \"true\", 1, \"clr-validate-icon\"]],\n    template: function ClrTextareaContainer_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c38);\n        ɵngcc0.ɵɵprojection(0);\n        ɵngcc0.ɵɵtemplate(1, ClrTextareaContainer_label_1_Template, 1, 0, \"label\", 0);\n        ɵngcc0.ɵɵelementStart(2, \"div\", 1);\n        ɵngcc0.ɵɵelementStart(3, \"div\", 2);\n        ɵngcc0.ɵɵprojection(4, 1);\n        ɵngcc0.ɵɵtemplate(5, ClrTextareaContainer_cds_icon_5_Template, 1, 0, \"cds-icon\", 3);\n        ɵngcc0.ɵɵtemplate(6, ClrTextareaContainer_cds_icon_6_Template, 1, 0, \"cds-icon\", 4);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(7, ClrTextareaContainer_ng_content_7_Template, 1, 0, \"ng-content\", 0);\n        ɵngcc0.ɵɵtemplate(8, ClrTextareaContainer_ng_content_8_Template, 1, 0, \"ng-content\", 0);\n        ɵngcc0.ɵɵtemplate(9, ClrTextareaContainer_ng_content_9_Template, 1, 0, \"ng-content\", 0);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.label && ctx.addGrid());\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngClass\", ctx.controlClass());\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showInvalid);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showValid);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showHelper);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showInvalid);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showValid);\n      }\n    },\n    directives: [ɵngcc1.NgIf, ɵngcc1.NgClass, ClrLabel, CdsIconCustomTag],\n    encapsulation: 2\n  });\n  return ClrTextareaContainer;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrTextarea = /*#__PURE__*/(() => {\n  class ClrTextarea extends WrappedFormControl {\n    constructor(vcr, injector, control, renderer, el) {\n      super(vcr, ClrTextareaContainer, injector, control, renderer, el);\n      this.index = 1;\n    }\n\n  }\n\n  ClrTextarea.ɵfac = function ClrTextarea_Factory(t) {\n    return new (t || ClrTextarea)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.NgControl, 10), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  ClrTextarea.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: ClrTextarea,\n    selectors: [[\"\", \"clrTextarea\", \"\"]],\n    hostVars: 2,\n    hostBindings: function ClrTextarea_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"clr-textarea\", true);\n      }\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  return ClrTextarea;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrTextareaModule = /*#__PURE__*/(() => {\n  class ClrTextareaModule {\n    constructor() {\n      ClarityIcons.addIcons(exclamationCircleIcon, checkCircleIcon);\n    }\n\n  }\n\n  ClrTextareaModule.ɵfac = function ClrTextareaModule_Factory(t) {\n    return new (t || ClrTextareaModule)();\n  };\n\n  ClrTextareaModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: ClrTextareaModule\n  });\n  ClrTextareaModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule, FormsModule, ClrIconModule, ClrCommonFormsModule], ClrCommonFormsModule]\n  });\n  return ClrTextareaModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ClrTextareaModule, {\n    declarations: function () {\n      return [ClrTextarea, ClrTextareaContainer];\n    },\n    imports: function () {\n      return [CommonModule, FormsModule, ClrIconModule, ClrCommonFormsModule];\n    },\n    exports: function () {\n      return [ClrCommonFormsModule, ClrTextarea, ClrTextareaContainer];\n    }\n  });\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrFormsModule = /*#__PURE__*/(() => {\n  class ClrFormsModule {}\n\n  ClrFormsModule.ɵfac = function ClrFormsModule_Factory(t) {\n    return new (t || ClrFormsModule)();\n  };\n\n  ClrFormsModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: ClrFormsModule\n  });\n  ClrFormsModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule], ClrCommonFormsModule, ClrCheckboxModule, ClrComboboxModule, ClrDatepickerModule, ClrInputModule, ClrPasswordModule, ClrRadioModule, ClrSelectModule, ClrTextareaModule, ClrRangeModule, ClrDatalistModule]\n  });\n  return ClrFormsModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ClrFormsModule, {\n    imports: function () {\n      return [CommonModule];\n    },\n    exports: function () {\n      return [ClrCommonFormsModule, ClrCheckboxModule, ClrComboboxModule, ClrDatepickerModule, ClrInputModule, ClrPasswordModule, ClrRadioModule, ClrSelectModule, ClrTextareaModule, ClrRangeModule, ClrDatalistModule];\n    }\n  });\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet DomAdapter = /*#__PURE__*/(() => {\n  class DomAdapter {\n    userDefinedWidth(element) {\n      element.classList.add('datagrid-cell-width-zero');\n      const userDefinedWidth = this.clientRect(element).width;\n      element.classList.remove('datagrid-cell-width-zero');\n      return userDefinedWidth;\n    }\n\n    scrollBarWidth(element) {\n      return element.offsetWidth - element.clientWidth;\n    }\n\n    scrollWidth(element) {\n      return element.scrollWidth || 0;\n    }\n\n    computedHeight(element) {\n      return parseInt(getComputedStyle(element).getPropertyValue('height'), 10);\n    }\n\n    clientRect(element) {\n      const elementClientRect = element.getBoundingClientRect();\n      return {\n        top: parseInt(elementClientRect.top, 10),\n        bottom: parseInt(elementClientRect.bottom, 10),\n        left: parseInt(elementClientRect.left, 10),\n        right: parseInt(elementClientRect.right, 10),\n        width: parseInt(elementClientRect.width, 10),\n        height: parseInt(elementClientRect.height, 10)\n      };\n    }\n\n    minWidth(element) {\n      return parseInt(getComputedStyle(element).getPropertyValue('min-width'), 10);\n    }\n\n    focus(element) {\n      element.focus();\n    }\n\n  }\n\n  DomAdapter.ɵfac = function DomAdapter_Factory(t) {\n    return new (t || DomAdapter)();\n  };\n\n  DomAdapter.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: DomAdapter,\n    factory: DomAdapter.ɵfac\n  });\n  return DomAdapter;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrExpandableAnimation = /*#__PURE__*/(() => {\n  class ClrExpandableAnimation {\n    constructor(element, domAdapter) {\n      this.element = element;\n      this.domAdapter = domAdapter;\n      this.startHeight = 0;\n    }\n\n    get expandAnimation() {\n      return {\n        value: this.clrExpandTrigger,\n        params: {\n          startHeight: this.startHeight\n        }\n      };\n    }\n\n    animationDone() {\n      // A \"safe\" auto-update of the height ensuring basic OOTB user experience .\n      // Prone to small jumps in initial animation height if data was changed in the meantime, window was resized, etc.\n      // For optimal behavior call manually updateStartHeight() from the parent component before initiating the update.\n      this.updateStartHeight();\n    }\n\n    updateStartHeight() {\n      this.startHeight = this.domAdapter.computedHeight(this.element.nativeElement) || 0;\n    }\n\n  }\n\n  ClrExpandableAnimation.ɵfac = function ClrExpandableAnimation_Factory(t) {\n    return new (t || ClrExpandableAnimation)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(DomAdapter));\n  };\n\n  ClrExpandableAnimation.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ClrExpandableAnimation,\n    selectors: [[\"clr-expandable-animation\"]],\n    hostVars: 1,\n    hostBindings: function ClrExpandableAnimation_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵsyntheticHostListener(\"@expandAnimation.done\", function ClrExpandableAnimation_animation_expandAnimation_done_HostBindingHandler() {\n          return ctx.animationDone();\n        });\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵsyntheticHostProperty(\"@expandAnimation\", ctx.expandAnimation);\n      }\n    },\n    inputs: {\n      clrExpandTrigger: \"clrExpandTrigger\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([DomAdapter])],\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function ClrExpandableAnimation_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    styles: [_c77],\n    data: {\n      animation: [trigger('expandAnimation', [transition('true <=> false', [style({\n        height: '{{startHeight}}px',\n        overflow: 'hidden'\n      }), animate('0.2s ease-in-out', style({\n        height: '*'\n      }))])])]\n    }\n  });\n  return ClrExpandableAnimation;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nconst EXPANDABLE_ANIMATION_DIRECTIVES = [ClrExpandableAnimation];\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nlet ClrExpandableAnimationModule = /*#__PURE__*/(() => {\n  class ClrExpandableAnimationModule {}\n\n  ClrExpandableAnimationModule.ɵfac = function ClrExpandableAnimationModule_Factory(t) {\n    return new (t || ClrExpandableAnimationModule)();\n  };\n\n  ClrExpandableAnimationModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: ClrExpandableAnimationModule\n  });\n  ClrExpandableAnimationModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule]]\n  });\n  return ClrExpandableAnimationModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ClrExpandableAnimationModule, {\n    declarations: function () {\n      return [ClrExpandableAnimation];\n    },\n    imports: function () {\n      return [CommonModule];\n    },\n    exports: function () {\n      return [ClrExpandableAnimation];\n    }\n  });\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nvar DragEventType = /*#__PURE__*/(() => {\n  (function (DragEventType) {\n    DragEventType[DragEventType[\"DRAG_START\"] = 0] = \"DRAG_START\";\n    DragEventType[DragEventType[\"DRAG_MOVE\"] = 1] = \"DRAG_MOVE\";\n    DragEventType[DragEventType[\"DRAG_END\"] = 2] = \"DRAG_END\";\n    DragEventType[DragEventType[\"DRAG_ENTER\"] = 3] = \"DRAG_ENTER\";\n    DragEventType[DragEventType[\"DRAG_LEAVE\"] = 4] = \"DRAG_LEAVE\";\n    DragEventType[DragEventType[\"DROP\"] = 5] = \"DROP\";\n  })(DragEventType || (DragEventType = {}));\n\n  return DragEventType;\n})();\n\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nlet DragAndDropEventBusService = /*#__PURE__*/(() => {\n  class DragAndDropEventBusService {\n    constructor() {\n      this.dragStart = new Subject();\n      this.dragMove = new Subject();\n      this.dragEnd = new Subject();\n      this.drop = new Subject();\n    }\n\n    get dragStarted() {\n      return this.dragStart.asObservable();\n    }\n\n    get dragMoved() {\n      return this.dragMove.asObservable();\n    }\n\n    get dragEnded() {\n      return this.dragEnd.asObservable();\n    }\n\n    get dropped() {\n      return this.drop.asObservable();\n    }\n\n    broadcast(event) {\n      switch (event.type) {\n        case DragEventType.DRAG_START:\n          this.dragStart.next(event);\n          break;\n\n        case DragEventType.DRAG_MOVE:\n          this.dragMove.next(event);\n          break;\n\n        case DragEventType.DRAG_END:\n          this.dragEnd.next(event);\n          break;\n\n        case DragEventType.DROP:\n          this.drop.next(event);\n          break;\n\n        default:\n          break;\n      }\n    }\n\n  }\n\n  DragAndDropEventBusService.ɵfac = function DragAndDropEventBusService_Factory(t) {\n    return new (t || DragAndDropEventBusService)();\n  };\n\n  DragAndDropEventBusService.ɵprov = i0.ɵɵdefineInjectable({\n    factory: function DragAndDropEventBusService_Factory() {\n      return new DragAndDropEventBusService();\n    },\n    token: DragAndDropEventBusService,\n    providedIn: \"root\"\n  });\n  return DragAndDropEventBusService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet DragEventListenerService = /*#__PURE__*/(() => {\n  class DragEventListenerService {\n    constructor(ngZone, renderer, eventBus) {\n      this.ngZone = ngZone;\n      this.renderer = renderer;\n      this.eventBus = eventBus; // contains listeners for the starting events such as mousedown and touchstart\n\n      this.listeners = [];\n      this.dragStart = new Subject();\n      this.dragMove = new Subject();\n      this.dragEnd = new Subject();\n      this.hasDragStarted = false;\n      this.dragStartDelay = 0;\n    }\n\n    get dragStarted() {\n      return this.dragStart.asObservable();\n    }\n\n    get dragMoved() {\n      return this.dragMove.asObservable();\n    }\n\n    get dragEnded() {\n      return this.dragEnd.asObservable();\n    }\n\n    get dragStartPosition() {\n      return this.initialPosition;\n    }\n\n    attachDragListeners(draggableEl) {\n      this.draggableEl = draggableEl;\n      this.listeners.push(this.customDragEvent(this.draggableEl, 'mousedown', 'mousemove', 'mouseup'));\n      this.listeners.push(this.customDragEvent(this.draggableEl, 'touchstart', 'touchmove', 'touchend'));\n    }\n\n    detachDragListeners() {\n      if (this.listeners) {\n        this.listeners.map(event => event());\n      } // In most cases, once users start dragging with mousedown/touchstart events,\n      // they will end dragging at one point with mouseup/touchend.\n      // However, there might be a few cases where mousedown/touchstart events get registered,\n      // but the draggable element gets removed before user ends dragging.\n      // In that case, we need to remove the attached listeners that happened during the mousedown/touchstart events.\n\n\n      if (this.nestedListeners) {\n        this.nestedListeners.map(event => event());\n      }\n\n      if (this.checkDragStartBoundaryListener) {\n        this.checkDragStartBoundaryListener();\n      }\n    }\n\n    getNativeEventObject(event) {\n      if (Object.prototype.hasOwnProperty.call(event, 'changedTouches')) {\n        return event.changedTouches[0];\n      } else {\n        return event;\n      }\n    }\n\n    customDragEvent(element, startOnEvent, moveOnEvent, endOnEvent) {\n      return this.renderer.listen(element, startOnEvent, startEvent => {\n        // save the initial point to initialPosition\n        // this will be used to calculate how far the draggable has been dragged from its initial position\n        this.initialPosition = {\n          pageX: this.getNativeEventObject(startEvent).pageX,\n          pageY: this.getNativeEventObject(startEvent).pageY\n        }; // Initialize nested listeners' property with a new empty array;\n\n        this.nestedListeners = []; // This is needed to disable selection during dragging (especially in EDGE/IE11).\n\n        this.nestedListeners.push(this.renderer.listen('document', 'selectstart', selectEvent => {\n          selectEvent.preventDefault();\n          selectEvent.stopImmediatePropagation();\n        })); // Listen to mousemove/touchmove events outside of angular zone.\n\n        this.ngZone.runOutsideAngular(() => {\n          // During the drag start delay, pointer should stay within the boundary.\n          this.checkDragStartBoundary(moveOnEvent);\n          this.dragStartDelayTimeout = setTimeout(() => {\n            if (this.checkDragStartBoundaryListener) {\n              this.checkDragStartBoundaryListener();\n            }\n\n            this.hasDragStarted = true; // Fire \"dragstart\"\n\n            this.broadcast(startEvent, DragEventType.DRAG_START);\n            this.nestedListeners.push(this.renderer.listen('document', moveOnEvent, moveEvent => {\n              // Event.stopImmediatePropagation() is needed here to prevent nested draggables from getting dragged\n              // altogether. We shouldn't use Event.stopPropagation() here as we are listening to the events\n              // on the global element level.\n              // With Event.stopImmediatePropagation(), it registers the events sent from the inner most draggable\n              // first. Then immediately after that, it stops listening to the same type of events on the same\n              // element. So this will help us to not register the same events that would come from the parent\n              // level draggables eventually.\n              moveEvent.stopImmediatePropagation();\n\n              if (this.hasDragStarted) {\n                // Fire \"dragmove\"\n                this.broadcast(moveEvent, DragEventType.DRAG_MOVE);\n              }\n            }));\n          }, this.dragStartDelay);\n        }); // Listen to mouseup/touchend events.\n\n        this.nestedListeners.push(this.renderer.listen('document', endOnEvent, endEvent => {\n          if (this.hasDragStarted) {\n            // Fire \"dragend\" only if dragstart is registered\n            this.hasDragStarted = false;\n            this.broadcast(endEvent, DragEventType.DRAG_END);\n          }\n\n          clearTimeout(this.dragStartDelayTimeout); // We must remove the the nested listeners every time drag completes.\n\n          this.nestedListeners.map(event => event()); // We must remove the event listener from checkDragStartBoundary\n\n          if (this.checkDragStartBoundaryListener) {\n            this.checkDragStartBoundaryListener();\n          }\n        }));\n      });\n    }\n\n    checkDragStartBoundary(eventType) {\n      this.checkDragStartBoundaryListener = this.renderer.listen('document', eventType, moveEvent => {\n        const deltaX = Math.abs(this.getNativeEventObject(moveEvent).pageX - this.initialPosition.pageX);\n        const deltaY = Math.abs(this.getNativeEventObject(moveEvent).pageY - this.initialPosition.pageY); // If pointer move delta exceeds horizontal or vertical threshold,\n        // we should cancel drag initiation.\n\n        if (deltaX > 1 || deltaY > 1) {\n          clearTimeout(this.dragStartDelayTimeout);\n\n          if (this.checkDragStartBoundaryListener) {\n            this.checkDragStartBoundaryListener();\n          }\n        }\n      });\n    }\n\n    broadcast(event, eventType) {\n      const dragEvent = this.generateDragEvent(event, eventType);\n\n      switch (dragEvent.type) {\n        case DragEventType.DRAG_START:\n          this.dragStart.next(dragEvent);\n          break;\n\n        case DragEventType.DRAG_MOVE:\n          this.dragMove.next(dragEvent);\n          break;\n\n        case DragEventType.DRAG_END:\n          this.dragEnd.next(dragEvent);\n          break;\n\n        default:\n          break;\n      } // The following properties are set after they are broadcasted to the DraggableGhost component.\n\n\n      dragEvent.ghostElement = this.ghostElement;\n      dragEvent.dropPointPosition = this.dropPointPosition;\n      this.eventBus.broadcast(dragEvent);\n    }\n\n    generateDragEvent(event, eventType) {\n      const nativeEvent = this.getNativeEventObject(event);\n      return {\n        type: eventType,\n        dragPosition: {\n          pageX: nativeEvent.pageX,\n          pageY: nativeEvent.pageY,\n          moveX: nativeEvent.pageX - this.initialPosition.pageX,\n          moveY: nativeEvent.pageY - this.initialPosition.pageY\n        },\n        group: this.group,\n        dragDataTransfer: this.dragDataTransfer,\n        ghostElement: this.ghostElement\n      };\n    }\n\n  }\n\n  DragEventListenerService.ɵfac = function DragEventListenerService_Factory(t) {\n    return new (t || DragEventListenerService)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(ɵngcc0.Renderer2), ɵngcc0.ɵɵinject(DragAndDropEventBusService));\n  };\n\n  DragEventListenerService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: DragEventListenerService,\n    factory: DragEventListenerService.ɵfac\n  });\n  return DragEventListenerService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n// This provider registers the drag handle element.\n// When it registers a element as a drag handle, it attaches that element to the listeners from ClrDragEventListener.\n// Also, it adds the \"drag-handle\" css class to the registered element through Renderer.\n\n\nlet DragHandleRegistrarService = /*#__PURE__*/(() => {\n  class DragHandleRegistrarService {\n    constructor(dragEventListener, renderer) {\n      this.dragEventListener = dragEventListener;\n      this.renderer = renderer;\n    }\n\n    get defaultHandleEl() {\n      return this._defaultHandleEl;\n    }\n\n    set defaultHandleEl(el) {\n      this._defaultHandleEl = el; // defaultHandleEl will be usually the clrDraggable element.\n      // If the customHandleEl has been registered,\n      // don't make the defaultHandleEl the drag handle yet until the customHandleEl is unregistered.\n\n      if (!this._customHandleEl) {\n        this.makeElementHandle(this._defaultHandleEl);\n      }\n    }\n\n    makeElementHandle(el) {\n      if (this._defaultHandleEl && this._defaultHandleEl !== el) {\n        // Before making an element the custom handle element,\n        // we should remove the existing drag-handle class from the draggable element.\n        this.renderer.removeClass(this._defaultHandleEl, 'drag-handle');\n      }\n\n      this.dragEventListener.attachDragListeners(el);\n      this.renderer.addClass(el, 'drag-handle');\n    }\n\n    get customHandleEl() {\n      return this._customHandleEl;\n    }\n\n    registerCustomHandle(el) {\n      this.dragEventListener.detachDragListeners(); // removes the existing listeners\n\n      this._customHandleEl = el;\n      this.makeElementHandle(this._customHandleEl);\n    }\n\n    unregisterCustomHandle() {\n      this.dragEventListener.detachDragListeners(); // removes the existing listeners\n\n      this.renderer.removeClass(this._customHandleEl, 'drag-handle');\n      delete this._customHandleEl; // if default handle is set, make that handle\n\n      if (this._defaultHandleEl) {\n        this.makeElementHandle(this._defaultHandleEl);\n      }\n    }\n\n  }\n\n  DragHandleRegistrarService.ɵfac = function DragHandleRegistrarService_Factory(t) {\n    return new (t || DragHandleRegistrarService)(ɵngcc0.ɵɵinject(DragEventListenerService), ɵngcc0.ɵɵinject(ɵngcc0.Renderer2));\n  };\n\n  DragHandleRegistrarService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: DragHandleRegistrarService,\n    factory: DragHandleRegistrarService.ɵfac\n  });\n  return DragHandleRegistrarService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrDragHandle = /*#__PURE__*/(() => {\n  class ClrDragHandle {\n    constructor(el, dragHandleRegistrar) {\n      this.el = el;\n      this.dragHandleRegistrar = dragHandleRegistrar;\n\n      if (!this.dragHandleRegistrar) {\n        // ClrDragHandleRegistrar is provided in ClrDraggable so we expect it to be present here\n        // as clrDragHandle is required to be used only inside of a clrDraggable directive.\n        throw new Error('The clrDragHandle directive can only be used inside of a clrDraggable directive.');\n      }\n\n      this.dragHandleRegistrar.registerCustomHandle(this.el.nativeElement);\n    }\n\n    ngOnDestroy() {\n      this.dragHandleRegistrar.unregisterCustomHandle();\n    }\n\n  }\n\n  ClrDragHandle.ɵfac = function ClrDragHandle_Factory(t) {\n    return new (t || ClrDragHandle)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(DragHandleRegistrarService, 8));\n  };\n\n  ClrDragHandle.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: ClrDragHandle,\n    selectors: [[\"\", \"clrDragHandle\", \"\"]],\n    hostVars: 2,\n    hostBindings: function ClrDragHandle_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"drag-handle\", true);\n      }\n    }\n  });\n  return ClrDragHandle;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n// This service is used to capture the state of clrDraggable element\n// at a certain event and passes it to clrDraggableGhost component.\n\n\nlet DraggableSnapshotService = /*#__PURE__*/(() => {\n  class DraggableSnapshotService {\n    constructor(domAdapter) {\n      this.domAdapter = domAdapter;\n    }\n\n    capture(el, event) {\n      this.draggableElClientRect = this.domAdapter.clientRect(el);\n      this.snapshotDragEvent = event;\n    }\n\n    discard() {\n      delete this.draggableElClientRect;\n      delete this.snapshotDragEvent;\n    }\n\n    get hasDraggableState() {\n      return !!this.snapshotDragEvent && !!this.draggableElClientRect;\n    }\n\n    get clientRect() {\n      return this.draggableElClientRect;\n    }\n\n    get dragEvent() {\n      return this.snapshotDragEvent;\n    }\n\n  }\n\n  DraggableSnapshotService.ɵfac = function DraggableSnapshotService_Factory(t) {\n    return new (t || DraggableSnapshotService)(ɵngcc0.ɵɵinject(DomAdapter));\n  };\n\n  DraggableSnapshotService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: DraggableSnapshotService,\n    factory: DraggableSnapshotService.ɵfac\n  });\n  return DraggableSnapshotService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrDraggableGhost = /*#__PURE__*/(() => {\n  class ClrDraggableGhost {\n    constructor(el, dragEventListener, draggableSnapshot, renderer, ngZone) {\n      this.el = el;\n      this.dragEventListener = dragEventListener;\n      this.draggableSnapshot = draggableSnapshot;\n      this.renderer = renderer;\n      this.ngZone = ngZone;\n      this.subscriptions = [];\n      this.leaveAnimConfig = {\n        value: 0,\n        params: {\n          top: '0px',\n          left: '0px'\n        }\n      };\n\n      if (!this.dragEventListener || !this.draggableSnapshot) {\n        throw new Error('The clr-draggable-ghost component can only be used inside of a clrDraggable directive.');\n      }\n\n      this.draggableGhostEl = this.el.nativeElement; // Need to use Renderer2 as it runs outside of NgZone\n\n      this.renderer.addClass(this.draggableGhostEl, 'draggable-ghost'); // Register the ghost element in DragEventListener to pass in a ClrDragEvent.\n\n      this.dragEventListener.ghostElement = this.draggableGhostEl; // Default ghost size gets the size of ClrDraggable element.\n\n      this.setDefaultGhostSize(this.draggableGhostEl);\n      const offset = {\n        top: this.draggableSnapshot.hasDraggableState ? this.draggableSnapshot.dragEvent.dragPosition.pageY - this.draggableSnapshot.clientRect.top : 0,\n        left: this.draggableSnapshot.hasDraggableState ? this.draggableSnapshot.dragEvent.dragPosition.pageX - this.draggableSnapshot.clientRect.left : 0\n      };\n      let isAnimationConfigured = false;\n      this.subscriptions.push(this.dragEventListener.dragMoved.subscribe(event => {\n        // On the first drag move event, we configure the animation as it's dependent on the first drag event.\n        if (!isAnimationConfigured) {\n          if (this.draggableSnapshot.hasDraggableState) {\n            this.animateToOnLeave(`${this.draggableSnapshot.clientRect.top}px`, `${this.draggableSnapshot.clientRect.left}px`);\n          } else {\n            this.animateToOnLeave(`${this.dragEventListener.dragStartPosition.pageY}px`, `${this.dragEventListener.dragStartPosition.pageY}px`);\n          }\n\n          isAnimationConfigured = true;\n        } // Position the draggable ghost.\n\n\n        const topLeftPosition = this.findTopLeftPosition(event.dragPosition, offset);\n        this.setPositionStyle(this.draggableGhostEl, topLeftPosition.pageX, topLeftPosition.pageY);\n        this.dragEventListener.dropPointPosition = this.findDropPointPosition(topLeftPosition);\n      }));\n    }\n\n    setDefaultGhostSize(el) {\n      if (this.draggableSnapshot.hasDraggableState) {\n        this.setSizeStyle(el, this.draggableSnapshot.clientRect.width, this.draggableSnapshot.clientRect.height);\n      }\n    }\n\n    animateToOnLeave(top, left) {\n      this.ngZone.run(() => {\n        this.leaveAnimConfig = {\n          value: 0,\n          params: {\n            top: top,\n            left: left\n          }\n        };\n      });\n    }\n\n    findTopLeftPosition(dragPosition, offset) {\n      return {\n        pageX: dragPosition.pageX - offset.left,\n        pageY: dragPosition.pageY - offset.top\n      };\n    }\n\n    findDropPointPosition(topLeftPosition) {\n      if (this.draggableSnapshot.hasDraggableState) {\n        return {\n          pageX: topLeftPosition.pageX + this.draggableSnapshot.clientRect.width / 2,\n          pageY: topLeftPosition.pageY + this.draggableSnapshot.clientRect.height / 2\n        };\n      } else {\n        return topLeftPosition;\n      }\n    }\n\n    setSizeStyle(el, width, height) {\n      this.renderer.setStyle(el, 'width', `${width}px`);\n      this.renderer.setStyle(el, 'height', `${height}px`);\n    }\n\n    setPositionStyle(el, left, top) {\n      this.renderer.setStyle(el, 'left', `${left}px`);\n      this.renderer.setStyle(el, 'top', `${top}px`);\n      this.renderer.setStyle(el, 'visibility', 'visible');\n    }\n\n    ngOnDestroy() {\n      this.subscriptions.forEach(sub => sub.unsubscribe());\n    }\n\n  }\n\n  ClrDraggableGhost.ɵfac = function ClrDraggableGhost_Factory(t) {\n    return new (t || ClrDraggableGhost)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(DragEventListenerService, 8), ɵngcc0.ɵɵdirectiveInject(DraggableSnapshotService, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  ClrDraggableGhost.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ClrDraggableGhost,\n    selectors: [[\"clr-draggable-ghost\"]],\n    hostVars: 1,\n    hostBindings: function ClrDraggableGhost_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵsyntheticHostProperty(\"@leaveAnimation\", ctx.leaveAnimConfig);\n      }\n    },\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function ClrDraggableGhost_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2,\n    data: {\n      animation: [trigger('leaveAnimation', [transition(':leave', [style({\n        left: '*',\n        top: '*'\n      }), animate('0.2s ease-in-out', style({\n        top: '{{top}}',\n        left: '{{left}}'\n      }))])])]\n    }\n  });\n  return ClrDraggableGhost;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n// This class is used to convert an internal event\n// to an external event to be emitted.\n\n\nclass ClrDragEvent {\n  constructor(dragEvent) {\n    this.dragPosition = dragEvent.dragPosition;\n    this.group = dragEvent.group;\n    this.dragDataTransfer = dragEvent.dragDataTransfer;\n    this.dropPointPosition = dragEvent.dropPointPosition;\n  }\n\n}\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n// This structural directive will be used mainly together with `clr-draggable-ghost` directive inside of clrDraggable\n// directive. The directive is responsible for instantiating `clr-draggable-ghost` directive only during dragging so\n// that Angular Change Detection is prevented from running if a component or directive is placed inside of the\n// `clr-draggable-ghost` directive.\n\n\nlet ClrIfDragged = /*#__PURE__*/(() => {\n  class ClrIfDragged {\n    constructor(template, container, dragEventListener) {\n      this.template = template;\n      this.container = container;\n      this.dragEventListener = dragEventListener;\n      this.subscriptions = [];\n\n      if (!this.dragEventListener || !this.container) {\n        throw new Error('The *clrIfDragged directive can only be used inside of a clrDraggable directive.');\n      }\n\n      this.subscriptions.push(this.dragEventListener.dragStarted.subscribe(() => {\n        this.container.createEmbeddedView(this.template);\n      }));\n      this.subscriptions.push(this.dragEventListener.dragEnded.subscribe(() => {\n        this.container.clear();\n      }));\n    }\n\n    ngOnDestroy() {\n      this.subscriptions.forEach(sub => sub.unsubscribe());\n    }\n\n  }\n\n  ClrIfDragged.ɵfac = function ClrIfDragged_Factory(t) {\n    return new (t || ClrIfDragged)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef, 12), ɵngcc0.ɵɵdirectiveInject(DragEventListenerService, 8));\n  };\n\n  ClrIfDragged.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: ClrIfDragged,\n    selectors: [[\"\", \"clrIfDragged\", \"\"]]\n  });\n  return ClrIfDragged;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n// This service class adds and removes the \"in-drag\" class to the document body element\n// through its public enter() and exit() methods.\n\n\nlet GlobalDragModeService = /*#__PURE__*/(() => {\n  class GlobalDragModeService {\n    constructor(renderer) {\n      this.renderer = renderer;\n    }\n\n    enter() {\n      this.renderer.addClass(document.body, 'in-drag');\n    }\n\n    exit() {\n      this.renderer.removeClass(document.body, 'in-drag');\n    }\n\n  }\n\n  GlobalDragModeService.ɵfac = function GlobalDragModeService_Factory(t) {\n    return new (t || GlobalDragModeService)(ɵngcc0.ɵɵinject(ɵngcc0.Renderer2));\n  };\n\n  GlobalDragModeService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: GlobalDragModeService,\n    factory: GlobalDragModeService.ɵfac\n  });\n  return GlobalDragModeService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrDraggable = /*#__PURE__*/(() => {\n  class ClrDraggable {\n    constructor(el, dragEventListener, dragHandleRegistrar, viewContainerRef, cfr, injector, draggableSnapshot, globalDragMode) {\n      this.el = el;\n      this.dragEventListener = dragEventListener;\n      this.dragHandleRegistrar = dragHandleRegistrar;\n      this.viewContainerRef = viewContainerRef;\n      this.cfr = cfr;\n      this.injector = injector;\n      this.draggableSnapshot = draggableSnapshot;\n      this.globalDragMode = globalDragMode;\n      this.subscriptions = [];\n      this.dragOn = false;\n      this.dragStartEmitter = new EventEmitter();\n      this.dragMoveEmitter = new EventEmitter();\n      this.dragEndEmitter = new EventEmitter();\n      this.draggableEl = this.el.nativeElement;\n      this.componentFactory = this.cfr.resolveComponentFactory(ClrDraggableGhost);\n    }\n\n    set dataTransfer(value) {\n      this.dragEventListener.dragDataTransfer = value;\n    }\n\n    set group(value) {\n      this.dragEventListener.group = value;\n    }\n\n    set dragStartDelay(value) {\n      if (typeof value === 'number') {\n        this.dragEventListener.dragStartDelay = value;\n      } else if (typeof value === 'string') {\n        this.dragEventListener.dragStartDelay = parseInt(value, 10) || 0;\n      }\n    }\n\n    createDefaultGhost(event) {\n      this.draggableSnapshot.capture(this.draggableEl, event); // NOTE: The default ghost element will appear\n      // next to the clrDraggable in the DOM as a sibling element.\n\n      this.viewContainerRef.createComponent(this.componentFactory, 0, this.injector, [[this.draggableEl.cloneNode(true)]]);\n    }\n\n    destroyDefaultGhost() {\n      this.viewContainerRef.clear();\n      this.draggableSnapshot.discard();\n    }\n\n    ngAfterContentInit() {\n      this.dragHandleRegistrar.defaultHandleEl = this.draggableEl;\n      this.subscriptions.push(this.dragEventListener.dragStarted.subscribe(event => {\n        this.globalDragMode.enter();\n        this.dragOn = true;\n\n        if (!this.customGhost) {\n          this.createDefaultGhost(event);\n        }\n\n        this.dragStartEmitter.emit(new ClrDragEvent(event));\n      }));\n      this.subscriptions.push(this.dragEventListener.dragMoved.subscribe(event => {\n        this.dragMoveEmitter.emit(new ClrDragEvent(event));\n      }));\n      this.subscriptions.push(this.dragEventListener.dragEnded.subscribe(event => {\n        this.globalDragMode.exit();\n        this.dragOn = false;\n\n        if (!this.customGhost) {\n          this.destroyDefaultGhost();\n        }\n\n        this.dragEndEmitter.emit(new ClrDragEvent(event));\n      }));\n    }\n\n    ngOnDestroy() {\n      this.subscriptions.forEach(sub => sub.unsubscribe());\n      this.dragEventListener.detachDragListeners();\n    }\n\n  }\n\n  ClrDraggable.ɵfac = function ClrDraggable_Factory(t) {\n    return new (t || ClrDraggable)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(DragEventListenerService), ɵngcc0.ɵɵdirectiveInject(DragHandleRegistrarService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector), ɵngcc0.ɵɵdirectiveInject(DraggableSnapshotService), ɵngcc0.ɵɵdirectiveInject(GlobalDragModeService));\n  };\n\n  ClrDraggable.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: ClrDraggable,\n    selectors: [[\"\", \"clrDraggable\", \"\"]],\n    contentQueries: function ClrDraggable_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, ClrIfDragged, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.customGhost = _t.first);\n      }\n    },\n    hostVars: 4,\n    hostBindings: function ClrDraggable_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"draggable\", true)(\"being-dragged\", ctx.dragOn);\n      }\n    },\n    inputs: {\n      dataTransfer: [\"clrDraggable\", \"dataTransfer\"],\n      group: [\"clrGroup\", \"group\"],\n      dragStartDelay: [\"clrDragStartDelay\", \"dragStartDelay\"]\n    },\n    outputs: {\n      dragStartEmitter: \"clrDragStart\",\n      dragMoveEmitter: \"clrDragMove\",\n      dragEndEmitter: \"clrDragEnd\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([DragEventListenerService, DragHandleRegistrarService, DraggableSnapshotService, GlobalDragModeService, DomAdapter])]\n  });\n  return ClrDraggable;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrDroppable = /*#__PURE__*/(() => {\n  class ClrDroppable {\n    constructor(el, eventBus, domAdapter, renderer) {\n      this.el = el;\n      this.eventBus = eventBus;\n      this.domAdapter = domAdapter;\n      this.renderer = renderer;\n      this.isDraggableMatch = false;\n      this._isDraggableOver = false;\n      this._dropTolerance = {\n        top: 0,\n        right: 0,\n        bottom: 0,\n        left: 0\n      };\n      this.dragStartEmitter = new EventEmitter();\n      this.dragMoveEmitter = new EventEmitter();\n      this.dragEndEmitter = new EventEmitter();\n      this.dragLeaveEmitter = new EventEmitter();\n      this.dragEnterEmitter = new EventEmitter();\n      this.dropEmitter = new EventEmitter();\n      this.droppableEl = this.el.nativeElement;\n    }\n\n    set isDraggableOver(value) {\n      // We need to add/remove this draggable-over class via Renderer2\n      // because isDraggableOver is set outside of NgZone.\n      if (value) {\n        this.renderer.addClass(this.droppableEl, 'draggable-over');\n      } else {\n        this.renderer.removeClass(this.droppableEl, 'draggable-over');\n      }\n\n      this._isDraggableOver = value;\n    }\n\n    set group(value) {\n      this._group = value;\n    }\n\n    dropToleranceGenerator(top = 0, right = top, bottom = top, left = right) {\n      return {\n        top,\n        right,\n        bottom,\n        left\n      };\n    }\n\n    set dropTolerance(value) {\n      // If user provides an object here and wants to manipulate/update properties individually,\n      // the object must be immutable as we generate new object based user's given object.\n      if (typeof value === 'number') {\n        this._dropTolerance = this.dropToleranceGenerator(value);\n      } else if (typeof value === 'string') {\n        const toleranceValues = value.trim().split(/\\s+/).map(tolerance => parseInt(tolerance, 10));\n        this._dropTolerance = this.dropToleranceGenerator(...toleranceValues);\n      } else if (value) {\n        // The value could be passed in as {left: 20, top: 30 }\n        // In this case, the rest of the direction properties should be 0.\n        // That's why we initialize properties with 0 first, then override with user's given value.\n        this._dropTolerance = Object.assign(Object.assign({}, this.dropToleranceGenerator(0)), value);\n      }\n    }\n\n    unsubscribeFrom(subscription) {\n      if (subscription) {\n        subscription.unsubscribe();\n      }\n    }\n\n    checkGroupMatch(draggableGroup) {\n      // Both Draggable and Droppable have clrGroup input.\n      // The clrGroup input can be both a string key or array of string keys in Draggable and Droppable.\n      // It's not match if Draggable has no defined value assigned to clrGroup, but Droppable has a defined clrGroup.\n      if (!draggableGroup && this._group) {\n        return false;\n      } // The same is true the other way round.\n\n\n      if (!this._group && draggableGroup) {\n        return false;\n      } // It's match if both Draggable and Droppable have no assigned value for clrGroup.\n\n\n      if (!this._group && !draggableGroup) {\n        return true;\n      } // It's match if both Draggable and Droppable have simple string keys that are matching.\n      // It's match if Draggable's simple clrGroup key is matching with one of the clrGroup keys of Droppable. The\n      // same is true the other way round.\n      // it's match if one of the clrGroup keys of Droppable is matching with one of the clrGroup keys of Draggable.\n\n\n      if (typeof draggableGroup === 'string') {\n        if (typeof this._group === 'string') {\n          return this._group === draggableGroup;\n        } else {\n          return this._group.indexOf(draggableGroup) > -1;\n        }\n      } else {\n        if (typeof this._group === 'string') {\n          return draggableGroup.indexOf(this._group) > -1;\n        } else {\n          return this._group.some(groupKey => draggableGroup.indexOf(groupKey) > -1);\n        }\n      }\n    }\n\n    isInDropArea(point) {\n      if (!point) {\n        return false;\n      }\n\n      if (!this.clientRect) {\n        this.clientRect = this.domAdapter.clientRect(this.droppableEl);\n      }\n\n      if (point.pageX >= this.clientRect.left - this._dropTolerance.left && point.pageX <= this.clientRect.right + this._dropTolerance.right && point.pageY >= this.clientRect.top - this._dropTolerance.top && point.pageY <= this.clientRect.bottom + this._dropTolerance.bottom) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n    onDragStart(dragStartEvent) {\n      // Check draggable and droppable have a matching group key.\n      this.isDraggableMatch = this.checkGroupMatch(dragStartEvent.group); // Subscribe to dragMoved and dragEnded only if draggable and droppable have a matching group key.\n\n      if (this.isDraggableMatch) {\n        this.dragStartEmitter.emit(new ClrDragEvent(dragStartEvent));\n        this.dragMoveSubscription = this.eventBus.dragMoved.subscribe(dragMoveEvent => {\n          this.onDragMove(dragMoveEvent);\n        });\n        this.dragEndSubscription = this.eventBus.dragEnded.subscribe(dragEndEvent => {\n          this.onDragEnd(dragEndEvent);\n        });\n      }\n    }\n\n    onDragMove(dragMoveEvent) {\n      const isInDropArea = this.isInDropArea(dragMoveEvent.dropPointPosition);\n\n      if (!this._isDraggableOver && isInDropArea) {\n        this.isDraggableOver = true;\n        const dragEnterEvent = Object.assign(Object.assign({}, dragMoveEvent), {\n          type: DragEventType.DRAG_ENTER\n        });\n        this.eventBus.broadcast(dragEnterEvent);\n        this.dragEnterEmitter.emit(new ClrDragEvent(dragEnterEvent));\n      } else if (this._isDraggableOver && !isInDropArea) {\n        this.isDraggableOver = false;\n        const dragLeaveEvent = Object.assign(Object.assign({}, dragMoveEvent), {\n          type: DragEventType.DRAG_LEAVE\n        });\n        this.eventBus.broadcast(dragLeaveEvent);\n        this.dragLeaveEmitter.emit(new ClrDragEvent(dragLeaveEvent));\n      }\n\n      this.dragMoveEmitter.emit(new ClrDragEvent(dragMoveEvent));\n    }\n\n    onDragEnd(dragEndEvent) {\n      if (this._isDraggableOver) {\n        if (dragEndEvent.ghostElement) {\n          // By this point, the draggable ghost component is destroyed,\n          // but the element would be active until its animation completes.\n          // As such, once the ghost is dropped over, we will give it \"dropped\" class.\n          // This process cannot be done in the ghost component\n          // because any subscription to the drop event is ineffective or invalid\n          // as the component had been already destroyed.\n          this.renderer.addClass(dragEndEvent.ghostElement, 'dropped');\n        }\n\n        const dropEvent = Object.assign(Object.assign({}, dragEndEvent), {\n          type: DragEventType.DROP\n        });\n        this.eventBus.broadcast(dropEvent);\n        this.dropEmitter.emit(new ClrDragEvent(dropEvent));\n        this.isDraggableOver = false;\n      }\n\n      this.dragEndEmitter.emit(new ClrDragEvent(dragEndEvent));\n      this.unsubscribeFrom(this.dragMoveSubscription);\n      this.unsubscribeFrom(this.dragEndSubscription);\n      this.isDraggableMatch = false;\n      delete this.clientRect;\n    }\n\n    ngOnInit() {\n      this.dragStartSubscription = this.eventBus.dragStarted.subscribe(dragStartEvent => {\n        this.onDragStart(dragStartEvent);\n      });\n    }\n\n    ngOnDestroy() {\n      this.unsubscribeFrom(this.dragStartSubscription);\n      this.unsubscribeFrom(this.dragMoveSubscription);\n      this.unsubscribeFrom(this.dragEndSubscription);\n    }\n\n  }\n\n  ClrDroppable.ɵfac = function ClrDroppable_Factory(t) {\n    return new (t || ClrDroppable)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(DragAndDropEventBusService), ɵngcc0.ɵɵdirectiveInject(DomAdapter), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2));\n  };\n\n  ClrDroppable.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: ClrDroppable,\n    selectors: [[\"\", \"clrDroppable\", \"\"]],\n    hostVars: 4,\n    hostBindings: function ClrDroppable_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"droppable\", true)(\"draggable-match\", ctx.isDraggableMatch);\n      }\n    },\n    inputs: {\n      group: [\"clrGroup\", \"group\"],\n      dropTolerance: [\"clrDropTolerance\", \"dropTolerance\"]\n    },\n    outputs: {\n      dragStartEmitter: \"clrDragStart\",\n      dragMoveEmitter: \"clrDragMove\",\n      dragEndEmitter: \"clrDragEnd\",\n      dragLeaveEmitter: \"clrDragLeave\",\n      dragEnterEmitter: \"clrDragEnter\",\n      dropEmitter: \"clrDrop\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([DomAdapter])]\n  });\n  return ClrDroppable;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nconst CLR_DRAG_AND_DROP_DIRECTIVES = [ClrDraggable, ClrDroppable, ClrIfDragged, ClrDragHandle, ClrDraggableGhost];\nlet ClrDragAndDropModule = /*#__PURE__*/(() => {\n  class ClrDragAndDropModule {}\n\n  ClrDragAndDropModule.ɵfac = function ClrDragAndDropModule_Factory(t) {\n    return new (t || ClrDragAndDropModule)();\n  };\n\n  ClrDragAndDropModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: ClrDragAndDropModule\n  });\n  ClrDragAndDropModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule]]\n  });\n  return ClrDragAndDropModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ClrDragAndDropModule, {\n    declarations: function () {\n      return [ClrDraggable, ClrDroppable, ClrIfDragged, ClrDragHandle, ClrDraggableGhost];\n    },\n    imports: function () {\n      return [CommonModule];\n    },\n    exports: function () {\n      return [ClrDraggable, ClrDroppable, ClrIfDragged, ClrDragHandle, ClrDraggableGhost];\n    }\n  });\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nconst FOCUS_ON_VIEW_INIT = new InjectionToken('FOCUS_ON_VIEW_INIT'); // This provider holds the default value for clrFocusOnViewInit directive's isEnabled property.\n// So users can interject this provider and set their own value for this provider.\n\nconst FOCUS_ON_VIEW_INIT_PROVIDER = {\n  provide: FOCUS_ON_VIEW_INIT,\n  useValue: true\n};\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/*  This directive is for guiding the document focus to the newly added content when its view is initialized\n    so that assistive technologies can read its content. */\n\nlet ClrFocusOnViewInit = /*#__PURE__*/(() => {\n  class ClrFocusOnViewInit {\n    constructor(el, platformId, focusOnViewInit, document, renderer) {\n      this.el = el;\n      this.platformId = platformId;\n      this.focusOnViewInit = focusOnViewInit;\n      this.renderer = renderer;\n      this.directFocus = true; // true if the element gets focused without need to set tabindex;\n\n      this._isEnabled = this.focusOnViewInit; // Angular compiler doesn't understand the type Document\n      // when working out the metadata for injectable parameters,\n      // even though it understands the injection token DOCUMENT\n      // https://github.com/angular/angular/issues/20351\n\n      this.document = document;\n    }\n\n    onFocusout() {\n      if (!this.directFocus) {\n        // manually set attributes and styles should be removed\n        this.renderer.removeAttribute(this.el.nativeElement, 'tabindex');\n        this.renderer.setStyle(this.el.nativeElement, 'outline', null);\n      }\n    }\n\n    set isEnabled(value) {\n      if (this.focusOnViewInit && typeof value === 'boolean') {\n        this._isEnabled = value;\n      }\n    }\n\n    ngAfterViewInit() {\n      this.focus();\n    }\n\n    focus() {\n      if (!isPlatformBrowser(this.platformId)) {\n        return;\n      }\n\n      if (!this._isEnabled) {\n        return;\n      }\n\n      if (this.document && this.document.activeElement !== this.el.nativeElement) {\n        this.el.nativeElement.focus();\n\n        if (this.document.activeElement !== this.el.nativeElement) {\n          // if it's not directly focused now, it means it was a non-interactive element\n          // so we need to give it a tabindex.\n          this.directFocus = false;\n          this.renderer.setAttribute(this.el.nativeElement, 'tabindex', '-1');\n          this.renderer.setStyle(this.el.nativeElement, 'outline', 'none');\n          this.el.nativeElement.focus();\n        }\n      }\n    }\n\n  }\n\n  ClrFocusOnViewInit.ɵfac = function ClrFocusOnViewInit_Factory(t) {\n    return new (t || ClrFocusOnViewInit)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID), ɵngcc0.ɵɵdirectiveInject(FOCUS_ON_VIEW_INIT), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2));\n  };\n\n  ClrFocusOnViewInit.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: ClrFocusOnViewInit,\n    selectors: [[\"\", \"clrFocusOnViewInit\", \"\"]],\n    hostBindings: function ClrFocusOnViewInit_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focusout\", function ClrFocusOnViewInit_focusout_HostBindingHandler() {\n          return ctx.onFocusout();\n        });\n      }\n    },\n    inputs: {\n      isEnabled: [\"clrFocusOnViewInit\", \"isEnabled\"]\n    }\n  });\n  return ClrFocusOnViewInit;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nconst FOCUS_ON_VIEW_INIT_DIRECTIVES = [ClrFocusOnViewInit];\nlet ClrFocusOnViewInitModule = /*#__PURE__*/(() => {\n  class ClrFocusOnViewInitModule {}\n\n  ClrFocusOnViewInitModule.ɵfac = function ClrFocusOnViewInitModule_Factory(t) {\n    return new (t || ClrFocusOnViewInitModule)();\n  };\n\n  ClrFocusOnViewInitModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: ClrFocusOnViewInitModule\n  });\n  ClrFocusOnViewInitModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    providers: [FOCUS_ON_VIEW_INIT_PROVIDER],\n    imports: [[CommonModule]]\n  });\n  return ClrFocusOnViewInitModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ClrFocusOnViewInitModule, {\n    declarations: function () {\n      return [ClrFocusOnViewInit];\n    },\n    imports: function () {\n      return [CommonModule];\n    },\n    exports: function () {\n      return [ClrFocusOnViewInit];\n    }\n  });\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nconst CLR_LOADING_DIRECTIVES = [ClrLoading];\nlet ClrLoadingModule = /*#__PURE__*/(() => {\n  class ClrLoadingModule {}\n\n  ClrLoadingModule.ɵfac = function ClrLoadingModule_Factory(t) {\n    return new (t || ClrLoadingModule)();\n  };\n\n  ClrLoadingModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: ClrLoadingModule\n  });\n  ClrLoadingModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule]]\n  });\n  return ClrLoadingModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ClrLoadingModule, {\n    declarations: function () {\n      return [ClrLoading];\n    },\n    imports: function () {\n      return [CommonModule];\n    },\n    exports: function () {\n      return [ClrLoading];\n    }\n  });\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet OutsideClick = /*#__PURE__*/(() => {\n  class OutsideClick {\n    constructor(host, renderer, ngZone) {\n      this.strict = false;\n      this.outsideClick = new EventEmitter(false);\n      ngZone.runOutsideAngular(() => {\n        this.documentClickListener = renderer.listen('document', 'click', event => {\n          // Compare the element in the DOM on which the mouse was clicked\n          // with the current actionMenu native HTML element.\n          if (host.nativeElement === event.target) {\n            return;\n          }\n\n          if (!this.strict && host.nativeElement.contains(event.target)) {\n            return;\n          } // We'll run change detection only if the click event actually happened outside of\n          // the host element.\n\n\n          ngZone.run(() => {\n            this.outsideClick.emit(event);\n          });\n        });\n      });\n    }\n\n    ngOnDestroy() {\n      this.documentClickListener();\n    }\n\n  }\n\n  OutsideClick.ɵfac = function OutsideClick_Factory(t) {\n    return new (t || OutsideClick)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  OutsideClick.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: OutsideClick,\n    selectors: [[\"\", \"clrOutsideClick\", \"\"]],\n    inputs: {\n      strict: [\"clrStrict\", \"strict\"]\n    },\n    outputs: {\n      outsideClick: \"clrOutsideClick\"\n    }\n  });\n  return OutsideClick;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nconst OUSTIDE_CLICK_DIRECTIVES = [OutsideClick];\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nlet ClrOutsideClickModule = /*#__PURE__*/(() => {\n  class ClrOutsideClickModule {}\n\n  ClrOutsideClickModule.ɵfac = function ClrOutsideClickModule_Factory(t) {\n    return new (t || ClrOutsideClickModule)();\n  };\n\n  ClrOutsideClickModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: ClrOutsideClickModule\n  });\n  ClrOutsideClickModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule]]\n  });\n  return ClrOutsideClickModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ClrOutsideClickModule, {\n    declarations: function () {\n      return [OutsideClick];\n    },\n    imports: function () {\n      return [CommonModule];\n    },\n    exports: function () {\n      return [OutsideClick];\n    }\n  });\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nclass CustomFilter {}\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/*\n * This provider implements some form of synchronous debouncing through a lock pattern\n * to avoid emitting multiple state changes for a single user action.\n */\n\n\nlet StateDebouncer = /*#__PURE__*/(() => {\n  class StateDebouncer {\n    constructor() {\n      /**\n       * The Observable that lets other classes subscribe to global state changes\n       */\n      this._change = new Subject();\n      /*\n       * This is the lock, to only emit once all the changes have finished processing\n       */\n\n      this.nbChanges = 0;\n    } // We do not want to expose the Subject itself, but the Observable which is read-only\n\n\n    get change() {\n      return this._change.asObservable();\n    }\n\n    changeStart() {\n      this.nbChanges++;\n    }\n\n    changeDone() {\n      if (--this.nbChanges === 0) {\n        this._change.next();\n      }\n    }\n\n  }\n\n  StateDebouncer.ɵfac = function StateDebouncer_Factory(t) {\n    return new (t || StateDebouncer)();\n  };\n\n  StateDebouncer.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: StateDebouncer,\n    factory: StateDebouncer.ɵfac\n  });\n  return StateDebouncer;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet Page = /*#__PURE__*/(() => {\n  class Page {\n    constructor(stateDebouncer) {\n      this.stateDebouncer = stateDebouncer;\n      this.preventEmit = false;\n      this.activated = false;\n      /**\n       * Page size, a value of 0 means no pagination\n       */\n\n      this._size = 0;\n      /**\n       * The Observable that lets other classes subscribe to page changes\n       */\n\n      this._change = new Subject();\n      this._sizeChange = new Subject();\n      /**\n       * Current page\n       */\n\n      this._current = 1;\n    }\n\n    get size() {\n      return this._size;\n    }\n\n    set size(size) {\n      const oldSize = this._size;\n\n      if (size !== oldSize) {\n        if (!this.preventEmit) {\n          this.stateDebouncer.changeStart();\n        }\n\n        this._size = size;\n\n        if (size === 0) {\n          this._current = 1;\n        } else {\n          // Yeap. That's the formula to keep the first item from the old page still\n          // displayed in the new one.\n          this._current = Math.floor(oldSize / size * (this._current - 1)) + 1;\n        } // We always emit an event even if the current page index didn't change, because\n        // the size changing means the items inside the page are different\n\n\n        if (!this.preventEmit) {\n          this._change.next(this._current);\n\n          this._sizeChange.next(this._size);\n\n          this.stateDebouncer.changeDone();\n        }\n      }\n\n      this.preventEmit = false;\n    }\n\n    get totalItems() {\n      return this._totalItems || 0; // remains 0 if not set to avoid breaking change\n    }\n\n    set totalItems(total) {\n      this._totalItems = total; // If we have less items than before, we might need to change the current page\n\n      if (this.current > this.last) {\n        this.current = this.last;\n      }\n    }\n\n    get last() {\n      if (this._last) {\n        return this._last;\n      } // If the last page isn't known, we compute it from the last item's index\n\n\n      if (this.size > 0 && this.totalItems) {\n        return Math.ceil(this.totalItems / this.size);\n      }\n\n      return 1;\n    }\n\n    set last(page) {\n      this._last = page;\n    } // We do not want to expose the Subject itself, but the Observable which is read-only\n\n\n    get change() {\n      return this._change.asObservable();\n    }\n\n    get sizeChange() {\n      return this._sizeChange.asObservable();\n    }\n\n    get current() {\n      return this._current;\n    }\n\n    set current(page) {\n      if (page !== this._current) {\n        this.stateDebouncer.changeStart();\n        this._current = page;\n\n        this._change.next(page);\n\n        this.stateDebouncer.changeDone();\n      }\n    }\n    /**\n     * Moves to the previous page if it exists\n     */\n\n\n    previous() {\n      if (this.current > 1) {\n        this.current--;\n      }\n    }\n    /**\n     * Moves to the next page if it exists\n     */\n\n\n    next() {\n      if (this.current < this.last) {\n        this.current++;\n      }\n    }\n    /**\n     * Index of the first item displayed on the current page, starting at 0, -1 if none displayed\n     */\n\n\n    get firstItem() {\n      if (this._totalItems === 0) {\n        return -1;\n      }\n\n      if (this.size === 0) {\n        return 0;\n      }\n\n      return (this.current - 1) * this.size;\n    }\n    /**\n     * Index of the last item displayed on the current page, starting at 0, -1 if none displayed\n     */\n\n\n    get lastItem() {\n      if (this._totalItems === 0) {\n        return -1;\n      }\n\n      if (this.size === 0) {\n        return this.totalItems - 1;\n      }\n\n      let lastInPage = this.current * this.size - 1;\n\n      if (this.totalItems) {\n        lastInPage = Math.min(lastInPage, this.totalItems - 1);\n      }\n\n      return lastInPage;\n    }\n    /**\n     * Resets the page size to 0\n     */\n\n\n    resetPageSize(preventEmit = false) {\n      this.preventEmit = preventEmit;\n      this.size = 0;\n    }\n\n  }\n\n  Page.ɵfac = function Page_Factory(t) {\n    return new (t || Page)(ɵngcc0.ɵɵinject(StateDebouncer));\n  };\n\n  Page.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: Page,\n    factory: Page.ɵfac\n  });\n  return Page;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet FiltersProvider = /*#__PURE__*/(() => {\n  class FiltersProvider {\n    constructor(_page, stateDebouncer) {\n      this._page = _page;\n      this.stateDebouncer = stateDebouncer;\n      /**\n       * This subject is the list of filters that changed last, not the whole list.\n       * We emit a list rather than just one filter to allow batch changes to several at once.\n       */\n\n      this._change = new Subject();\n      /**\n       * List of all filters, whether they're active or not\n       */\n\n      this._all = [];\n    } // We do not want to expose the Subject itself, but the Observable which is read-only\n\n\n    get change() {\n      return this._change.asObservable();\n    }\n    /**\n     * Tests if at least one filter is currently active\n     */\n\n\n    hasActiveFilters() {\n      // We do not use getActiveFilters() because this function will be called much more often\n      // and stopping the loop early might be relevant.\n      for (const {\n        filter\n      } of this._all) {\n        if (filter && filter.isActive()) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n    /**\n     * Returns a list of all currently active filters\n     */\n\n\n    getActiveFilters() {\n      const ret = [];\n\n      for (const {\n        filter\n      } of this._all) {\n        if (filter && filter.isActive()) {\n          ret.push(filter);\n        }\n      }\n\n      return ret;\n    }\n    /**\n     * Registers a filter, and returns a deregistration function\n     */\n\n\n    add(filter) {\n      const subscription = filter.changes.subscribe(() => this.resetPageAndEmitFilterChange([filter]));\n      let hasUnregistered = false;\n      const registered = new RegisteredFilter(filter, () => {\n        if (hasUnregistered) {\n          return;\n        }\n\n        subscription.unsubscribe();\n\n        const matchIndex = this._all.findIndex(item => item.filter === filter);\n\n        if (matchIndex >= 0) {\n          this._all.splice(matchIndex, 1);\n        }\n\n        if (filter.isActive()) {\n          this.resetPageAndEmitFilterChange([]);\n        }\n\n        hasUnregistered = true;\n      });\n\n      this._all.push(registered);\n\n      if (filter.isActive()) {\n        this.resetPageAndEmitFilterChange([filter]);\n      }\n\n      return registered;\n    }\n    /**\n     * Accepts an item if it is accepted by all currently active filters\n     */\n\n\n    accepts(item) {\n      for (const {\n        filter\n      } of this._all) {\n        if (filter && filter.isActive() && !filter.accepts(item)) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    resetPageAndEmitFilterChange(filters) {\n      this.stateDebouncer.changeStart(); // filtering may change the page number such that current page number doesn't exist in the filtered dataset.\n      // So here we always set the current page to 1 so that it'll fetch first page's data with the given filter.\n\n      this._page.current = 1;\n\n      this._change.next(filters);\n\n      this.stateDebouncer.changeDone();\n    }\n\n  }\n\n  FiltersProvider.ɵfac = function FiltersProvider_Factory(t) {\n    return new (t || FiltersProvider)(ɵngcc0.ɵɵinject(Page), ɵngcc0.ɵɵinject(StateDebouncer));\n  };\n\n  FiltersProvider.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: FiltersProvider,\n    factory: FiltersProvider.ɵfac\n  });\n  return FiltersProvider;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nclass RegisteredFilter {\n  constructor(filter, unregister) {\n    this.filter = filter;\n    this.unregister = unregister;\n  }\n\n}\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet DatagridFilterRegistrar = /*#__PURE__*/(() => {\n  class DatagridFilterRegistrar {\n    constructor(filters) {\n      this.filters = filters;\n    }\n\n    get filter() {\n      return this.registered && this.registered.filter;\n    }\n\n    setFilter(filter) {\n      // If we previously had another filter, we unregister it\n      this.deleteFilter();\n\n      if (filter instanceof RegisteredFilter) {\n        this.registered = filter;\n      } else if (filter) {\n        this.registered = this.filters.add(filter);\n      }\n    }\n\n    deleteFilter() {\n      if (this.registered) {\n        this.registered.unregister();\n        delete this.registered;\n      }\n    }\n\n    ngOnDestroy() {\n      this.deleteFilter();\n    }\n\n  }\n\n  DatagridFilterRegistrar.ɵfac = function DatagridFilterRegistrar_Factory(t) {\n    return new (t || DatagridFilterRegistrar)(ɵngcc0.ɵɵdirectiveInject(FiltersProvider));\n  };\n\n  DatagridFilterRegistrar.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: DatagridFilterRegistrar\n  });\n  return DatagridFilterRegistrar;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/**\n * Custom filter that can be added in any column to override the default object property string filter.\n * The reason this is not just an input on DatagridColumn is because we need the filter's template to be projected,\n * since it can be anything (not just a text input).\n */\n\n\nlet ClrDatagridFilter = /*#__PURE__*/(() => {\n  class ClrDatagridFilter extends DatagridFilterRegistrar {\n    constructor(_filters, commonStrings, smartToggleService, platformId, popoverId) {\n      super(_filters);\n      this.commonStrings = commonStrings;\n      this.smartToggleService = smartToggleService;\n      this.platformId = platformId;\n      this.popoverId = popoverId;\n      this.subs = [];\n      this.ariaExpanded = false; // Smart Popover\n\n      this.smartPosition = {\n        axis: ClrAxis.VERTICAL,\n        side: ClrSide.AFTER,\n        anchor: ClrAlignment.END,\n        content: ClrAlignment.END\n      };\n      this._open = false;\n      this.openChange = new EventEmitter(false);\n      this.subs.push(smartToggleService.openChange.subscribe(change => {\n        this.open = change;\n        this.ariaExpanded = change;\n      }));\n    }\n\n    get open() {\n      return this._open;\n    }\n\n    set open(open) {\n      open = !!open;\n\n      if (this.open !== open) {\n        this.smartToggleService.open = open;\n        this.openChange.emit(open);\n\n        if (!open && isPlatformBrowser(this.platformId)) {\n          this.anchor.nativeElement.focus();\n        } // keep track of the state\n\n\n        this._open = open;\n      }\n    }\n\n    set customFilter(filter) {\n      this.setFilter(filter);\n    }\n    /**\n     * Indicates if the filter is currently active\n     */\n\n\n    get active() {\n      return !!this.filter && this.filter.isActive();\n    }\n\n    ngOnDestroy() {\n      super.ngOnDestroy();\n      this.subs.forEach(sub => sub.unsubscribe());\n    }\n\n  }\n\n  ClrDatagridFilter.ɵfac = function ClrDatagridFilter_Factory(t) {\n    return new (t || ClrDatagridFilter)(ɵngcc0.ɵɵdirectiveInject(FiltersProvider), ɵngcc0.ɵɵdirectiveInject(ClrCommonStringsService), ɵngcc0.ɵɵdirectiveInject(ClrPopoverToggleService), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID), ɵngcc0.ɵɵdirectiveInject(UNIQUE_ID));\n  };\n\n  ClrDatagridFilter.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ClrDatagridFilter,\n    selectors: [[\"clr-dg-filter\"]],\n    viewQuery: function ClrDatagridFilter_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c40, 5, ElementRef);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.anchor = _t.first);\n      }\n    },\n    inputs: {\n      open: [\"clrDgFilterOpen\", \"open\"],\n      customFilter: [\"clrDgFilter\", \"customFilter\"]\n    },\n    outputs: {\n      openChange: \"clrDgFilterOpenChange\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: CustomFilter,\n      useExisting: ClrDatagridFilter\n    }, UNIQUE_ID_PROVIDER]), ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c0,\n    decls: 4,\n    vars: 13,\n    consts: [[\"type\", \"button\", \"clrPopoverAnchor\", \"\", \"clrPopoverOpenCloseButton\", \"\", 1, \"datagrid-filter-toggle\"], [\"anchor\", \"\"], [\"solid\", \"\"], [\"class\", \"datagrid-filter\", \"clrFocusTrap\", \"\", \"role\", \"dialog\", 3, \"id\", 4, \"clrPopoverContent\", \"clrPopoverContentAt\", \"clrPopoverContentOutsideClickToClose\", \"clrPopoverContentScrollToClose\"], [\"clrFocusTrap\", \"\", \"role\", \"dialog\", 1, \"datagrid-filter\", 3, \"id\"], [1, \"datagrid-filter-close-wrapper\"], [\"type\", \"button\", \"clrPopoverCloseButton\", \"\", 1, \"close\"], [\"shape\", \"window-close\"]],\n    template: function ClrDatagridFilter_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"button\", 0, 1);\n        ɵngcc0.ɵɵelement(2, \"cds-icon\", 2);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(3, ClrDatagridFilter_div_3_Template, 5, 3, \"div\", 3);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"datagrid-filter-open\", ctx.open)(\"datagrid-filtered\", ctx.active);\n        ɵngcc0.ɵɵattribute(\"aria-label\", ctx.commonStrings.keys.datagridFilterAriaLabel)(\"aria-expanded\", ctx.ariaExpanded)(\"aria-controls\", ctx.popoverId);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵattribute(\"status\", ctx.active ? \"info\" : null)(\"shape\", ctx.active ? \"filter-grid-circle\" : \"filter-grid\");\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"clrPopoverContent\", ctx.open)(\"clrPopoverContentAt\", ctx.smartPosition)(\"clrPopoverContentOutsideClickToClose\", true)(\"clrPopoverContentScrollToClose\", true);\n      }\n    },\n    directives: [ClrPopoverAnchor, ClrPopoverOpenCloseButton, CdsIconCustomTag, ClrPopoverContent, FocusTrapDirective, ClrPopoverCloseButton],\n    encapsulation: 2\n  });\n  return ClrDatagridFilter;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/**\n * Generic accessor for deep object properties\n * that can be specified as simple dot-separated strings.\n */\n\n\nclass NestedProperty {\n  constructor(prop) {\n    this.prop = prop;\n\n    if (prop.indexOf('.') >= 0) {\n      this.splitProp = prop.split('.');\n    }\n  } // Safe getter for a deep object property, will not throw an error but return\n  // undefined if one of the intermediate properties is null or undefined.\n\n\n  getPropValue(item) {\n    if (this.splitProp) {\n      let value = item;\n\n      for (const nestedProp of this.splitProp) {\n        if (value === null || typeof value === 'undefined' || typeof value[nestedProp] === 'undefined') {\n          return undefined;\n        }\n\n        value = value[nestedProp];\n      }\n\n      return value;\n    } else {\n      return item[this.prop];\n    }\n  }\n\n}\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nclass DatagridPropertyNumericFilter {\n  constructor(prop, exact = false) {\n    this.prop = prop;\n    this.exact = exact;\n    this.nestedProp = new NestedProperty(prop);\n  }\n\n  accepts(item, low, high) {\n    const propValue = this.nestedProp.getPropValue(item);\n\n    if (propValue === undefined) {\n      return false;\n    }\n\n    if (low !== null && (typeof propValue !== 'number' || propValue < low)) {\n      return false;\n    }\n\n    if (high !== null && (typeof propValue !== 'number' || propValue > high)) {\n      return false;\n    }\n\n    return true;\n  }\n\n}\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nclass DatagridNumericFilterImpl {\n  constructor(filterFn) {\n    this.filterFn = filterFn;\n    /**\n     * The Observable required as part of the Filter interface\n     */\n\n    this._changes = new Subject();\n    /**\n     * Internal values and accessor\n     */\n\n    this._low = null;\n    this._high = null;\n  } // We do not want to expose the Subject itself, but the Observable which is read-only\n\n\n  get changes() {\n    return this._changes.asObservable();\n  }\n  /**\n   * Common setters for the input values, including individual limits and\n   * both at the same time.  Value is singular to make the interface similar\n   * to the built-in string filter.\n   */\n\n\n  get value() {\n    return [this._low, this._high];\n  }\n\n  set value(vals) {\n    const low = vals[0];\n    const high = vals[1];\n\n    if (low !== this._low || high !== this._high) {\n      this._low = low;\n      this._high = high;\n\n      this._changes.next([this._low, this._high]);\n    }\n  }\n\n  get low() {\n    return this._low;\n  }\n\n  set low(low) {\n    if (low !== this._low) {\n      this._low = low;\n\n      this._changes.next([this._low, this._high]);\n    }\n  }\n\n  get high() {\n    return this._high;\n  }\n\n  set high(high) {\n    if (high !== this._high) {\n      this._high = high;\n\n      this._changes.next([this._low, this._high]);\n    }\n  }\n  /**\n   * Indicates if the filter is currently active, (at least one input is set)\n   */\n\n\n  isActive() {\n    return this._low !== null || this.high !== null;\n  }\n  /**\n   * Tests if an item matches a search text\n   */\n\n\n  accepts(item) {\n    // We have a filter function in case someone wants to implement a numeric\n    // filter that always passes nulls or similar\n    return this.filterFn.accepts(item, this._low, this._high);\n  }\n\n  get state() {\n    if (this.filterFn instanceof DatagridPropertyNumericFilter) {\n      return {\n        property: this.filterFn.prop,\n        low: this._low,\n        high: this._high\n      };\n    }\n\n    return this;\n  }\n\n  equals(other) {\n    if (other instanceof DatagridNumericFilterImpl) {\n      if (other.filterFn instanceof DatagridPropertyNumericFilter) {\n        return this.filterFn instanceof DatagridPropertyNumericFilter && other.filterFn.prop === this.filterFn.prop && other.low === this._low && other.high === this._high;\n      }\n\n      return other === this;\n    }\n\n    return false;\n  }\n\n}\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet DatagridNumericFilter = /*#__PURE__*/(() => {\n  class DatagridNumericFilter extends DatagridFilterRegistrar {\n    constructor(filters, domAdapter, commonStrings, popoverToggleService) {\n      super(filters);\n      this.domAdapter = domAdapter;\n      this.commonStrings = commonStrings;\n      this.popoverToggleService = popoverToggleService;\n      this.subscriptions = [];\n      /**\n       * Indicates if the filter dropdown is open\n       */\n\n      this.open = false;\n      this.filterValueChange = new EventEmitter();\n    }\n\n    ngOnDestroy() {\n      this.subscriptions.forEach(sub => {\n        sub.unsubscribe();\n      });\n    }\n\n    get maxPlaceholderValue() {\n      return this.maxPlaceholder || this.commonStrings.keys.maxValue;\n    }\n\n    get minPlaceholderValue() {\n      return this.minPlaceholder || this.commonStrings.keys.minValue;\n    }\n    /**\n     * Customizable filter logic based on high and low values\n     */\n\n\n    set customNumericFilter(value) {\n      if (value instanceof RegisteredFilter) {\n        this.setFilter(value);\n      } else {\n        this.setFilter(new DatagridNumericFilterImpl(value));\n      }\n\n      if (this.initFilterValues) {\n        this.value = this.initFilterValues; // This initFilterValues should be used only once after the filter registration\n        // So deleting this property value to prevent it from being used again\n        // if this customStringFilter property is set again\n\n        delete this.initFilterValues;\n      }\n    }\n\n    ngAfterViewInit() {\n      this.subscriptions.push(this.popoverToggleService.openChange.subscribe(openChange => {\n        this.open = openChange; // The timeout in used because when this executes, the input isn't displayed.\n\n        setTimeout(() => {\n          this.domAdapter.focus(this.input.nativeElement);\n        });\n      }));\n    }\n    /**\n     * Common setter for the input values\n     */\n\n\n    get value() {\n      return [this.filter.low, this.filter.high];\n    }\n\n    set value(values) {\n      if (this.filter && Array.isArray(values)) {\n        if (values && (values[0] !== this.filter.low || values[1] !== this.filter.high)) {\n          if (typeof values[0] === 'number') {\n            this.filter.low = values[0];\n          } else {\n            this.filter.low = null;\n          }\n\n          if (typeof values[1] === 'number') {\n            this.filter.high = values[1];\n          } else {\n            this.filter.high = null;\n          }\n\n          this.filterValueChange.emit(values);\n        }\n      } else {\n        this.initFilterValues = values;\n      }\n    }\n\n    get low() {\n      if (typeof this.filter.low === 'number' && isFinite(this.filter.low)) {\n        return this.filter.low;\n      } else {\n        // There's not a low limit\n        return null;\n      }\n    }\n\n    set low(low) {\n      if (typeof low === 'number' && low !== this.filter.low) {\n        this.filter.low = low;\n        this.filterValueChange.emit([this.filter.low, this.filter.high]);\n      } else if (typeof low !== 'number') {\n        this.filter.low = null;\n        this.filterValueChange.emit([this.filter.low, this.filter.high]);\n      }\n    }\n\n    get high() {\n      if (typeof this.filter.high === 'number' && isFinite(this.filter.high)) {\n        return this.filter.high;\n      } else {\n        // There's not a high limit\n        return null;\n      }\n    }\n\n    set high(high) {\n      if (typeof high === 'number' && high !== this.filter.high) {\n        this.filter.high = high;\n        this.filterValueChange.emit([this.filter.low, this.filter.high]);\n      } else if (typeof high !== 'number') {\n        this.filter.high = null;\n        this.filterValueChange.emit([this.filter.low, this.filter.high]);\n      }\n    }\n\n  }\n\n  DatagridNumericFilter.ɵfac = function DatagridNumericFilter_Factory(t) {\n    return new (t || DatagridNumericFilter)(ɵngcc0.ɵɵdirectiveInject(FiltersProvider), ɵngcc0.ɵɵdirectiveInject(DomAdapter), ɵngcc0.ɵɵdirectiveInject(ClrCommonStringsService), ɵngcc0.ɵɵdirectiveInject(ClrPopoverToggleService));\n  };\n\n  DatagridNumericFilter.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: DatagridNumericFilter,\n    selectors: [[\"clr-dg-numeric-filter\"]],\n    viewQuery: function DatagridNumericFilter_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c41, 5);\n        ɵngcc0.ɵɵviewQuery(ClrDatagridFilter, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.input = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.filterContainer = _t.first);\n      }\n    },\n    inputs: {\n      customNumericFilter: [\"clrDgNumericFilter\", \"customNumericFilter\"],\n      value: [\"clrFilterValue\", \"value\"],\n      maxPlaceholder: [\"clrFilterMaxPlaceholder\", \"maxPlaceholder\"],\n      minPlaceholder: [\"clrFilterMinPlaceholder\", \"minPlaceholder\"]\n    },\n    outputs: {\n      filterValueChange: \"clrFilterValueChange\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: CustomFilter,\n      useExisting: DatagridNumericFilter\n    }]), ɵngcc0.ɵɵInheritDefinitionFeature],\n    decls: 6,\n    vars: 8,\n    consts: [[3, \"clrDgFilter\", \"clrDgFilterOpen\", \"clrDgFilterOpenChange\"], [\"type\", \"number\", \"name\", \"low\", 1, \"datagrid-numeric-filter-input\", 3, \"ngModel\", \"placeholder\", \"ngModelChange\"], [\"input_low\", \"\"], [1, \"datagrid-filter-input-spacer\"], [\"type\", \"number\", \"name\", \"high\", 1, \"datagrid-numeric-filter-input\", 3, \"ngModel\", \"placeholder\", \"ngModelChange\"], [\"input_high\", \"\"]],\n    template: function DatagridNumericFilter_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"clr-dg-filter\", 0);\n        ɵngcc0.ɵɵlistener(\"clrDgFilterOpenChange\", function DatagridNumericFilter_Template_clr_dg_filter_clrDgFilterOpenChange_0_listener($event) {\n          return ctx.open = $event;\n        });\n        ɵngcc0.ɵɵelementStart(1, \"input\", 1, 2);\n        ɵngcc0.ɵɵlistener(\"ngModelChange\", function DatagridNumericFilter_Template_input_ngModelChange_1_listener($event) {\n          return ctx.low = $event;\n        });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelement(3, \"span\", 3);\n        ɵngcc0.ɵɵelementStart(4, \"input\", 4, 5);\n        ɵngcc0.ɵɵlistener(\"ngModelChange\", function DatagridNumericFilter_Template_input_ngModelChange_4_listener($event) {\n          return ctx.high = $event;\n        });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"clrDgFilter\", ctx.registered)(\"clrDgFilterOpen\", ctx.open);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngModel\", ctx.low)(\"placeholder\", ctx.minPlaceholderValue);\n        ɵngcc0.ɵɵattribute(\"aria-label\", ctx.minPlaceholderValue);\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"ngModel\", ctx.high)(\"placeholder\", ctx.maxPlaceholderValue);\n        ɵngcc0.ɵɵattribute(\"aria-label\", ctx.maxPlaceholderValue);\n      }\n    },\n    directives: [ClrDatagridFilter, ɵngcc2.NumberValueAccessor, ɵngcc2.DefaultValueAccessor, ɵngcc2.NgControlStatus, ɵngcc2.NgModel],\n    encapsulation: 2\n  });\n  return DatagridNumericFilter;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nclass DatagridPropertyStringFilter {\n  constructor(prop, exact = false) {\n    this.prop = prop;\n    this.exact = exact;\n    this.nestedProp = new NestedProperty(prop);\n  }\n\n  accepts(item, search) {\n    const propValue = this.nestedProp.getPropValue(item);\n\n    if (typeof propValue === 'undefined') {\n      return false;\n    } else if (this.exact) {\n      return ('' + propValue).toLowerCase() === search;\n    } else {\n      return ('' + propValue).toLowerCase().indexOf(search) >= 0;\n    }\n  }\n\n}\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nclass DatagridStringFilterImpl {\n  constructor(filterFn) {\n    this.filterFn = filterFn;\n    /**\n     * The Observable required as part of the Filter interface\n     */\n\n    this._changes = new Subject();\n    /**\n     * Input value converted to lowercase\n     */\n\n    this._lowerCaseValue = '';\n    /**\n     * Raw input value\n     */\n\n    this._rawValue = '';\n  } // We do not want to expose the Subject itself, but the Observable which is read-only\n\n\n  get changes() {\n    return this._changes.asObservable();\n  }\n\n  get lowerCaseValue() {\n    return this._lowerCaseValue;\n  }\n\n  get value() {\n    return this._rawValue;\n  }\n  /**\n   * Common setter for the input value\n   */\n\n\n  set value(value) {\n    if (!value) {\n      value = '';\n    }\n\n    if (value !== this._rawValue) {\n      this._rawValue = value;\n      this._lowerCaseValue = value.toLowerCase().trim();\n\n      this._changes.next(value);\n    }\n  }\n  /**\n   * Indicates if the filter is currently active, meaning the input is not empty\n   */\n\n\n  isActive() {\n    return !!this.value;\n  }\n  /**\n   * Tests if an item matches a search text\n   */\n\n\n  accepts(item) {\n    // We always test with the lowercase value of the input, to stay case insensitive\n    return this.filterFn.accepts(item, this.lowerCaseValue);\n  }\n\n  get state() {\n    if (this.filterFn instanceof DatagridPropertyStringFilter) {\n      return {\n        property: this.filterFn.prop,\n        value: this.value\n      };\n    }\n\n    return this;\n  }\n\n  equals(other) {\n    if (other instanceof DatagridStringFilterImpl) {\n      if (other.filterFn instanceof DatagridPropertyStringFilter) {\n        return this.filterFn instanceof DatagridPropertyStringFilter && other.filterFn.prop === this.filterFn.prop && other.value === this.value;\n      }\n\n      return other === this;\n    }\n\n    return false;\n  }\n\n}\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet DatagridStringFilter = /*#__PURE__*/(() => {\n  class DatagridStringFilter extends DatagridFilterRegistrar {\n    constructor(filters, domAdapter, commonStrings, smartToggleService) {\n      super(filters);\n      this.domAdapter = domAdapter;\n      this.commonStrings = commonStrings;\n      this.smartToggleService = smartToggleService;\n      this.subs = [];\n      /**\n       * Indicates if the filter dropdown is open\n       */\n\n      this.open = false;\n      this.filterValueChange = new EventEmitter();\n    }\n\n    get placeholderValue() {\n      return this.placeholder || this.commonStrings.keys.filterItems;\n    }\n    /**\n     * Customizable filter logic based on a search text\n     */\n\n\n    set customStringFilter(value) {\n      if (value instanceof RegisteredFilter) {\n        this.setFilter(value);\n      } else {\n        this.setFilter(new DatagridStringFilterImpl(value));\n      }\n\n      if (this.initFilterValue) {\n        this.value = this.initFilterValue; // This initFilterValue should be used only once after the filter registration\n        // So deleting this property value to prevent it from being used again\n        // if this customStringFilter property is set again\n\n        delete this.initFilterValue;\n      }\n    }\n\n    ngAfterViewInit() {\n      this.subs.push(this.smartToggleService.openChange.subscribe(openChange => {\n        this.open = openChange; // The timeout in used because when this executes, the input isn't displayed.\n\n        setTimeout(() => {\n          this.domAdapter.focus(this.input.nativeElement);\n        });\n      }));\n    }\n\n    ngOnDestroy() {\n      super.ngOnDestroy();\n      this.subs.forEach(sub => sub.unsubscribe());\n    }\n    /**\n     * Common setter for the input value\n     */\n\n\n    get value() {\n      return this.filter.value;\n    }\n\n    set value(value) {\n      if (this.filter && typeof value === 'string') {\n        if (!value) {\n          value = '';\n        }\n\n        if (value !== this.filter.value) {\n          this.filter.value = value;\n          this.filterValueChange.emit(value);\n        }\n      } else {\n        this.initFilterValue = value;\n      }\n    }\n\n  }\n\n  DatagridStringFilter.ɵfac = function DatagridStringFilter_Factory(t) {\n    return new (t || DatagridStringFilter)(ɵngcc0.ɵɵdirectiveInject(FiltersProvider), ɵngcc0.ɵɵdirectiveInject(DomAdapter), ɵngcc0.ɵɵdirectiveInject(ClrCommonStringsService), ɵngcc0.ɵɵdirectiveInject(ClrPopoverToggleService));\n  };\n\n  DatagridStringFilter.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: DatagridStringFilter,\n    selectors: [[\"clr-dg-string-filter\"]],\n    viewQuery: function DatagridStringFilter_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c42, 5);\n        ɵngcc0.ɵɵviewQuery(ClrDatagridFilter, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.input = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.filterContainer = _t.first);\n      }\n    },\n    inputs: {\n      customStringFilter: [\"clrDgStringFilter\", \"customStringFilter\"],\n      value: [\"clrFilterValue\", \"value\"],\n      placeholder: [\"clrFilterPlaceholder\", \"placeholder\"]\n    },\n    outputs: {\n      filterValueChange: \"clrFilterValueChange\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: CustomFilter,\n      useExisting: DatagridStringFilter\n    }]), ɵngcc0.ɵɵInheritDefinitionFeature],\n    decls: 3,\n    vars: 5,\n    consts: [[3, \"clrDgFilter\", \"clrDgFilterOpen\", \"clrDgFilterOpenChange\"], [\"type\", \"text\", \"name\", \"search\", 1, \"clr-input\", 3, \"ngModel\", \"placeholder\", \"ngModelChange\"], [\"input\", \"\"]],\n    template: function DatagridStringFilter_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"clr-dg-filter\", 0);\n        ɵngcc0.ɵɵlistener(\"clrDgFilterOpenChange\", function DatagridStringFilter_Template_clr_dg_filter_clrDgFilterOpenChange_0_listener($event) {\n          return ctx.open = $event;\n        });\n        ɵngcc0.ɵɵelementStart(1, \"input\", 1, 2);\n        ɵngcc0.ɵɵlistener(\"ngModelChange\", function DatagridStringFilter_Template_input_ngModelChange_1_listener($event) {\n          return ctx.value = $event;\n        });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"clrDgFilter\", ctx.registered)(\"clrDgFilterOpen\", ctx.open);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngModel\", ctx.value)(\"placeholder\", ctx.placeholderValue);\n        ɵngcc0.ɵɵattribute(\"aria-label\", ctx.placeholderValue);\n      }\n    },\n    directives: [ClrDatagridFilter, ɵngcc2.DefaultValueAccessor, ɵngcc2.NgControlStatus, ɵngcc2.NgModel],\n    encapsulation: 2\n  });\n  return DatagridStringFilter;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet RowActionService = /*#__PURE__*/(() => {\n  class RowActionService {\n    constructor() {\n      this.actionableCount = 0;\n    }\n\n    register() {\n      this.actionableCount++;\n    }\n\n    unregister() {\n      this.actionableCount--;\n    }\n    /**\n     * false means no rows with action\n     */\n\n\n    get hasActionableRow() {\n      return this.actionableCount > 0;\n    }\n\n  }\n\n  RowActionService.ɵfac = function RowActionService_Factory(t) {\n    return new (t || RowActionService)();\n  };\n\n  RowActionService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: RowActionService,\n    factory: RowActionService.ɵfac\n  });\n  return RowActionService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet DatagridWillyWonka = /*#__PURE__*/(() => {\n  class DatagridWillyWonka extends WillyWonka {}\n\n  DatagridWillyWonka.ɵfac = /*@__PURE__*/function () {\n    let ɵDatagridWillyWonka_BaseFactory;\n    return function DatagridWillyWonka_Factory(t) {\n      return (ɵDatagridWillyWonka_BaseFactory || (ɵDatagridWillyWonka_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(DatagridWillyWonka)))(t || DatagridWillyWonka);\n    };\n  }();\n\n  DatagridWillyWonka.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: DatagridWillyWonka,\n    selectors: [[\"clr-datagrid\"]],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  return DatagridWillyWonka;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ActionableOompaLoompa = /*#__PURE__*/(() => {\n  class ActionableOompaLoompa extends OompaLoompa {\n    constructor(cdr, willyWonka, rowActions) {\n      if (!willyWonka) {\n        throw new Error('clr-dg-row should only be used inside of a clr-datagrid');\n      }\n\n      super(cdr, willyWonka);\n      this.rowActions = rowActions;\n    }\n\n    get flavor() {\n      return this.rowActions.hasActionableRow;\n    }\n\n  }\n\n  ActionableOompaLoompa.ɵfac = function ActionableOompaLoompa_Factory(t) {\n    return new (t || ActionableOompaLoompa)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(DatagridWillyWonka, 8), ɵngcc0.ɵɵdirectiveInject(RowActionService));\n  };\n\n  ActionableOompaLoompa.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: ActionableOompaLoompa,\n    selectors: [[\"clr-datagrid\"], [\"clr-dg-row\"]],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  return ActionableOompaLoompa;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet DetailService = /*#__PURE__*/(() => {\n  class DetailService {\n    constructor() {\n      this.toggleState = false;\n      this._state = new BehaviorSubject(this.toggleState);\n      this._enabled = false;\n    }\n\n    get enabled() {\n      return this._enabled;\n    }\n\n    set enabled(state) {\n      this._enabled = state;\n    }\n\n    get stateChange() {\n      return this._state.asObservable();\n    }\n\n    close() {\n      this.toggleState = false;\n\n      this._state.next(this.toggleState);\n\n      if (this.button) {\n        this.button.focus();\n        this.button = null;\n      }\n    }\n\n    open(item, button) {\n      this.cache = item;\n      this.button = button;\n      this.toggleState = true;\n\n      this._state.next(this.toggleState);\n    }\n\n    toggle(item, button) {\n      if (this.isRowOpen(item) || !item) {\n        this.close();\n      } else {\n        this.open(item, button);\n      }\n    }\n\n    get state() {\n      return this.cache;\n    }\n\n    isRowOpen(item) {\n      return !!(this.toggleState && this.cache === item);\n    }\n\n    get isOpen() {\n      return this.toggleState === true;\n    }\n\n  }\n\n  DetailService.ɵfac = function DetailService_Factory(t) {\n    return new (t || DetailService)();\n  };\n\n  DetailService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: DetailService,\n    factory: DetailService.ɵfac\n  });\n  return DetailService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ExpandableRowsCount = /*#__PURE__*/(() => {\n  class ExpandableRowsCount {\n    constructor(detailService) {\n      this.detailService = detailService;\n      this.expandableCount = 0;\n    }\n\n    register() {\n      this.expandableCount++;\n    }\n\n    unregister() {\n      this.expandableCount--;\n    }\n    /**\n     * false means no rows with action\n     * check if details are on, and disable rows entirely\n     */\n\n\n    get hasExpandableRow() {\n      return !this.detailService.enabled && this.expandableCount > 0;\n    }\n\n  }\n\n  ExpandableRowsCount.ɵfac = function ExpandableRowsCount_Factory(t) {\n    return new (t || ExpandableRowsCount)(ɵngcc0.ɵɵinject(DetailService));\n  };\n\n  ExpandableRowsCount.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: ExpandableRowsCount,\n    factory: ExpandableRowsCount.ɵfac\n  });\n  return ExpandableRowsCount;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ExpandableOompaLoompa = /*#__PURE__*/(() => {\n  class ExpandableOompaLoompa extends OompaLoompa {\n    constructor(cdr, willyWonka, expandableCount) {\n      if (!willyWonka) {\n        throw new Error('clr-dg-row should only be used inside of a clr-datagrid');\n      }\n\n      super(cdr, willyWonka);\n      this.expandableCount = expandableCount;\n    }\n\n    get flavor() {\n      return this.expandableCount.hasExpandableRow;\n    }\n\n  }\n\n  ExpandableOompaLoompa.ɵfac = function ExpandableOompaLoompa_Factory(t) {\n    return new (t || ExpandableOompaLoompa)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(DatagridWillyWonka, 8), ɵngcc0.ɵɵdirectiveInject(ExpandableRowsCount));\n  };\n\n  ExpandableOompaLoompa.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: ExpandableOompaLoompa,\n    selectors: [[\"clr-datagrid\"], [\"clr-dg-row\"]],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  return ExpandableOompaLoompa;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nclass DatagridPropertyComparator {\n  constructor(prop) {\n    this.prop = prop;\n    this.nestedProp = new NestedProperty(prop);\n  }\n\n  compare(a, b) {\n    let propA = this.nestedProp.getPropValue(a);\n    let propB = this.nestedProp.getPropValue(b);\n\n    if (typeof propA === 'string') {\n      propA = propA.toLowerCase();\n    }\n\n    if (typeof propB === 'string') {\n      propB = propB.toLowerCase();\n    }\n\n    if (typeof propA === 'undefined' || propA === null) {\n      if (typeof propB === 'undefined' || propB === null) {\n        return 0;\n      } else {\n        return 1;\n      }\n    } else {\n      if (typeof propB === 'undefined' || propB === null) {\n        return -1;\n      } else if (propA < propB) {\n        return -1;\n      } else if (propA > propB) {\n        return 1;\n      } else {\n        return 0;\n      }\n    }\n  }\n\n}\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/**\n * Enumeration representing the sorting order of a datagrid column. It is a constant Enum,\n * i.e. each value needs to be treated as a `number`, starting at index 0.\n *\n * @export\n * @enum {number}\n */\n\n\nvar ClrDatagridSortOrder = /*#__PURE__*/(() => {\n  (function (ClrDatagridSortOrder) {\n    ClrDatagridSortOrder[ClrDatagridSortOrder[\"UNSORTED\"] = 0] = \"UNSORTED\";\n    ClrDatagridSortOrder[ClrDatagridSortOrder[\"ASC\"] = 1] = \"ASC\";\n    ClrDatagridSortOrder[ClrDatagridSortOrder[\"DESC\"] = -1] = \"DESC\";\n  })(ClrDatagridSortOrder || (ClrDatagridSortOrder = {}));\n\n  return ClrDatagridSortOrder;\n})();\n\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nlet Sort = /*#__PURE__*/(() => {\n  class Sort {\n    constructor(stateDebouncer) {\n      this.stateDebouncer = stateDebouncer;\n      /**\n       * Ascending order if false, descending if true\n       */\n\n      this._reverse = false;\n      /**\n       * The Observable that lets other classes subscribe to sort changes\n       */\n\n      this._change = new Subject();\n    }\n\n    get comparator() {\n      return this._comparator;\n    }\n\n    set comparator(value) {\n      this.stateDebouncer.changeStart();\n      this._comparator = value;\n      this.emitChange();\n      this.stateDebouncer.changeDone();\n    }\n\n    get reverse() {\n      return this._reverse;\n    }\n\n    set reverse(value) {\n      this.stateDebouncer.changeStart();\n      this._reverse = value;\n      this.emitChange();\n      this.stateDebouncer.changeDone();\n    }\n\n    emitChange() {\n      this._change.next(this);\n    } // We do not want to expose the Subject itself, but the Observable which is read-only\n\n\n    get change() {\n      return this._change.asObservable();\n    }\n    /**\n     * Sets a comparator as the current one, or toggles reverse if the comparator is already used. The\n     * optional forceReverse input parameter allows to override that toggling behavior by sorting in\n     * reverse order if `true`.\n     *\n     * @memberof Sort\n     */\n\n\n    toggle(sortBy, forceReverse) {\n      this.stateDebouncer.changeStart(); // We modify private properties directly, to batch the change event\n\n      if (this.comparator === sortBy) {\n        this._reverse = typeof forceReverse !== 'undefined' ? forceReverse || !this._reverse : !this._reverse;\n      } else {\n        this._comparator = sortBy;\n        this._reverse = typeof forceReverse !== 'undefined' ? forceReverse : false;\n      }\n\n      this.emitChange();\n      this.stateDebouncer.changeDone();\n    }\n    /**\n     * Clears the current sorting order\n     */\n\n\n    clear() {\n      this.comparator = null;\n    }\n    /**\n     * Compares two objects according to the current comparator\n     */\n\n\n    compare(a, b) {\n      return (this.reverse ? -1 : 1) * this.comparator.compare(a, b);\n    }\n\n  }\n\n  Sort.ɵfac = function Sort_Factory(t) {\n    return new (t || Sort)(ɵngcc0.ɵɵinject(StateDebouncer));\n  };\n\n  Sort.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: Sort,\n    factory: Sort.ɵfac\n  });\n  return Sort;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet WrappedColumn = /*#__PURE__*/(() => {\n  class WrappedColumn {\n    constructor() {\n      this._dynamic = false;\n    }\n\n    ngAfterViewInit() {\n      // Create the cells view in memory, not the DOM.\n      this.columnView = this.templateRef.createEmbeddedView(null);\n    }\n\n    ngOnDestroy() {\n      this.columnView.destroy();\n    }\n\n  }\n\n  WrappedColumn.ɵfac = function WrappedColumn_Factory(t) {\n    return new (t || WrappedColumn)();\n  };\n\n  WrappedColumn.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: WrappedColumn,\n    selectors: [[\"dg-wrapped-column\"]],\n    viewQuery: function WrappedColumn_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c43, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.templateRef = _t.first);\n      }\n    },\n    ngContentSelectors: _c0,\n    decls: 2,\n    vars: 0,\n    consts: [[\"columnPortal\", \"\"]],\n    template: function WrappedColumn_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵtemplate(0, WrappedColumn_ng_template_0_Template, 1, 0, \"ng-template\", null, 0, ɵngcc0.ɵɵtemplateRefExtractor);\n      }\n    },\n    encapsulation: 2\n  });\n  return WrappedColumn;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrDatagridColumn = /*#__PURE__*/(() => {\n  class ClrDatagridColumn extends DatagridFilterRegistrar {\n    constructor(_sort, filters, vcr, detailService, changeDetectorRef, commonStrings) {\n      super(filters);\n      this._sort = _sort;\n      this.vcr = vcr;\n      this.detailService = detailService;\n      this.changeDetectorRef = changeDetectorRef;\n      this.commonStrings = commonStrings;\n      this.showSeparator = true;\n      /**\n       * Subscription to the sort service changes\n       */\n\n      this.subscriptions = [];\n      /*\n       * What type is this column?  This defaults to STRING, but can also be\n       * set to NUMBER.  Unsupported types default to STRING. Users can set it\n       * via the [clrDgColType] input by setting it to 'string' or 'number'.\n       */\n\n      this._colType = 'string'; // deprecated: to be removed - START\n\n      /**\n       * Indicates if the column is currently sorted\n       *\n       * @deprecated This will be removed soon, in favor of the sortOrder mechanism\n       */\n\n      this._sorted = false;\n      /**\n       * @deprecated This will be removed soon, in favor of the sortOrder mechanism\n       */\n\n      this.sortedChange = new EventEmitter(); // deprecated: to be removed - END\n\n      /**\n       * Indicates how the column is currently sorted\n       */\n\n      this._sortOrder = ClrDatagridSortOrder.UNSORTED;\n      this.sortOrderChange = new EventEmitter();\n      /**\n       * A custom filter for this column that can be provided in the projected content\n       */\n\n      this.customFilter = false;\n      this.filterValueChange = new EventEmitter();\n      this.subscriptions.push(this.listenForSortingChanges());\n      this.subscriptions.push(this.listenForDetailPaneChanges());\n    }\n\n    ngOnDestroy() {\n      this.subscriptions.forEach(s => s.unsubscribe());\n    }\n\n    listenForDetailPaneChanges() {\n      return this.detailService.stateChange.subscribe(state => {\n        if (this.showSeparator !== !state) {\n          this.showSeparator = !state; // Have to manually change because of OnPush\n\n          this.changeDetectorRef.markForCheck();\n        }\n      });\n    }\n\n    listenForSortingChanges() {\n      return this._sort.change.subscribe(sort => {\n        // Need to manually mark the component to be checked\n        // for both activating and deactivating sorting\n        this.changeDetectorRef.markForCheck(); // We're only listening to make sure we emit an event when the column goes from sorted to unsorted\n\n        if (this.sortOrder !== ClrDatagridSortOrder.UNSORTED && sort.comparator !== this._sortBy) {\n          this._sortOrder = ClrDatagridSortOrder.UNSORTED;\n          this.sortOrderChange.emit(this._sortOrder); // removes the sortIcon when column becomes unsorted\n\n          this.sortIcon = null;\n          this._sortDirection = null;\n        } // deprecated: to be removed - START\n\n\n        if (this.sorted && sort.comparator !== this._sortBy) {\n          this._sorted = false;\n          this.sortedChange.emit(false);\n        } // deprecated: to be removed - END\n\n      });\n    }\n\n    get colType() {\n      return this._colType;\n    } // TODO: We might want to make this an enum in the future\n\n\n    set colType(value) {\n      this._colType = value;\n    }\n\n    get field() {\n      return this._field;\n    }\n\n    set field(field) {\n      if (typeof field === 'string') {\n        this._field = field;\n\n        if (!this._sortBy) {\n          this._sortBy = new DatagridPropertyComparator(field);\n        }\n      }\n    }\n\n    setupDefaultFilter(field, colType) {\n      if (colType === 'number') {\n        this.setFilter(new DatagridNumericFilterImpl(new DatagridPropertyNumericFilter(field)));\n      } else if (colType === 'string') {\n        this.setFilter(new DatagridStringFilterImpl(new DatagridPropertyStringFilter(field)));\n      }\n\n      if (this.filter && this.initFilterValue) {\n        this.updateFilterValue = this.initFilterValue; // This initFilterValue should be used only once after the filter registration\n        // So deleting this property value to prevent it from being used again\n        // if this field property is set again\n\n        delete this.initFilterValue;\n      }\n    }\n\n    ngOnChanges(changes) {\n      if (changes.colType && changes.colType.currentValue && changes.colType.currentValue !== changes.colType.previousValue) {\n        if (!this.customFilter && !this.filter && this.colType && this.field) {\n          this.setupDefaultFilter(this.field, this.colType);\n        }\n      }\n\n      if (changes.field && changes.field.currentValue && changes.field.currentValue !== changes.field.previousValue) {\n        if (!this.customFilter && this.colType) {\n          this.setupDefaultFilter(this.field, this.colType);\n        }\n      }\n    }\n\n    get sortBy() {\n      return this._sortBy;\n    }\n\n    set sortBy(comparator) {\n      if (typeof comparator === 'string') {\n        this._sortBy = new DatagridPropertyComparator(comparator);\n      } else {\n        if (comparator) {\n          this._sortBy = comparator;\n        } else {\n          if (this.field) {\n            this._sortBy = new DatagridPropertyComparator(this.field);\n          } else {\n            delete this._sortBy;\n          }\n        }\n      }\n    }\n    /**\n     * Indicates if the column is sortable\n     */\n\n\n    get sortable() {\n      return !!this._sortBy;\n    }\n\n    get sorted() {\n      return this._sorted;\n    }\n    /**\n     * @deprecated This will be removed soon, in favor of the sortOrder mechanism\n     */\n\n\n    set sorted(value) {\n      if (!value && this.sorted) {\n        this._sorted = false;\n\n        this._sort.clear();\n      } else if (value && !this.sorted) {\n        this.sort();\n      }\n    }\n\n    get sortOrder() {\n      return this._sortOrder;\n    }\n\n    set sortOrder(value) {\n      if (typeof value === 'undefined') {\n        return;\n      } // only if the incoming order is different from the current one\n\n\n      if (this._sortOrder === value) {\n        return;\n      }\n\n      switch (value) {\n        // the Unsorted case happens when the current state is either Asc or Desc\n        default:\n        case ClrDatagridSortOrder.UNSORTED:\n          this._sort.clear();\n\n          break;\n\n        case ClrDatagridSortOrder.ASC:\n          this.sort(false);\n          break;\n\n        case ClrDatagridSortOrder.DESC:\n          this.sort(true);\n          break;\n      }\n    }\n\n    get ariaSort() {\n      switch (this._sortOrder) {\n        default:\n        case ClrDatagridSortOrder.UNSORTED:\n          return 'none';\n\n        case ClrDatagridSortOrder.ASC:\n          return 'ascending';\n\n        case ClrDatagridSortOrder.DESC:\n          return 'descending';\n      }\n    }\n\n    get sortDirection() {\n      return this._sortDirection;\n    }\n    /**\n     * Sorts the datagrid based on this column\n     */\n\n\n    sort(reverse) {\n      if (!this.sortable) {\n        return;\n      }\n\n      this._sort.toggle(this._sortBy, reverse); // setting the private variable to not retrigger the setter logic\n\n\n      this._sortOrder = this._sort.reverse ? ClrDatagridSortOrder.DESC : ClrDatagridSortOrder.ASC; // Sets the correct icon for current sort order\n\n      this._sortDirection = this._sortOrder === ClrDatagridSortOrder.DESC ? 'down' : 'up';\n      this.sortIcon = this._sortOrder === ClrDatagridSortOrder.DESC ? 'arrow down' : 'arrow'; // Backward compatibility\n\n      this.sortOrderChange.emit(this._sortOrder); // deprecated: to be removed - START\n\n      this._sorted = true;\n      this.sortedChange.emit(true); // deprecated: to be removed - END\n    }\n\n    set projectedFilter(custom) {\n      if (custom) {\n        this.deleteFilter();\n        this.customFilter = true;\n      }\n    }\n\n    get filterStringPlaceholderValue() {\n      return this.filterStringPlaceholder || this.commonStrings.keys.filterItems;\n    }\n\n    get filterNumberMaxPlaceholderValue() {\n      return this.filterNumberMaxPlaceholder || this.commonStrings.keys.maxValue;\n    }\n\n    get filterNumberMinPlaceholderValue() {\n      return this.filterNumberMinPlaceholder || this.commonStrings.keys.minValue;\n    }\n\n    set updateFilterValue(newValue) {\n      if (this.filter) {\n        if (this.filter instanceof DatagridStringFilterImpl) {\n          if (!newValue || typeof newValue !== 'string') {\n            newValue = '';\n          }\n\n          if (newValue !== this.filter.value) {\n            this.filter.value = newValue;\n          }\n        } else if (this.filter instanceof DatagridNumericFilterImpl) {\n          if (!newValue || !(newValue instanceof Array)) {\n            newValue = [null, null];\n          }\n\n          if (newValue.length === 2 && (newValue[0] !== this.filter.value[0] || newValue[1] !== this.filter.value[1])) {\n            this.filter.value = newValue;\n          }\n        }\n      } else {\n        this.initFilterValue = newValue;\n      }\n    }\n\n    get filterValue() {\n      if (this.filter instanceof DatagridStringFilterImpl || this.filter instanceof DatagridNumericFilterImpl) {\n        return this.filter.value;\n      }\n\n      return null;\n    }\n    /**\n     * @NOTE type `any` here is to let us pass templateStrictMode, because in our code we try to handle\n     * two types of filters String and Number with the same variable but both of them work with different\n     * format we got an error for casting. We could not cast anything inside the template so to not mess the\n     * casting, the last type is set to `any`\n     *\n     * Orignial types: string | [number, number]\n     */\n\n\n    set filterValue(newValue) {\n      if (this.filter instanceof DatagridStringFilterImpl || this.filter instanceof DatagridNumericFilterImpl) {\n        this.updateFilterValue = newValue;\n        this.filterValueChange.emit(this.filter.value);\n      }\n    }\n\n    ngOnInit() {\n      this.wrappedInjector = new HostWrapper(WrappedColumn, this.vcr);\n    }\n\n    get _view() {\n      return this.wrappedInjector.get(WrappedColumn, this.vcr).columnView;\n    }\n\n  }\n\n  ClrDatagridColumn.ɵfac = function ClrDatagridColumn_Factory(t) {\n    return new (t || ClrDatagridColumn)(ɵngcc0.ɵɵdirectiveInject(Sort), ɵngcc0.ɵɵdirectiveInject(FiltersProvider), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(DetailService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ClrCommonStringsService));\n  };\n\n  ClrDatagridColumn.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ClrDatagridColumn,\n    selectors: [[\"clr-dg-column\"]],\n    contentQueries: function ClrDatagridColumn_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CustomFilter, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.projectedFilter = _t.first);\n      }\n    },\n    hostAttrs: [\"role\", \"columnheader\"],\n    hostVars: 3,\n    hostBindings: function ClrDatagridColumn_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-sort\", ctx.ariaSort);\n        ɵngcc0.ɵɵclassProp(\"datagrid-column\", true);\n      }\n    },\n    inputs: {\n      colType: [\"clrDgColType\", \"colType\"],\n      field: [\"clrDgField\", \"field\"],\n      updateFilterValue: [\"clrFilterValue\", \"updateFilterValue\"],\n      sortBy: [\"clrDgSortBy\", \"sortBy\"],\n      sorted: [\"clrDgSorted\", \"sorted\"],\n      sortOrder: [\"clrDgSortOrder\", \"sortOrder\"],\n      filterStringPlaceholder: [\"clrFilterStringPlaceholder\", \"filterStringPlaceholder\"],\n      filterNumberMaxPlaceholder: [\"clrFilterNumberMaxPlaceholder\", \"filterNumberMaxPlaceholder\"],\n      filterNumberMinPlaceholder: [\"clrFilterNumberMinPlaceholder\", \"filterNumberMinPlaceholder\"]\n    },\n    outputs: {\n      sortedChange: \"clrDgSortedChange\",\n      sortOrderChange: \"clrDgSortOrderChange\",\n      filterValueChange: \"clrFilterValueChange\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([ClrPopoverPositionService, ClrPopoverEventsService, ClrPopoverToggleService]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature],\n    ngContentSelectors: _c45,\n    decls: 9,\n    vars: 5,\n    consts: [[1, \"datagrid-column-flex\"], [\"class\", \"datagrid-column-title\", \"type\", \"button\", 3, \"click\", 4, \"ngIf\"], [3, \"clrFilterPlaceholder\", \"clrDgStringFilter\", \"clrFilterValue\", \"clrFilterValueChange\", 4, \"ngIf\"], [3, \"clrFilterMaxPlaceholder\", \"clrFilterMinPlaceholder\", \"clrDgNumericFilter\", \"clrFilterValue\", \"clrFilterValueChange\", 4, \"ngIf\"], [\"columnTitle\", \"\"], [\"class\", \"datagrid-column-title\", 4, \"ngIf\"], [4, \"ngIf\"], [\"type\", \"button\", 1, \"datagrid-column-title\", 3, \"click\"], [4, \"ngTemplateOutlet\"], [\"shape\", \"arrow\", \"aria-hidden\", \"true\", \"class\", \"sort-icon\", 4, \"ngIf\"], [\"shape\", \"arrow\", \"aria-hidden\", \"true\", 1, \"sort-icon\"], [3, \"clrFilterPlaceholder\", \"clrDgStringFilter\", \"clrFilterValue\", \"clrFilterValueChange\"], [3, \"clrFilterMaxPlaceholder\", \"clrFilterMinPlaceholder\", \"clrDgNumericFilter\", \"clrFilterValue\", \"clrFilterValueChange\"], [1, \"datagrid-column-title\"]],\n    template: function ClrDatagridColumn_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c44);\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵtemplate(1, ClrDatagridColumn_button_1_Template, 3, 2, \"button\", 1);\n        ɵngcc0.ɵɵprojection(2);\n        ɵngcc0.ɵɵtemplate(3, ClrDatagridColumn_clr_dg_string_filter_3_Template, 1, 3, \"clr-dg-string-filter\", 2);\n        ɵngcc0.ɵɵtemplate(4, ClrDatagridColumn_clr_dg_numeric_filter_4_Template, 1, 4, \"clr-dg-numeric-filter\", 3);\n        ɵngcc0.ɵɵtemplate(5, ClrDatagridColumn_ng_template_5_Template, 1, 0, \"ng-template\", null, 4, ɵngcc0.ɵɵtemplateRefExtractor);\n        ɵngcc0.ɵɵtemplate(7, ClrDatagridColumn_span_7_Template, 2, 1, \"span\", 5);\n        ɵngcc0.ɵɵtemplate(8, ClrDatagridColumn_clr_dg_column_separator_8_Template, 1, 0, \"clr-dg-column-separator\", 6);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.sortable);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.field && !ctx.customFilter && ctx.colType == \"string\");\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.field && !ctx.customFilter && ctx.colType == \"number\");\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.sortable);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.showSeparator);\n      }\n    },\n    directives: function () {\n      return [ɵngcc1.NgIf, ɵngcc1.NgTemplateOutlet, CdsIconCustomTag, DatagridStringFilter, DatagridNumericFilter, ClrDatagridColumnSeparator];\n    },\n    encapsulation: 2,\n    changeDetection: 0\n  });\n  return ClrDatagridColumn;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet Items = /*#__PURE__*/(() => {\n  class Items {\n    constructor(_filters, _sort, _page) {\n      this._filters = _filters;\n      this._sort = _sort;\n      this._page = _page;\n      /**\n       * Indicates if the data is currently loading\n       */\n\n      this.loading = false; // TODO: Verify that trackBy is registered for the *ngFor case too\n\n      /**\n       * Tracking function to identify objects. Default is reference equality.\n       */\n\n      this.trackBy = (_index, item) => item;\n      /**\n       * Whether we should use smart items for this datagrid or let the user handle\n       * everything.\n       */\n\n\n      this._smart = false;\n      /**\n       * List of items currently displayed\n       */\n\n      this._displayed = [];\n      /**\n       * The Observable that lets other classes subscribe to items changes\n       */\n\n      this._change = new Subject();\n      this._allChanges = new Subject();\n    }\n    /**\n     * Cleans up our subscriptions to other providers\n     */\n\n\n    destroy() {\n      if (this._filtersSub) {\n        this._filtersSub.unsubscribe();\n      }\n\n      if (this._sortSub) {\n        this._sortSub.unsubscribe();\n      }\n\n      if (this._pageSub) {\n        this._pageSub.unsubscribe();\n      }\n    }\n\n    get smart() {\n      return this._smart;\n    }\n\n    smartenUp() {\n      this._smart = true;\n      /*\n       * These observers trigger a chain of function: filter -> sort -> paginate\n       * An observer up the chain re-triggers all the operations that follow it.\n       */\n\n      this._filtersSub = this._filters.change.subscribe(() => this._filterItems());\n      this._sortSub = this._sort.change.subscribe(() => {\n        // Special case, if the datagrid went from sorted to unsorted, we have to re-filter\n        // to get the original order back\n        if (!this._sort.comparator) {\n          this._filterItems();\n        } else {\n          this._sortItems();\n        }\n      });\n      this._pageSub = this._page.change.subscribe(() => this._changePage());\n    }\n\n    get all() {\n      return this._all;\n    }\n\n    set all(items) {\n      this._all = items;\n      this.emitAllChanges(items);\n\n      if (this.smart) {\n        this._filterItems();\n      } else {\n        this._displayed = items;\n        this.emitChange();\n      }\n    }\n    /**\n     * Manually recompute the list of displayed items\n     */\n\n\n    refresh() {\n      if (this.smart) {\n        this._filterItems();\n      }\n    }\n\n    get displayed() {\n      // Ideally we could return an immutable array, but we don't have it in Clarity yet.\n      return this._displayed;\n    }\n\n    emitChange() {\n      this._change.next(this.displayed);\n    } // We do not want to expose the Subject itself, but the Observable which is read-only\n\n\n    get change() {\n      return this._change.asObservable();\n    }\n\n    emitAllChanges(items) {\n      this._allChanges.next(items);\n    }\n\n    get allChanges() {\n      return this._allChanges.asObservable();\n    }\n    /**\n     * Checks if we don't have data to process yet, to abort early operations\n     */\n\n\n    get uninitialized() {\n      return !this._all;\n    }\n    /**\n     * FiltersProvider items from the raw list\n     */\n\n\n    _filterItems() {\n      if (this.uninitialized) {\n        return;\n      }\n\n      if (this._filters.hasActiveFilters()) {\n        this._filtered = this._all.filter(item => this._filters.accepts(item));\n      } else {\n        // Work on a shallow copy of the array, to not modify the user's model\n        this._filtered = this._all.slice();\n      }\n\n      this._page.totalItems = this._filtered.length;\n\n      this._sortItems();\n    }\n    /**\n     * Sorts items in the filtered list\n     */\n\n\n    _sortItems() {\n      if (this.uninitialized) {\n        return;\n      }\n\n      if (this._sort.comparator) {\n        this._filtered.sort((a, b) => this._sort.compare(a, b));\n      }\n\n      this._changePage();\n    }\n    /**\n     * Extracts the current page from the sorted list\n     */\n\n\n    _changePage() {\n      // If we know we have pagination but the page size hasn't been set yet, we wait for it.\n      if (this.uninitialized || this._page.activated && this._page.size === 0) {\n        return;\n      }\n\n      if (this._page.size > 0) {\n        this._displayed = this._filtered.slice(this._page.firstItem, this._page.lastItem + 1);\n      } else {\n        this._displayed = this._filtered;\n      }\n\n      this.emitChange();\n    }\n\n  }\n\n  Items.ɵfac = function Items_Factory(t) {\n    return new (t || Items)(ɵngcc0.ɵɵinject(FiltersProvider), ɵngcc0.ɵɵinject(Sort), ɵngcc0.ɵɵinject(Page));\n  };\n\n  Items.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: Items,\n    factory: Items.ɵfac\n  });\n  return Items;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrDatagridItems = /*#__PURE__*/(() => {\n  class ClrDatagridItems {\n    constructor(template, differs, items, vcr) {\n      this.template = template;\n      this.differs = differs;\n      this.items = items;\n      this.vcr = vcr;\n      this.differ = null;\n      this.subscriptions = [];\n      items.smartenUp();\n      this.iterableProxy = new NgForOf(this.vcr, this.template, this.differs);\n      this.subscriptions.push(items.change.subscribe(newItems => {\n        this.iterableProxy.ngForOf = newItems;\n        this.iterableProxy.ngDoCheck();\n      }));\n    }\n\n    set rawItems(items) {\n      this._rawItems = items ? items : []; // local copy for ngOnChange diffing\n    }\n\n    set trackBy(value) {\n      this.items.trackBy = value;\n      this.iterableProxy.ngForTrackBy = value;\n    }\n\n    ngDoCheck() {\n      if (!this.differ) {\n        this.differ = this.differs.find(this._rawItems).create(this.iterableProxy.ngForTrackBy);\n      }\n\n      if (this.differ) {\n        const changes = this.differ.diff(this._rawItems);\n\n        if (changes) {\n          // TODO: not very efficient right now,\n          // but premature optimization is the root of all evil.\n          this.items.all = this._rawItems;\n        }\n      }\n    }\n\n    ngOnDestroy() {\n      this.subscriptions.forEach(sub => sub.unsubscribe());\n    }\n\n  }\n\n  ClrDatagridItems.ɵfac = function ClrDatagridItems_Factory(t) {\n    return new (t || ClrDatagridItems)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(Items), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef));\n  };\n\n  ClrDatagridItems.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: ClrDatagridItems,\n    selectors: [[\"\", \"clrDgItems\", \"\", \"clrDgItemsOf\", \"\"]],\n    inputs: {\n      rawItems: [\"clrDgItemsOf\", \"rawItems\"],\n      trackBy: [\"clrDgItemsTrackBy\", \"trackBy\"]\n    }\n  });\n  return ClrDatagridItems;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrDatagridPlaceholder = /*#__PURE__*/(() => {\n  class ClrDatagridPlaceholder {\n    constructor(items) {\n      this.items = items;\n    }\n    /**\n     * Tests if the datagrid is empty, meaning it doesn't contain any items\n     */\n\n\n    get emptyDatagrid() {\n      return !this.items.loading && (!this.items.displayed || this.items.displayed.length === 0);\n    }\n\n  }\n\n  ClrDatagridPlaceholder.ɵfac = function ClrDatagridPlaceholder_Factory(t) {\n    return new (t || ClrDatagridPlaceholder)(ɵngcc0.ɵɵdirectiveInject(Items));\n  };\n\n  ClrDatagridPlaceholder.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ClrDatagridPlaceholder,\n    selectors: [[\"clr-dg-placeholder\"]],\n    hostVars: 2,\n    hostBindings: function ClrDatagridPlaceholder_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"datagrid-placeholder-container\", true);\n      }\n    },\n    ngContentSelectors: _c0,\n    decls: 4,\n    vars: 4,\n    consts: [[\"role\", \"row\", 1, \"datagrid-placeholder\"], [\"class\", \"datagrid-placeholder-image\", 4, \"ngIf\"], [\"role\", \"gridcell\", 1, \"datagrid-placeholder-content\"], [4, \"ngIf\"], [1, \"datagrid-placeholder-image\"]],\n    template: function ClrDatagridPlaceholder_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵtemplate(1, ClrDatagridPlaceholder_div_1_Template, 1, 0, \"div\", 1);\n        ɵngcc0.ɵɵelementStart(2, \"span\", 2);\n        ɵngcc0.ɵɵtemplate(3, ClrDatagridPlaceholder_ng_content_3_Template, 1, 0, \"ng-content\", 3);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"datagrid-empty\", ctx.emptyDatagrid);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.emptyDatagrid);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.emptyDatagrid);\n      }\n    },\n    directives: [ɵngcc1.NgIf],\n    encapsulation: 2\n  });\n  return ClrDatagridPlaceholder;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet SignpostFocusManager = /*#__PURE__*/(() => {\n  class SignpostFocusManager {\n    set triggerEl(value) {\n      this._triggerEl = value;\n    }\n\n    focusTrigger() {\n      if (this._triggerEl) {\n        this._triggerEl.focus();\n      }\n    }\n\n  }\n\n  SignpostFocusManager.ɵfac = function SignpostFocusManager_Factory(t) {\n    return new (t || SignpostFocusManager)();\n  };\n\n  SignpostFocusManager.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: SignpostFocusManager,\n    factory: SignpostFocusManager.ɵfac\n  });\n  return SignpostFocusManager;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet SignpostIdService = /*#__PURE__*/(() => {\n  class SignpostIdService {\n    constructor() {\n      this._id = new Subject();\n    }\n\n    setId(id) {\n      this._id.next(id);\n    }\n\n    get id() {\n      return this._id.asObservable();\n    }\n\n  }\n\n  SignpostIdService.ɵfac = function SignpostIdService_Factory(t) {\n    return new (t || SignpostIdService)();\n  };\n\n  SignpostIdService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: SignpostIdService,\n    factory: SignpostIdService.ɵfac\n  });\n  return SignpostIdService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/*********\n *\n * @description\n * A Directive added to the ClrSignpost Trigger button that will call the ClrSignpost.toggle() function to hide/show the\n * ClrSignpostContent.\n *\n */\n\n\nlet ClrSignpostTrigger = /*#__PURE__*/(() => {\n  class ClrSignpostTrigger {\n    constructor(toggleService, el, commonStrings, signpostIdService, signpostFocusManager, document, platformId) {\n      this.toggleService = toggleService;\n      this.el = el;\n      this.commonStrings = commonStrings;\n      this.signpostIdService = signpostIdService;\n      this.signpostFocusManager = signpostFocusManager;\n      this.platformId = platformId;\n      this.subscriptions = [];\n      this.document = document;\n    }\n\n    ngOnInit() {\n      this.signpostFocusManager.triggerEl = this.el.nativeElement;\n      this.subscriptions.push(this.toggleService.openChange.subscribe(isOpen => {\n        this.ariaExpanded = isOpen;\n        const prevIsOpen = this.isOpen;\n        this.isOpen = isOpen; // openChange fires false on initialization because signpost starts as closed by default\n        // but we shouldn't focus on that initial false value\n        // we should focus back only if it's closed after being opened\n\n        if (!this.isOpen && prevIsOpen) {\n          this.focusOnClose();\n        }\n      }), this.signpostIdService.id.subscribe(idChange => this.ariaControl = idChange));\n      this.addDefaultAriaLabel(this.el.nativeElement);\n    }\n\n    addDefaultAriaLabel(el) {\n      if (!el.hasAttribute('aria-label')) {\n        el.setAttribute('aria-label', this.commonStrings.keys.signpostToggle);\n      }\n    }\n\n    focusOnClose() {\n      if (!isPlatformBrowser(this.platformId)) {\n        return;\n      } // we have to set the focus back on the trigger only if the focus is reset back to the body element\n      // if the focus is on another element, we are not allowed to move that focus back to this trigger again.\n\n\n      if (!this.isOpen && this.document.activeElement === this.document.body) {\n        this.signpostFocusManager.focusTrigger();\n      }\n    }\n\n    ngOnDestroy() {\n      this.subscriptions.forEach(sub => sub.unsubscribe());\n    }\n    /**********\n     *\n     * @description\n     * click handler for the ClrSignpost trigger button used to hide/show ClrSignpostContent.\n     */\n\n\n    onSignpostTriggerClick(event) {\n      this.toggleService.toggleWithEvent(event);\n    }\n\n  }\n\n  ClrSignpostTrigger.ɵfac = function ClrSignpostTrigger_Factory(t) {\n    return new (t || ClrSignpostTrigger)(ɵngcc0.ɵɵdirectiveInject(ClrPopoverToggleService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ClrCommonStringsService), ɵngcc0.ɵɵdirectiveInject(SignpostIdService), ɵngcc0.ɵɵdirectiveInject(SignpostFocusManager), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID));\n  };\n\n  ClrSignpostTrigger.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: ClrSignpostTrigger,\n    selectors: [[\"\", \"clrSignpostTrigger\", \"\"]],\n    hostAttrs: [1, \"signpost-trigger\"],\n    hostVars: 4,\n    hostBindings: function ClrSignpostTrigger_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function ClrSignpostTrigger_click_HostBindingHandler($event) {\n          return ctx.onSignpostTriggerClick($event);\n        });\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-expanded\", ctx.ariaExpanded)(\"aria-controls\", ctx.ariaControl);\n        ɵngcc0.ɵɵclassProp(\"active\", ctx.isOpen);\n      }\n    }\n  });\n  return ClrSignpostTrigger;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/*********\n *\n * @class ClrSignpost\n *\n * @description\n * Class used to configure and control the state of a ClrSignpost and its associated ClrSignpostContent.\n * It supports the clrPosition with a 'right-middle' default.\n *\n */\n\n\nlet ClrSignpost = /*#__PURE__*/(() => {\n  class ClrSignpost {\n    constructor(commonStrings) {\n      this.commonStrings = commonStrings;\n      /**********\n       * @property useCustomTrigger\n       *\n       * @description\n       * Flag used to determine if we need to use the default trigger or a user supplied trigger element.\n       *\n       */\n\n      this.useCustomTrigger = false;\n    }\n    /**********\n     * @property signPostTrigger\n     *\n     * @description\n     * Uses ContentChild to check for a user supplied element with the ClrSignpostTrigger on it.\n     *\n     */\n\n\n    set customTrigger(trigger) {\n      this.useCustomTrigger = !!trigger;\n    }\n\n  }\n\n  ClrSignpost.ɵfac = function ClrSignpost_Factory(t) {\n    return new (t || ClrSignpost)(ɵngcc0.ɵɵdirectiveInject(ClrCommonStringsService));\n  };\n\n  ClrSignpost.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ClrSignpost,\n    selectors: [[\"clr-signpost\"]],\n    contentQueries: function ClrSignpost_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, ClrSignpostTrigger, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.customTrigger = _t.first);\n      }\n    },\n    hostVars: 2,\n    hostBindings: function ClrSignpost_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"signpost\", true);\n      }\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([ClrPopoverToggleService, SignpostFocusManager, {\n      provide: POPOVER_HOST_ANCHOR,\n      useExisting: ElementRef\n    }, SignpostIdService])],\n    ngContentSelectors: _c0,\n    decls: 2,\n    vars: 1,\n    consts: [[4, \"ngIf\"], [\"type\", \"button\", \"clrSignpostTrigger\", \"\", 1, \"signpost-action\", \"btn\", \"btn-small\", \"btn-link\"], [\"shape\", \"info-circle\"]],\n    template: function ClrSignpost_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵtemplate(0, ClrSignpost_ng_container_0_Template, 3, 1, \"ng-container\", 0);\n        ɵngcc0.ɵɵprojection(1);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.useCustomTrigger);\n      }\n    },\n    directives: [ɵngcc1.NgIf, ClrSignpostTrigger, CdsIconCustomTag],\n    encapsulation: 2\n  });\n  return ClrSignpost;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet WrappedCell = /*#__PURE__*/(() => {\n  class WrappedCell {\n    constructor() {\n      this._dynamic = false;\n    }\n\n    ngAfterViewInit() {\n      this.cellView = this.templateRef.createEmbeddedView(null);\n    }\n\n    ngOnDestroy() {\n      this.cellView.destroy();\n    }\n\n  }\n\n  WrappedCell.ɵfac = function WrappedCell_Factory(t) {\n    return new (t || WrappedCell)();\n  };\n\n  WrappedCell.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: WrappedCell,\n    selectors: [[\"dg-wrapped-cell\"]],\n    viewQuery: function WrappedCell_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c46, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.templateRef = _t.first);\n      }\n    },\n    ngContentSelectors: _c0,\n    decls: 2,\n    vars: 0,\n    consts: [[\"cellPortal\", \"\"]],\n    template: function WrappedCell_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵtemplate(0, WrappedCell_ng_template_0_Template, 1, 0, \"ng-template\", null, 0, ɵngcc0.ɵɵtemplateRefExtractor);\n      }\n    },\n    encapsulation: 2\n  });\n  return WrappedCell;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrDatagridCell = /*#__PURE__*/(() => {\n  class ClrDatagridCell {\n    constructor(vcr) {\n      this.vcr = vcr;\n    }\n\n    ngOnInit() {\n      this.wrappedInjector = new HostWrapper(WrappedCell, this.vcr);\n    }\n\n    get _view() {\n      return this.wrappedInjector.get(WrappedCell, this.vcr).cellView;\n    }\n\n  }\n\n  ClrDatagridCell.ɵfac = function ClrDatagridCell_Factory(t) {\n    return new (t || ClrDatagridCell)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef));\n  };\n\n  ClrDatagridCell.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ClrDatagridCell,\n    selectors: [[\"clr-dg-cell\"]],\n    contentQueries: function ClrDatagridCell_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, ClrSignpost, 4);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.signpost = _t);\n      }\n    },\n    hostAttrs: [\"role\", \"gridcell\"],\n    hostVars: 4,\n    hostBindings: function ClrDatagridCell_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"datagrid-cell\", true)(\"datagrid-signpost-trigger\", ctx.signpost.length > 0);\n      }\n    },\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function ClrDatagridCell_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2\n  });\n  return ClrDatagridCell;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet nbRow$1 = 0;\nlet DatagridIfExpandService = /*#__PURE__*/(() => {\n  class DatagridIfExpandService extends IfExpandService {\n    constructor() {\n      super();\n      this.expandableId = '';\n      this._replace = new BehaviorSubject(false);\n      this._animate = new Subject();\n      nbRow$1++;\n      this.expandableId = 'clr-dg-expandable-row-' + nbRow$1;\n    } // due to the es5 spec if the set is overridden on base class the getter must also be overridden\n\n\n    get expanded() {\n      return this._expanded;\n    }\n\n    set expanded(value) {\n      value = !!value;\n\n      if (value !== this._expanded) {\n        this._expanded = value;\n\n        this._animate.next();\n\n        this._expandChange.next(value);\n      }\n    }\n\n    loadingStateChange(state) {\n      super.loadingStateChange(state);\n\n      if (state !== ClrLoadingState.LOADING) {\n        this._animate.next();\n      }\n    }\n\n    get replace() {\n      return this._replace.asObservable();\n    }\n\n    setReplace(replaceValue) {\n      this._replace.next(replaceValue);\n    }\n\n    get animate() {\n      return this._animate.asObservable();\n    }\n\n  }\n\n  DatagridIfExpandService.ɵfac = function DatagridIfExpandService_Factory(t) {\n    return new (t || DatagridIfExpandService)();\n  };\n\n  DatagridIfExpandService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: DatagridIfExpandService,\n    factory: DatagridIfExpandService.ɵfac\n  });\n  return DatagridIfExpandService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nvar DatagridDisplayMode = /*#__PURE__*/(() => {\n  (function (DatagridDisplayMode) {\n    DatagridDisplayMode[DatagridDisplayMode[\"DISPLAY\"] = 0] = \"DISPLAY\";\n    DatagridDisplayMode[DatagridDisplayMode[\"CALCULATE\"] = 1] = \"CALCULATE\";\n  })(DatagridDisplayMode || (DatagridDisplayMode = {}));\n\n  return DatagridDisplayMode;\n})();\n\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nvar SelectionType = /*#__PURE__*/(() => {\n  (function (SelectionType) {\n    SelectionType[SelectionType[\"None\"] = 0] = \"None\";\n    SelectionType[SelectionType[\"Single\"] = 1] = \"Single\";\n    SelectionType[SelectionType[\"Multi\"] = 2] = \"Multi\";\n  })(SelectionType || (SelectionType = {}));\n\n  return SelectionType;\n})();\n\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nvar DatagridRenderStep = /*#__PURE__*/(() => {\n  (function (DatagridRenderStep) {\n    DatagridRenderStep[DatagridRenderStep[\"ALIGN_COLUMNS\"] = 0] = \"ALIGN_COLUMNS\";\n    DatagridRenderStep[DatagridRenderStep[\"CALCULATE_MODE_ON\"] = 1] = \"CALCULATE_MODE_ON\";\n    DatagridRenderStep[DatagridRenderStep[\"CALCULATE_MODE_OFF\"] = 2] = \"CALCULATE_MODE_OFF\";\n    DatagridRenderStep[DatagridRenderStep[\"CLEAR_WIDTHS\"] = 3] = \"CLEAR_WIDTHS\";\n    DatagridRenderStep[DatagridRenderStep[\"COMPUTE_COLUMN_WIDTHS\"] = 4] = \"COMPUTE_COLUMN_WIDTHS\";\n  })(DatagridRenderStep || (DatagridRenderStep = {}));\n\n  return DatagridRenderStep;\n})();\n\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nlet DatagridRenderOrganizer = /*#__PURE__*/(() => {\n  class DatagridRenderOrganizer {\n    constructor() {\n      this._renderStep = new Subject();\n      this.alreadySized = false;\n    }\n\n    get renderStep() {\n      return this._renderStep.asObservable();\n    }\n\n    filterRenderSteps(step) {\n      return this.renderStep.pipe(filter(testStep => step === testStep));\n    }\n\n    resize() {\n      this._renderStep.next(DatagridRenderStep.CALCULATE_MODE_ON);\n\n      if (this.alreadySized) {\n        this._renderStep.next(DatagridRenderStep.CLEAR_WIDTHS);\n      }\n\n      this._renderStep.next(DatagridRenderStep.COMPUTE_COLUMN_WIDTHS);\n\n      this._renderStep.next(DatagridRenderStep.ALIGN_COLUMNS);\n\n      this.alreadySized = true;\n\n      this._renderStep.next(DatagridRenderStep.CALCULATE_MODE_OFF);\n    }\n\n  }\n\n  DatagridRenderOrganizer.ɵfac = function DatagridRenderOrganizer_Factory(t) {\n    return new (t || DatagridRenderOrganizer)();\n  };\n\n  DatagridRenderOrganizer.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: DatagridRenderOrganizer,\n    factory: DatagridRenderOrganizer.ɵfac\n  });\n  return DatagridRenderOrganizer;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet DisplayModeService = /*#__PURE__*/(() => {\n  class DisplayModeService {\n    constructor(renderOrganizer) {\n      this.subscriptions = [];\n      this._view = new BehaviorSubject(DatagridDisplayMode.DISPLAY);\n      this.subscriptions.push(renderOrganizer.filterRenderSteps(DatagridRenderStep.CALCULATE_MODE_ON).subscribe(() => this._view.next(DatagridDisplayMode.CALCULATE)));\n      this.subscriptions.push(renderOrganizer.filterRenderSteps(DatagridRenderStep.CALCULATE_MODE_OFF).subscribe(() => this._view.next(DatagridDisplayMode.DISPLAY)));\n    }\n\n    get view() {\n      return this._view.asObservable();\n    }\n\n    ngOnDestroy() {\n      this.subscriptions.forEach(sub => sub.unsubscribe());\n    }\n\n  }\n\n  DisplayModeService.ɵfac = function DisplayModeService_Factory(t) {\n    return new (t || DisplayModeService)(ɵngcc0.ɵɵinject(DatagridRenderOrganizer));\n  };\n\n  DisplayModeService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: DisplayModeService,\n    factory: DisplayModeService.ɵfac\n  });\n  return DisplayModeService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet nbSelection = 0;\nlet Selection = /*#__PURE__*/(() => {\n  class Selection {\n    constructor(_items, _filters, _zone) {\n      this._items = _items;\n      this._filters = _filters;\n      this._zone = _zone;\n      this.preserveSelection = false;\n      this.prevSelectionRefs = []; // Refs of selected items\n\n      this.lockedRefs = []; // Ref of locked items\n\n      this._selectionType = SelectionType.None;\n      /** @deprecated since 2.0, remove in 3.0 */\n\n      this.rowSelectionMode = false;\n      /**\n       * Subscriptions to the other providers changes.\n       */\n\n      this.subscriptions = [];\n      /**\n       * Shift key state, for use in range selection.\n       */\n\n      this.shiftPressed = false;\n      this.valueCollector = new Subject();\n      /**\n       * The Observable that lets other classes subscribe to selection changes\n       */\n\n      this._change = new Subject();\n      this.id = 'clr-dg-selection' + nbSelection++;\n      this.subscriptions.push(this._filters.change.subscribe(() => {\n        if (!this._selectable || this.preserveSelection) {\n          return;\n        }\n\n        this.clearSelection();\n      }));\n      this.subscriptions.push(this._items.allChanges.subscribe(updatedItems => {\n        // Reset the lockedRefs;\n        const updateLockedRef = [];\n\n        switch (this.selectionType) {\n          case SelectionType.None:\n            {\n              break;\n            }\n\n          case SelectionType.Single:\n            {\n              let newSingle;\n              const trackBy = this._items.trackBy;\n              let selectionUpdated = false; // if the currentSingle has been set before data was loaded, we look up and save the ref from current data set\n\n              if (this.currentSingle && !this.prevSingleSelectionRef) {\n                if (this._items.all && this._items.trackBy) {\n                  const lookup = this._items.all.findIndex(maybe => maybe === this.currentSingle);\n\n                  this.prevSingleSelectionRef = this._items.trackBy(lookup, this.currentSingle);\n                }\n              }\n\n              updatedItems.forEach((item, index) => {\n                const ref = trackBy(index, item); // If one of the updated items is the previously selectedSingle, set it as the new one\n\n                if (this.prevSingleSelectionRef === ref) {\n                  newSingle = item;\n                  selectionUpdated = true;\n                }\n\n                if (this.lockedRefs.indexOf(ref) > -1) {\n                  updateLockedRef.push(ref);\n                }\n              }); // If we're using smart datagrids, we expect all items to be present in the updatedItems array.\n              // Therefore, we should delete the currentSingle if it used to be defined but doesn't exist anymore.\n              // No explicit \"delete\" is required, since newSingle would be undefined at this point.\n              // Marking it as selectionUpdated here will set currentSingle to undefined below in the setTimeout.\n\n              if (this._items.smart && !newSingle) {\n                selectionUpdated = true;\n              } // TODO: Discussed this with Eudes and this is fine for now.\n              // But we need to figure out a different pattern for the\n              // child triggering the parent change detection problem.\n              // Using setTimeout for now to fix this.\n\n\n              setTimeout(() => {\n                if (selectionUpdated) {\n                  this.currentSingle = newSingle;\n                }\n              }, 0);\n              break;\n            }\n\n          case SelectionType.Multi:\n            {\n              let leftOver = this.current.slice();\n              const trackBy = this._items.trackBy;\n              let selectionUpdated = false; // if the current has been set before data was loaded, we look up and save the ref from current data set\n\n              if (this.current.length > 0 && this.prevSelectionRefs.length !== this.current.length) {\n                if (this._items.all && this._items.trackBy) {\n                  this.prevSelectionRefs = [];\n                  this.current.forEach(item => {\n                    const lookup = this._items.all.findIndex(maybe => maybe === item);\n\n                    this.prevSelectionRefs.push(this._items.trackBy(lookup, item));\n                  });\n                }\n              } // Duplicate loop, when the issue is issue#2342 is revisited keep in mind that\n              // we need to go over every updated item and check to see if there are valid to be\n              // locked or not and update it. When only add items that are found in the lockedRefs back.\n              //\n              // The both loops below that goes over updatedItems could be combined into one.\n\n\n              updatedItems.forEach((item, index) => {\n                const ref = trackBy(index, item);\n\n                if (this.lockedRefs.indexOf(ref) > -1) {\n                  updateLockedRef.push(ref);\n                }\n              }); // TODO: revisit this when we work on https://github.com/vmware/clarity/issues/2342\n              // currently, the selection is cleared when filter is applied, so the logic inside\n              // the if statement below results in broken behavior.\n\n              if (leftOver.length > 0) {\n                updatedItems.forEach((item, index) => {\n                  const ref = trackBy(index, item); // Look in current selected refs array if item is selected, and update actual value\n\n                  const selectedIndex = this.prevSelectionRefs.indexOf(ref);\n\n                  if (selectedIndex > -1) {\n                    leftOver[selectedIndex] = item;\n                    selectionUpdated = true;\n                  }\n                }); // Filter out any unmatched items if we're using smart datagrids where we expect all items to be\n                // present\n\n                if (this._items.smart) {\n                  leftOver = leftOver.filter(selected => updatedItems.indexOf(selected) > -1);\n\n                  if (this.current.length !== leftOver.length) {\n                    selectionUpdated = true;\n                  }\n                } // TODO: Discussed this with Eudes and this is fine for now.\n                // But we need to figure out a different pattern for the\n                // child triggering the parent change detection problem.\n                // Using setTimeout for now to fix this.\n\n\n                setTimeout(() => {\n                  if (selectionUpdated) {\n                    this.current = leftOver;\n                  }\n                }, 0);\n              }\n\n              break;\n            }\n\n          default:\n            {\n              break;\n            }\n        } // Sync locked items\n\n\n        this.lockedRefs = updateLockedRef;\n      }));\n      this.subscriptions.push(this.valueCollector.pipe(debounceTime(0)).subscribe(() => this.emitChange()));\n    }\n\n    clearSelection() {\n      this._current = [];\n      this.prevSelectionRefs = [];\n      this.prevSingleSelectionRef = null;\n      this._currentSingle = null;\n      this.emitChange();\n    }\n\n    get selectionType() {\n      return this._selectionType;\n    }\n\n    set selectionType(value) {\n      if (value === this.selectionType) {\n        return;\n      }\n\n      this._selectionType = value;\n\n      if (value === SelectionType.None) {\n        delete this.current;\n      } else {\n        this.updateCurrent([], false);\n      }\n    }\n\n    get _selectable() {\n      return this._selectionType === SelectionType.Multi || this._selectionType === SelectionType.Single;\n    }\n    /**\n     * Cleans up our subscriptions to other providers\n     */\n\n\n    destroy() {\n      this.subscriptions.forEach(sub => sub.unsubscribe());\n    }\n\n    get currentSingle() {\n      return this._currentSingle;\n    }\n\n    set currentSingle(value) {\n      if (value === this._currentSingle) {\n        return;\n      }\n\n      this._currentSingle = value;\n\n      if (this._items.all && this._items.trackBy && value) {\n        const lookup = this._items.all.findIndex(maybe => maybe === value);\n\n        this.prevSingleSelectionRef = this._items.trackBy(lookup, value);\n      }\n\n      this.emitChange();\n    }\n\n    get current() {\n      return this._current;\n    }\n\n    set current(value) {\n      this.updateCurrent(value, true);\n    }\n\n    updateCurrent(value, emit) {\n      this._current = value;\n\n      if (emit) {\n        this.valueCollector.next(value);\n      }\n    }\n\n    emitChange() {\n      if (this._selectionType === SelectionType.Single) {\n        this._change.next(this.currentSingle);\n      } else if (this._selectionType === SelectionType.Multi) {\n        this._change.next(this.current);\n      }\n    } // We do not want to expose the Subject itself, but the Observable which is read-only\n\n\n    get change() {\n      return this._change.asObservable();\n    }\n    /**\n     * Checks if an item is currently selected\n     */\n\n\n    isSelected(item) {\n      if (this._selectionType === SelectionType.Single) {\n        return this.currentSingle === item;\n      } else if (this._selectionType === SelectionType.Multi) {\n        return this.current.indexOf(item) >= 0;\n      }\n\n      return false;\n    }\n    /**\n     * Selects an item\n     */\n\n\n    selectItem(item) {\n      this.current = this.current.concat(item);\n\n      if (this._items.trackBy && this._items.all) {\n        // Push selected ref onto array\n        const lookup = this._items.all.findIndex(maybe => maybe === item);\n\n        this.prevSelectionRefs.push(this._items.trackBy(lookup, item));\n      }\n    }\n    /**\n     * Deselects an item\n     */\n\n\n    deselectItem(indexOfItem) {\n      this.current = this.current.slice(0, indexOfItem).concat(this.current.slice(indexOfItem + 1));\n\n      if (this._items.trackBy && indexOfItem < this.prevSelectionRefs.length) {\n        // Keep selected refs array in sync\n        const removedItems = this.prevSelectionRefs.splice(indexOfItem, 1); // locked reference is no longer needed (if any)\n\n        this.lockedRefs = this.lockedRefs.filter(locked => locked !== removedItems[0]);\n      }\n    }\n    /**\n     * Selects or deselects an item\n     */\n\n\n    setSelected(item, selected) {\n      const index = this.current ? this.current.indexOf(item) : -1;\n\n      switch (this._selectionType) {\n        case SelectionType.None:\n          break;\n\n        case SelectionType.Single:\n          // in single selection, set currentSingle method should be used\n          break;\n\n        case SelectionType.Multi:\n          if (index >= 0 && !selected) {\n            this.deselectItem(index);\n          } else if (index < 0 && selected) {\n            this.selectItem(item);\n          }\n\n          break;\n\n        default:\n          break;\n      }\n    }\n    /**\n     * Checks if all currently displayed items are selected\n     */\n\n\n    isAllSelected() {\n      if (this._selectionType !== SelectionType.Multi || !this._items.displayed) {\n        return false;\n      } // make sure to exclude the locked items from the list when counting\n\n\n      const displayedItems = this._items.displayed.filter(item => {\n        return this.isLocked(item) === false;\n      });\n\n      const nbDisplayed = displayedItems.length;\n\n      if (nbDisplayed < 1) {\n        return false;\n      }\n\n      const temp = displayedItems.filter(item => this.current.indexOf(item) > -1);\n      return temp.length === displayedItems.length;\n    }\n    /**\n     * Make sure that it could be locked\n     *\n     * @remark\n     * Check also is items.all an array, if not there is no nothing to lock or compare to\n     *\n     */\n\n\n    canItBeLocked() {\n      // We depend on the trackBy and all so there are part of the requirment of is item could be locked\n      return this._selectionType !== SelectionType.None && Array.isArray(this._items.all);\n    }\n    /**\n     * Lock and unlock item\n     */\n\n\n    lockItem(item, lock) {\n      if (this.canItBeLocked()) {\n        const ref = this._items.trackBy(this._items.all.findIndex(maybe => maybe === item), item);\n\n        if (lock === true) {\n          // Add to lockedRef\n          this.lockedRefs.push(ref);\n        } else {\n          // Remove from lockedRef\n          this.lockedRefs = this.lockedRefs.filter(lockedItem => ref !== lockedItem);\n        }\n      }\n    }\n    /**\n     * Check is item locked or not by searcing into lockedRefs for entry\n     */\n\n\n    isLocked(item) {\n      /**\n       * The check for selectionType will boost the performence by NOT searching\n       * into the array when there is no need for that.\n       */\n      if (this.canItBeLocked()) {\n        const ref = this._items.trackBy(this._items.all.findIndex(maybe => maybe === item), item);\n\n        return this.lockedRefs.indexOf(ref) > -1;\n      }\n\n      return false;\n    }\n    /**\n     * Selects or deselects all currently displayed items\n     */\n\n\n    toggleAll() {\n      if (this._selectionType === SelectionType.None || this._selectionType === SelectionType.Single) {\n        return;\n      }\n      /**\n       * If every currently displayed item is already selected, we clear them.\n       * If at least one item isn't selected, we select every currently displayed item.\n       */\n\n\n      if (this.isAllSelected()) {\n        this._items.displayed.forEach(item => {\n          const currentIndex = this.current.indexOf(item);\n\n          if (currentIndex > -1 && this.isLocked(item) === false) {\n            this.deselectItem(currentIndex);\n          }\n        });\n      } else {\n        this._items.displayed.forEach(item => {\n          if (this.current.indexOf(item) < 0 && this.isLocked(item) === false) {\n            this.selectItem(item);\n          }\n        });\n      }\n    }\n\n  }\n\n  Selection.ɵfac = function Selection_Factory(t) {\n    return new (t || Selection)(ɵngcc0.ɵɵinject(Items), ɵngcc0.ɵɵinject(FiltersProvider), ɵngcc0.ɵɵinject(ɵngcc0.NgZone));\n  };\n\n  Selection.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: Selection,\n    factory: Selection.ɵfac\n  });\n  return Selection;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet WrappedRow = /*#__PURE__*/(() => {\n  class WrappedRow {\n    constructor() {\n      this._dynamic = false;\n    }\n\n    ngAfterViewInit() {\n      // Create the cells view in memory, not the DOM.\n      this.rowView = this.templateRef.createEmbeddedView(null);\n    }\n\n    ngOnDestroy() {\n      this.rowView.destroy();\n    }\n\n  }\n\n  WrappedRow.ɵfac = function WrappedRow_Factory(t) {\n    return new (t || WrappedRow)();\n  };\n\n  WrappedRow.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: WrappedRow,\n    selectors: [[\"dg-wrapped-row\"]],\n    viewQuery: function WrappedRow_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c47, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.templateRef = _t.first);\n      }\n    },\n    ngContentSelectors: _c0,\n    decls: 2,\n    vars: 0,\n    consts: [[\"rowPortal\", \"\"]],\n    template: function WrappedRow_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵtemplate(0, WrappedRow_ng_template_0_Template, 1, 0, \"ng-template\", null, 0, ɵngcc0.ɵɵtemplateRefExtractor);\n      }\n    },\n    encapsulation: 2\n  });\n  return WrappedRow;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet nbRow = 0;\nlet ClrDatagridRow = /*#__PURE__*/(() => {\n  class ClrDatagridRow {\n    constructor(selection, rowActionService, globalExpandable, expand, detailService, displayMode, vcr, renderer, el, commonStrings, items, document) {\n      this.selection = selection;\n      this.rowActionService = rowActionService;\n      this.globalExpandable = globalExpandable;\n      this.expand = expand;\n      this.detailService = detailService;\n      this.displayMode = displayMode;\n      this.vcr = vcr;\n      this.renderer = renderer;\n      this.el = el;\n      this.commonStrings = commonStrings;\n      this.items = items;\n      this.document = document;\n      /* reference to the enum so that template can access */\n\n      this.SELECTION_TYPE = SelectionType;\n      this.expandAnimationTrigger = false;\n      this._selected = false;\n      this.selectedChanged = new EventEmitter(false);\n      this.expandedChange = new EventEmitter(false);\n      this._detailOpenLabel = '';\n      this._detailCloseLabel = '';\n      this.subscriptions = [];\n      this.displayCells = false;\n      nbRow++;\n      this.id = 'clr-dg-row' + nbRow;\n      this.radioId = 'clr-dg-row-rd' + nbRow;\n      this.checkboxId = 'clr-dg-row-cb' + nbRow;\n      this.expandableId = expand.expandableId;\n      this.subscriptions.push(combineLatest(this.expand.replace, this.expand.expandChange).subscribe(([expandReplaceValue, expandChangeValue]) => {\n        if (expandReplaceValue && expandChangeValue) {\n          // replaced and expanding\n          this.replaced = true;\n          this.renderer.addClass(this.el.nativeElement, 'datagrid-row-replaced');\n        } else {\n          this.replaced = false; // Handles these cases: not replaced and collapsing & replaced and\n          // collapsing and not replaced and expanding.\n\n          this.renderer.removeClass(this.el.nativeElement, 'datagrid-row-replaced');\n        }\n      }));\n    }\n    /**\n     * The default behavior in Chrome and Firefox for shift-clicking on a label is to perform text-selection.\n     * This prevents our intended range-selection, because this text-selection overrides our shift-click event.\n     * We need to clear the stored selection range when shift-clicking. This will override the mostly unused shift-click\n     * selection browser functionality, which is inconsistently implemented in browsers anyway.\n     */\n\n\n    clearRanges(event) {\n      if (event.shiftKey) {\n        this.document.getSelection().removeAllRanges(); // Firefox is too persistent about its text-selection behaviour. So we need to add a preventDefault();\n        // We should not try to enforce this on the other browsers, though, because their toggle cycle does not get canceled by\n        // the preventDefault() and they toggle the checkbox second time, effectively retrurning it to not-selected.\n\n        if (window.navigator.userAgent.indexOf('Firefox') !== -1) {\n          event.preventDefault();\n          this.toggle(true);\n        }\n      }\n    }\n    /**\n     * Indicates if the row is selected\n     */\n\n\n    get selected() {\n      if (this.selection.selectionType === SelectionType.None) {\n        return this._selected;\n      } else {\n        return this.selection.isSelected(this.item);\n      }\n    }\n\n    set selected(value) {\n      if (this.selection.selectionType === SelectionType.None) {\n        this._selected = value;\n      } else {\n        if (value && this.selection.selectionType === SelectionType.Multi) {\n          this.rangeSelect();\n        } else {\n          this.selection.rangeStart = null;\n        }\n\n        this.selection.setSelected(this.item, value);\n      }\n    } // By default every item is selectable; it becomes not selectable only if it's explicitly set to false\n\n\n    set clrDgSelectable(value) {\n      this.selection.lockItem(this.item, value === false);\n    }\n\n    get clrDgSelectable() {\n      return !this.selection.isLocked(this.item);\n    }\n\n    toggle(selected = !this.selected) {\n      if (selected !== this.selected) {\n        this.selected = selected;\n        this.selectedChanged.emit(selected);\n      }\n    }\n\n    get expanded() {\n      return this.expand.expanded;\n    }\n\n    set expanded(value) {\n      this.expand.expanded = value;\n    }\n\n    toggleExpand() {\n      if (this.expand.expandable) {\n        this.expandAnimation.updateStartHeight();\n        this.expanded = !this.expanded;\n        this.expandedChange.emit(this.expanded);\n      }\n    }\n\n    set clrDgDetailOpenLabel(label) {\n      this._detailOpenLabel = label;\n    }\n\n    get clrDgDetailOpenLabel() {\n      return this._detailOpenLabel ? this._detailOpenLabel : this.commonStrings.keys.open;\n    }\n\n    set clrDgDetailCloseLabel(label) {\n      this._detailCloseLabel = label;\n    }\n\n    get clrDgDetailCloseLabel() {\n      return this._detailCloseLabel ? this._detailCloseLabel : this.commonStrings.keys.close;\n    }\n\n    ngAfterContentInit() {\n      this.dgCells.changes.subscribe(() => {\n        this.dgCells.forEach(cell => {\n          if (!cell._view.destroyed) {\n            this._scrollableCells.insert(cell._view);\n          }\n        });\n      });\n    }\n\n    ngAfterViewInit() {\n      this.subscriptions.push(this.displayMode.view.subscribe(viewChange => {\n        // Listen for view changes and move cells around depending on the current displayType\n        // remove cell views from display view\n        for (let i = this._scrollableCells.length; i > 0; i--) {\n          this._scrollableCells.detach();\n        } // remove cell views from calculated view\n\n\n        for (let i = this._calculatedCells.length; i > 0; i--) {\n          this._calculatedCells.detach();\n        }\n\n        if (viewChange === DatagridDisplayMode.CALCULATE) {\n          this.displayCells = false;\n          this.dgCells.forEach(cell => {\n            if (!cell._view.destroyed) {\n              this._calculatedCells.insert(cell._view);\n            }\n          });\n        } else {\n          this.displayCells = true;\n          this.dgCells.forEach(cell => {\n            if (!cell._view.destroyed) {\n              this._scrollableCells.insert(cell._view);\n            }\n          });\n        }\n      }), this.expand.animate.subscribe(() => {\n        this.expandAnimationTrigger = !this.expandAnimationTrigger;\n      }));\n    }\n\n    rangeSelect() {\n      const items = this.items.displayed;\n\n      if (!items) {\n        return;\n      }\n\n      const startIx = items.indexOf(this.selection.rangeStart);\n\n      if (this.selection.rangeStart && this.selection.current.includes(this.selection.rangeStart) && this.selection.shiftPressed && startIx !== -1) {\n        const endIx = items.indexOf(this.item); // Using Set to remove duplicates\n\n        const newSelection = new Set(this.selection.current.concat(items.slice(Math.min(startIx, endIx), Math.max(startIx, endIx) + 1)));\n        this.selection.clearSelection();\n        this.selection.current.push(...newSelection);\n      } else {\n        // page number has changed or\n        // no Shift was pressed or\n        // rangeStart not yet set\n        this.selection.rangeStart = this.item;\n      }\n    }\n\n    ngOnDestroy() {\n      this.subscriptions.forEach(sub => sub.unsubscribe());\n    }\n\n    ngOnInit() {\n      this.wrappedInjector = new HostWrapper(WrappedRow, this.vcr);\n      this.selection.lockItem(this.item, this.clrDgSelectable === false);\n    }\n\n    get _view() {\n      return this.wrappedInjector.get(WrappedRow, this.vcr).rowView;\n    }\n\n  }\n\n  ClrDatagridRow.ɵfac = function ClrDatagridRow_Factory(t) {\n    return new (t || ClrDatagridRow)(ɵngcc0.ɵɵdirectiveInject(Selection), ɵngcc0.ɵɵdirectiveInject(RowActionService), ɵngcc0.ɵɵdirectiveInject(ExpandableRowsCount), ɵngcc0.ɵɵdirectiveInject(DatagridIfExpandService), ɵngcc0.ɵɵdirectiveInject(DetailService), ɵngcc0.ɵɵdirectiveInject(DisplayModeService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ClrCommonStringsService), ɵngcc0.ɵɵdirectiveInject(Items), ɵngcc0.ɵɵdirectiveInject(DOCUMENT));\n  };\n\n  ClrDatagridRow.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ClrDatagridRow,\n    selectors: [[\"clr-dg-row\"]],\n    contentQueries: function ClrDatagridRow_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, ClrDatagridCell, 4);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.dgCells = _t);\n      }\n    },\n    viewQuery: function ClrDatagridRow_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(ClrExpandableAnimation, 5);\n        ɵngcc0.ɵɵviewQuery(_c48, 5);\n        ɵngcc0.ɵɵviewQuery(_c49, 5, ViewContainerRef);\n        ɵngcc0.ɵɵviewQuery(_c50, 5, ViewContainerRef);\n        ɵngcc0.ɵɵviewQuery(_c51, 5, ViewContainerRef);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.expandAnimation = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.detailButton = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._stickyCells = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._scrollableCells = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._calculatedCells = _t.first);\n      }\n    },\n    hostAttrs: [\"role\", \"rowgroup\"],\n    hostVars: 5,\n    hostBindings: function ClrDatagridRow_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-owns\", ctx.id);\n        ɵngcc0.ɵɵclassProp(\"datagrid-row\", true)(\"datagrid-selected\", ctx.selected);\n      }\n    },\n    inputs: {\n      selected: [\"clrDgSelected\", \"selected\"],\n      clrDgSelectable: \"clrDgSelectable\",\n      expanded: [\"clrDgExpanded\", \"expanded\"],\n      clrDgDetailOpenLabel: \"clrDgDetailOpenLabel\",\n      clrDgDetailCloseLabel: \"clrDgDetailCloseLabel\",\n      item: [\"clrDgItem\", \"item\"]\n    },\n    outputs: {\n      selectedChanged: \"clrDgSelectedChange\",\n      expandedChange: \"clrDgExpandedChange\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([DatagridIfExpandService, {\n      provide: IfExpandService,\n      useExisting: DatagridIfExpandService\n    }, {\n      provide: LoadingListener,\n      useExisting: DatagridIfExpandService\n    }])],\n    ngContentSelectors: _c55,\n    decls: 9,\n    vars: 3,\n    consts: [[\"class\", \"datagrid-row-clickable\", 3, \"mousedown\", 4, \"ngIf\"], [3, \"clrExpandTrigger\", 4, \"ngIf\"], [4, \"ngIf\"], [\"detail\", \"\"], [\"rowContent\", \"\"], [\"calculatedCells\", \"\"], [1, \"datagrid-row-clickable\", 3, \"mousedown\"], [3, \"clrExpandTrigger\"], [3, \"ngTemplateOutlet\"], [\"role\", \"row\", 1, \"datagrid-row-master\", \"datagrid-row-flex\", 3, \"id\"], [1, \"datagrid-row-sticky\"], [\"stickyCells\", \"\"], [\"class\", \"datagrid-select datagrid-fixed-column datagrid-cell\", \"role\", \"gridcell\", 3, \"ngClass\", 4, \"ngIf\"], [\"class\", \"datagrid-row-actions datagrid-fixed-column datagrid-cell\", \"role\", \"gridcell\", 4, \"ngIf\"], [\"class\", \"datagrid-expandable-caret datagrid-fixed-column datagrid-cell\", \"role\", \"gridcell\", 4, \"ngIf\"], [\"class\", \"datagrid-detail-caret datagrid-fixed-column datagrid-cell\", 4, \"ngIf\"], [1, \"datagrid-row-scrollable\", 3, \"ngClass\"], [1, \"datagrid-scrolling-cells\"], [\"scrollableCells\", \"\"], [\"role\", \"gridcell\", 1, \"datagrid-select\", \"datagrid-fixed-column\", \"datagrid-cell\", 3, \"ngClass\"], [1, \"clr-checkbox-wrapper\"], [\"type\", \"checkbox\", 3, \"ngModel\", \"id\", \"ngModelChange\"], [1, \"clr-control-label\", \"clr-col-null\", 3, \"for\", \"click\"], [1, \"clr-sr-only\"], [\"type\", \"radio\", \"clrRadio\", \"\", 3, \"id\", \"name\", \"value\", \"ngModel\", \"checked\", \"ngModelChange\"], [\"role\", \"gridcell\", 1, \"datagrid-row-actions\", \"datagrid-fixed-column\", \"datagrid-cell\"], [\"role\", \"gridcell\", 1, \"datagrid-expandable-caret\", \"datagrid-fixed-column\", \"datagrid-cell\"], [\"type\", \"button\", \"class\", \"datagrid-expandable-caret-button\", 3, \"click\", 4, \"ngIf\"], [\"clrSmall\", \"\", 4, \"ngIf\"], [\"type\", \"button\", 1, \"datagrid-expandable-caret-button\", 3, \"click\"], [\"shape\", \"angle\", 1, \"datagrid-expandable-caret-icon\"], [\"clrSmall\", \"\"], [1, \"datagrid-detail-caret\", \"datagrid-fixed-column\", \"datagrid-cell\"], [\"type\", \"button\", \"aria-haspopup\", \"dialog\", 1, \"datagrid-detail-caret-button\", 3, \"click\"], [\"detailButton\", \"\"], [\"shape\", \"angle-double\", 1, \"datagrid-detail-caret-icon\"]],\n    template: function ClrDatagridRow_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c54);\n        ɵngcc0.ɵɵtemplate(0, ClrDatagridRow_label_0_Template, 3, 2, \"label\", 0);\n        ɵngcc0.ɵɵtemplate(1, ClrDatagridRow_clr_expandable_animation_1_Template, 2, 2, \"clr-expandable-animation\", 1);\n        ɵngcc0.ɵɵtemplate(2, ClrDatagridRow_2_Template, 1, 1, undefined, 2);\n        ɵngcc0.ɵɵtemplate(3, ClrDatagridRow_ng_template_3_Template, 1, 0, \"ng-template\", null, 3, ɵngcc0.ɵɵtemplateRefExtractor);\n        ɵngcc0.ɵɵtemplate(5, ClrDatagridRow_ng_template_5_Template, 16, 13, \"ng-template\", null, 4, ɵngcc0.ɵɵtemplateRefExtractor);\n        ɵngcc0.ɵɵelementContainer(7, null, 5);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.selection.rowSelectionMode);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.selection.rowSelectionMode && ctx.expand.expandable);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.selection.rowSelectionMode && !ctx.expand.expandable);\n      }\n    },\n    directives: [ɵngcc1.NgIf, ClrLabel, ClrExpandableAnimation, ɵngcc1.NgTemplateOutlet, ɵngcc1.NgClass, ɵngcc2.CheckboxControlValueAccessor, ɵngcc2.NgControlStatus, ɵngcc2.NgModel, ɵngcc2.RadioControlValueAccessor, ɵngcc2.DefaultValueAccessor, ClrRadio, CdsIconCustomTag, ClrSpinner],\n    encapsulation: 2\n  });\n  return ClrDatagridRow;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nvar DatagridColumnChanges = /*#__PURE__*/(() => {\n  (function (DatagridColumnChanges) {\n    DatagridColumnChanges[DatagridColumnChanges[\"WIDTH\"] = 0] = \"WIDTH\";\n    DatagridColumnChanges[DatagridColumnChanges[\"HIDDEN\"] = 1] = \"HIDDEN\";\n  })(DatagridColumnChanges || (DatagridColumnChanges = {}));\n\n  return DatagridColumnChanges;\n})();\n\nconst ɵ1 = key => DatagridColumnChanges[key],\n      ɵ0$1 = key => key === parseInt(key, 10);\n\nconst ALL_COLUMN_CHANGES = Object.keys(DatagridColumnChanges).map(ɵ1).filter(ɵ0$1); // extracts only integer keys\n\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nlet ColumnsService = /*#__PURE__*/(() => {\n  class ColumnsService {\n    constructor() {\n      this.columns = [];\n      this._cache = [];\n    }\n\n    cache() {\n      this._cache = this.columns.map(subject => {\n        const value = Object.assign({}, subject.value);\n        delete value.changes;\n        return value;\n      });\n    }\n\n    hasCache() {\n      return !!this._cache.length;\n    }\n\n    resetToLastCache() {\n      this._cache.forEach((state, index) => {\n        // Just emit the exact value from the cache\n        this.columns[index].next(Object.assign(Object.assign({}, state), {\n          changes: ALL_COLUMN_CHANGES\n        }));\n      });\n\n      this._cache = [];\n    }\n\n    get columnStates() {\n      return this.columns.map(column => column.value);\n    }\n\n    get hasHideableColumns() {\n      return this.columnStates.filter(state => state.hideable).length > 0;\n    } // Helper method to emit a change to a column only when there is an actual diff to process for that column\n\n\n    emitStateChangeAt(columnIndex, diff) {\n      if (!this.columns[columnIndex]) {\n        return;\n      }\n\n      this.emitStateChange(this.columns[columnIndex], diff);\n    }\n\n    emitStateChange(column, diff) {\n      column.next(Object.assign(Object.assign({}, column.value), diff));\n    }\n\n  }\n\n  ColumnsService.ɵfac = function ColumnsService_Factory(t) {\n    return new (t || ColumnsService)();\n  };\n\n  ColumnsService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: ColumnsService,\n    factory: ColumnsService.ɵfac\n  });\n  return ColumnsService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/**\n * This provider aggregates state changes from the various providers of the Datagrid\n */\n\n\nlet StateProvider = /*#__PURE__*/(() => {\n  class StateProvider {\n    constructor(filters, sort, page, debouncer) {\n      this.filters = filters;\n      this.sort = sort;\n      this.page = page;\n      this.debouncer = debouncer;\n      /**\n       * The Observable that lets other classes subscribe to global state changes\n       */\n\n      this.change = this.debouncer.change.pipe(map(() => this.state));\n    }\n    /*\n     * By making this a getter, we open the possibility for a setter in the future.\n     * It's been requested a couple times.\n     */\n\n\n    get state() {\n      const state = {};\n\n      if (this.page.size > 0) {\n        state.page = {\n          from: this.page.firstItem,\n          to: this.page.lastItem,\n          size: this.page.size,\n          current: this.page.current\n        };\n      }\n\n      if (this.sort.comparator) {\n        if (this.sort.comparator instanceof DatagridPropertyComparator) {\n          /*\n           * Special case for the default object property comparator,\n           * we give the property name instead of the actual comparator.\n           */\n          state.sort = {\n            by: this.sort.comparator.prop,\n            reverse: this.sort.reverse\n          };\n        } else {\n          state.sort = {\n            by: this.sort.comparator,\n            reverse: this.sort.reverse\n          };\n        }\n      }\n\n      const activeFilters = this.filters.getActiveFilters();\n\n      if (activeFilters.length > 0) {\n        state.filters = [];\n\n        for (const filter of activeFilters) {\n          if (filter.state) {\n            state.filters.push(filter.state);\n          } else {\n            state.filters.push(filter);\n          }\n        }\n      }\n\n      return state;\n    }\n\n  }\n\n  StateProvider.ɵfac = function StateProvider_Factory(t) {\n    return new (t || StateProvider)(ɵngcc0.ɵɵinject(FiltersProvider), ɵngcc0.ɵɵinject(Sort), ɵngcc0.ɵɵinject(Page), ɵngcc0.ɵɵinject(StateDebouncer));\n  };\n\n  StateProvider.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: StateProvider,\n    factory: StateProvider.ɵfac\n  });\n  return StateProvider;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/**\n * @description\n * Internal datagrid service that holds a reference to the clr-dg-table element and exposes a method to get height.\n */\n\n\nlet TableSizeService = /*#__PURE__*/(() => {\n  class TableSizeService {\n    constructor(platformId) {\n      this.platformId = platformId;\n    }\n\n    get tableRef() {\n      return this._tableRef;\n    }\n\n    set tableRef(element) {\n      this._tableRef = element;\n    }\n\n    set table(table) {\n      if (isPlatformBrowser(this.platformId) && table.nativeElement) {\n        this.tableRef = table.nativeElement.querySelector('.datagrid-table');\n      }\n    } // Used when resizing columns to show the column border being dragged.\n\n\n    getColumnDragHeight() {\n      if (!this.tableRef) {\n        return null;\n      }\n\n      return `${this.tableRef.clientHeight}px`;\n    }\n\n  }\n\n  TableSizeService.ɵfac = function TableSizeService_Factory(t) {\n    return new (t || TableSizeService)(ɵngcc0.ɵɵinject(PLATFORM_ID));\n  };\n\n  TableSizeService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: TableSizeService,\n    factory: TableSizeService.ɵfac\n  });\n  return TableSizeService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nfunction getTabableItems(el) {\n  const tabableSelector = ['a[href]', 'area[href]', 'input:not([disabled])', 'button:not([disabled])', 'select:not([disabled])', 'textarea:not([disabled])', 'iframe', 'object', 'embed', '*[tabindex]', '*[contenteditable=true]', '[role=button]:not([disabled])'].join(',');\n  return Array.from(el.querySelectorAll(tabableSelector));\n}\n\nlet KeyNavigationGridController = /*#__PURE__*/(() => {\n  class KeyNavigationGridController {\n    constructor(zone) {\n      this.zone = zone;\n      this.listenersAdded = false;\n      this.destroy$ = new Subject();\n      this.config = {\n        keyGridRows: '[role=row]:not(.datagrid-placeholder)',\n        keyGridCells: '[role=gridcell]:not(.datagrid-hidden-column):not(.datagrid-placeholder-content), [role=columnheader]:not(.datagrid-hidden-column):not(.datagrid-placeholder-content), .datagrid-detail-caret',\n        keyGrid: '[role=grid]'\n      };\n    }\n\n    get grid() {\n      var _a;\n\n      return (_a = this.host) === null || _a === void 0 ? void 0 : _a.querySelector(this.config.keyGrid);\n    }\n\n    get rows() {\n      var _a;\n\n      return (_a = this.host) === null || _a === void 0 ? void 0 : _a.querySelectorAll(this.config.keyGridRows);\n    }\n\n    get cells() {\n      var _a;\n\n      return (_a = this.host) === null || _a === void 0 ? void 0 : _a.querySelectorAll(this.config.keyGridCells);\n    }\n\n    ngOnDestroy() {\n      this.destroy$.next();\n      this.destroy$.complete();\n    }\n\n    addListeners() {\n      if (this.listenersAdded) {\n        return;\n      }\n\n      this.zone.runOutsideAngular(() => {\n        fromEvent(this.grid, 'mousedown').pipe(takeUntil(this.destroy$)).subscribe(e => {\n          // preserve right click for context menus & keyboard mouse control https://apple.stackexchange.com/questions/32715/how-do-i-open-the-context-menu-from-a-mac-keyboard\n          if (e.buttons === 1 && !e.ctrlKey) {\n            const activeCell = this.cells ? Array.from(this.cells).find(c => c === e.target || c === e.target.closest(this.config.keyGridCells)) : null;\n\n            if (activeCell) {\n              this.setActiveCell(activeCell);\n            }\n          }\n        });\n        fromEvent(this.grid, 'keydown').pipe(takeUntil(this.destroy$)).subscribe(e => {\n          // Skip column resize events\n          if (e.target.classList.contains('drag-handle') && (e.code === 'ArrowLeft' || e.code === 'ArrowRight')) {\n            return;\n          }\n\n          if (e.code === 'ArrowUp' || e.code === 'ArrowDown' || e.code === 'ArrowLeft' || e.code === 'ArrowRight' || e.code === 'End' || e.code === 'Home' || e.code === 'PageUp' || e.code === 'PageDown') {\n            const {\n              x,\n              y\n            } = this.getNextItemCoordinate(e);\n            const activeItem = this.rows ? Array.from(this.rows[y].querySelectorAll(this.config.keyGridCells))[x] : null;\n\n            if (activeItem) {\n              this.setActiveCell(activeItem);\n            }\n\n            e.preventDefault();\n          }\n        });\n      });\n      this.listenersAdded = true;\n    }\n\n    initializeKeyGrid(host) {\n      this.host = host;\n      this.addListeners();\n      this.resetKeyGrid();\n    }\n\n    resetKeyGrid() {\n      var _a;\n\n      (_a = this.cells) === null || _a === void 0 ? void 0 : _a.forEach(i => i.setAttribute('tabindex', '-1'));\n      const firstCell = this.cells ? this.cells[0] : null;\n      firstCell === null || firstCell === void 0 ? void 0 : firstCell.setAttribute('tabindex', '0');\n    }\n\n    setActiveCell(activeCell) {\n      const prior = this.cells ? Array.from(this.cells).find(c => c.getAttribute('tabindex') === '0') : null;\n\n      if (prior) {\n        prior.setAttribute('tabindex', '-1');\n      }\n\n      activeCell.setAttribute('tabindex', '0');\n      const items = getTabableItems(activeCell);\n      const item = activeCell.getAttribute('role') !== 'columnheader' && items[0] ? items[0] : activeCell;\n      item.focus();\n    }\n\n    getNextItemCoordinate(e) {\n      var _a;\n\n      let currentCell = this.cells ? Array.from(this.cells).find(i => i.getAttribute('tabindex') === '0') : null;\n\n      if (e.code === 'Tab') {\n        currentCell = document.activeElement;\n      }\n\n      const currentRow = this.rows && currentCell ? Array.from(this.rows).find(r => r.contains(currentCell)) : null;\n      const numOfRows = this.rows ? this.rows.length - 1 : 0;\n      const numOfColumns = this.cells ? this.cells.length / this.rows.length - 1 : 0;\n      let x = currentRow && currentCell ? Array.from(currentRow.querySelectorAll(this.config.keyGridCells)).indexOf(currentCell) : 0;\n      let y = currentRow && currentCell && this.rows ? Array.from(this.rows).indexOf(currentRow) : 0;\n      const dir = this.host.dir;\n      const inlineStart = dir === 'rtl' ? 'ArrowRight' : 'ArrowLeft';\n      const inlineEnd = dir === 'rtl' ? 'ArrowLeft' : 'ArrowRight';\n      const itemsPerPage = Math.floor(((_a = this.host) === null || _a === void 0 ? void 0 : _a.querySelector('.datagrid').clientHeight) / this.rows[0].clientHeight) - 1 || 0;\n\n      if (e.code === 'ArrowUp' && y !== 0) {\n        y = y - 1;\n      } else if (e.code === 'ArrowDown' && y < numOfRows) {\n        y = y + 1;\n      } else if (e.code === inlineStart && x !== 0) {\n        x = x - 1;\n      } else if (e.code === inlineEnd && x < numOfColumns) {\n        x = x + 1;\n      } else if (e.code === 'End') {\n        x = numOfColumns;\n\n        if (e.ctrlKey) {\n          y = numOfRows;\n        }\n      } else if (e.code === 'Home') {\n        x = 0;\n\n        if (e.ctrlKey) {\n          y = 0;\n        }\n      } else if (e.code === 'PageUp') {\n        y = y - itemsPerPage > 0 ? y - itemsPerPage : 0;\n      } else if (e.code === 'PageDown') {\n        y = y + itemsPerPage < numOfRows ? y + itemsPerPage : numOfRows;\n      }\n\n      return {\n        x,\n        y\n      };\n    }\n\n  }\n\n  KeyNavigationGridController.ɵfac = function KeyNavigationGridController_Factory(t) {\n    return new (t || KeyNavigationGridController)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone));\n  };\n\n  KeyNavigationGridController.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: KeyNavigationGridController,\n    factory: KeyNavigationGridController.ɵfac\n  });\n  return KeyNavigationGridController;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrDatagrid = /*#__PURE__*/(() => {\n  class ClrDatagrid {\n    constructor(organizer, items, expandableRows, selection, rowActionService, stateProvider, displayMode, renderer, detailService, datagridId, document, el, page, commonStrings, columnsService, keyNavigation, zone) {\n      this.organizer = organizer;\n      this.items = items;\n      this.expandableRows = expandableRows;\n      this.selection = selection;\n      this.rowActionService = rowActionService;\n      this.stateProvider = stateProvider;\n      this.displayMode = displayMode;\n      this.renderer = renderer;\n      this.detailService = detailService;\n      this.document = document;\n      this.el = el;\n      this.page = page;\n      this.commonStrings = commonStrings;\n      this.columnsService = columnsService;\n      this.keyNavigation = keyNavigation;\n      this.zone = zone;\n      /* reference to the enum so that template can access */\n\n      this.SELECTION_TYPE = SelectionType;\n      /**\n       * Output emitted whenever the data needs to be refreshed, based on user action or external ones\n       */\n\n      this.refresh = new EventEmitter(false);\n      this.selectedChanged = new EventEmitter(false);\n      this.singleSelectedChanged = new EventEmitter(false);\n      this.clrDgSingleSelectionAriaLabel = this.commonStrings.keys.singleSelectionAriaLabel;\n      this.clrDgSingleActionableAriaLabel = this.commonStrings.keys.singleActionableAriaLabel;\n      this.clrDetailExpandableAriaLabel = this.commonStrings.keys.detailExpandableAriaLabel; // Allows disabling of the auto focus on page/state changes (excludes focus management inside of popups)\n\n      this.clrDgDisablePageFocus = false;\n      /**\n       * Subscriptions to all the services and queries changes\n       */\n\n      this._subscriptions = [];\n      this.selectAllId = 'clr-dg-select-all-' + datagridId;\n      this.detailService.id = datagridId;\n    }\n    /**\n     * Freezes the datagrid while data is loading\n     */\n\n\n    get loading() {\n      return this.items.loading;\n    }\n\n    set loading(value) {\n      this.items.loading = value;\n    }\n    /**\n     * Public method to re-trigger the computation of displayed items manually\n     */\n\n\n    dataChanged() {\n      this.items.refresh();\n    }\n    /**\n     * Array of all selected items\n     */\n\n\n    set selected(value) {\n      if (value) {\n        this.selection.selectionType = SelectionType.Multi;\n      } else {\n        this.selection.selectionType = SelectionType.None;\n      }\n\n      this.selection.updateCurrent(value, false);\n    }\n    /**\n     * Selected item in single-select mode\n     */\n\n\n    set singleSelected(value) {\n      this.selection.selectionType = SelectionType.Single; // the clrDgSingleSelected is updated in one of two cases:\n      // 1. an explicit value is passed\n      // 2. is being set to null or undefined, where previously it had a value\n\n      if (value) {\n        this.selection.currentSingle = value;\n      } else if (this.selection.currentSingle) {\n        this.selection.currentSingle = null;\n      }\n    }\n\n    set clrDgPreserveSelection(state) {\n      this.selection.preserveSelection = state;\n    }\n    /**\n     * @deprecated since 2.0, remove in 3.0\n     *\n     * Selection/Deselection on row click mode\n     */\n\n\n    set rowSelectionMode(value) {\n      this.selection.rowSelectionMode = value;\n    }\n    /**\n     * Indicates if all currently displayed items are selected\n     */\n\n\n    get allSelected() {\n      return this.selection.isAllSelected();\n    }\n    /**\n     * Selects/deselects all currently displayed items\n     * @param value\n     */\n\n\n    set allSelected(_value) {\n      /**\n       * This is a setter but we ignore the value.\n       * It's strange, but it lets us have an indeterminate state where only\n       * some of the items are selected.\n       */\n      this.selection.toggleAll();\n    }\n\n    ngAfterContentInit() {\n      if (!this.items.smart) {\n        this.items.all = this.rows.map(row => row.item);\n      }\n\n      this._subscriptions.push(this.rows.changes.subscribe(() => {\n        if (!this.items.smart) {\n          this.items.all = this.rows.map(row => row.item);\n        } // Remove any projected rows from the displayedRows container\n        // Necessary with Ivy off. See https://github.com/vmware/clarity/issues/4692\n\n\n        for (let i = this._displayedRows.length - 1; i >= 0; i--) {\n          if (this._displayedRows.get(i).destroyed) {\n            this._displayedRows.remove(i);\n          }\n        }\n\n        this.rows.forEach(row => {\n          this._displayedRows.insert(row._view);\n        }); // Try to update only when there is something cached and its open.\n\n        if (this.detailService.state && this.detailService.isOpen) {\n          const row = this.rows.find((row, index) => {\n            return this.items.trackBy(index, row.item) === this.items.trackBy(index, this.detailService.state);\n          });\n          /**\n           * Reopen updated row or close it\n           */\n\n          row ? this.detailService.open(row.item, row.detailButton.nativeElement) : this.detailService.close();\n        }\n      }));\n    }\n    /**\n     * Our setup happens in the view of some of our components, so we wait for it to be done before starting\n     */\n\n\n    ngAfterViewInit() {\n      this.keyNavigation.initializeKeyGrid(this.el.nativeElement); // TODO: determine if we can get rid of provider wiring in view init so that subscriptions can be done earlier\n\n      this.refresh.emit(this.stateProvider.state);\n\n      this._subscriptions.push(this.stateProvider.change.subscribe(state => this.refresh.emit(state)), this.selection.change.subscribe(s => {\n        if (this.selection.selectionType === SelectionType.Single) {\n          this.singleSelectedChanged.emit(s);\n        } else if (this.selection.selectionType === SelectionType.Multi) {\n          this.selectedChanged.emit(s);\n        }\n      }), // Reinitialize arrow key navigation on page changes\n      this.page.change.subscribe(() => {\n        this.keyNavigation.resetKeyGrid();\n\n        if (!this.clrDgDisablePageFocus) {\n          this.datagridTable.nativeElement.focus();\n        }\n      }), // Reinitialize arrow key navigation on hide/unhide columns\n      combineLatest(this.columnsService.columns).subscribe(() => {\n        var _a;\n\n        return (_a = this.keyNavigation) === null || _a === void 0 ? void 0 : _a.resetKeyGrid();\n      }), // A subscription that listens for displayMode changes on the datagrid\n      this.displayMode.view.subscribe(viewChange => {\n        // Remove any projected columns from the projectedDisplayColumns container\n        for (let i = this._projectedDisplayColumns.length; i > 0; i--) {\n          this._projectedDisplayColumns.detach();\n        } // Remove any projected columns from the projectedCalculationColumns container\n\n\n        for (let i = this._projectedCalculationColumns.length; i > 0; i--) {\n          this._projectedCalculationColumns.detach();\n        } // Remove any projected rows from the calculationRows container\n\n\n        for (let i = this._calculationRows.length; i > 0; i--) {\n          this._calculationRows.detach();\n        } // Remove any projected rows from the displayedRows container\n\n\n        for (let i = this._displayedRows.length; i > 0; i--) {\n          this._displayedRows.detach();\n        }\n\n        if (viewChange === DatagridDisplayMode.DISPLAY) {\n          // Set state, style for the datagrid to DISPLAY and insert row & columns into containers\n          this.renderer.removeClass(this.el.nativeElement, 'datagrid-calculate-mode');\n          this.columns.forEach(column => {\n            this._projectedDisplayColumns.insert(column._view);\n          });\n          this.rows.forEach(row => {\n            this._displayedRows.insert(row._view);\n          });\n        } else {\n          // Set state, style for the datagrid to CALCULATE and insert row & columns into containers\n          this.renderer.addClass(this.el.nativeElement, 'datagrid-calculate-mode');\n          this.columns.forEach(column => {\n            this._projectedCalculationColumns.insert(column._view);\n          });\n          this.rows.forEach(row => {\n            this._calculationRows.insert(row._view);\n          });\n        }\n      })); // We need to preserve shift state, so it can be used on selection change, regardless of the input event\n      // that triggered the change. This helps us to easily resolve the k/b only case together with the mouse selection case.\n\n\n      this.zone.runOutsideAngular(() => {\n        this._subscriptions.push(fromEvent(this.document.body, 'keydown').subscribe(event => {\n          if (event.key === 'Shift') {\n            this.selection.shiftPressed = true;\n          }\n        }), fromEvent(this.document.body, 'keyup').subscribe(event => {\n          if (event.key === 'Shift') {\n            this.selection.shiftPressed = false;\n          }\n        }));\n      });\n    }\n\n    ngOnDestroy() {\n      this._subscriptions.forEach(sub => sub.unsubscribe());\n    }\n\n    resize() {\n      this.organizer.resize();\n    }\n\n  }\n\n  ClrDatagrid.ɵfac = function ClrDatagrid_Factory(t) {\n    return new (t || ClrDatagrid)(ɵngcc0.ɵɵdirectiveInject(DatagridRenderOrganizer), ɵngcc0.ɵɵdirectiveInject(Items), ɵngcc0.ɵɵdirectiveInject(ExpandableRowsCount), ɵngcc0.ɵɵdirectiveInject(Selection), ɵngcc0.ɵɵdirectiveInject(RowActionService), ɵngcc0.ɵɵdirectiveInject(StateProvider), ɵngcc0.ɵɵdirectiveInject(DisplayModeService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(DetailService), ɵngcc0.ɵɵdirectiveInject(UNIQUE_ID), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(Page), ɵngcc0.ɵɵdirectiveInject(ClrCommonStringsService), ɵngcc0.ɵɵdirectiveInject(ColumnsService), ɵngcc0.ɵɵdirectiveInject(KeyNavigationGridController), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  ClrDatagrid.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ClrDatagrid,\n    selectors: [[\"clr-datagrid\"]],\n    contentQueries: function ClrDatagrid_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, ClrDatagridItems, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, ClrDatagridPlaceholder, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, ClrDatagridColumn, 4);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, ClrDatagridRow, 4);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.iterator = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.placeholder = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.columns = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.rows = _t);\n      }\n    },\n    viewQuery: function ClrDatagrid_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c56, 5, ViewContainerRef);\n        ɵngcc0.ɵɵviewQuery(_c57, 5, ElementRef);\n        ɵngcc0.ɵɵviewQuery(_c58, 5, ViewContainerRef);\n        ɵngcc0.ɵɵviewQuery(_c59, 5, ViewContainerRef);\n        ɵngcc0.ɵɵviewQuery(_c60, 5, ViewContainerRef);\n        ɵngcc0.ɵɵviewQuery(_c61, 5, ViewContainerRef);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.scrollableColumns = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.datagridTable = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._projectedDisplayColumns = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._projectedCalculationColumns = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._displayedRows = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._calculationRows = _t.first);\n      }\n    },\n    hostVars: 4,\n    hostBindings: function ClrDatagrid_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"datagrid-host\", true)(\"datagrid-detail-open\", ctx.detailService.isOpen);\n      }\n    },\n    inputs: {\n      clrDgSingleSelectionAriaLabel: \"clrDgSingleSelectionAriaLabel\",\n      clrDgSingleActionableAriaLabel: \"clrDgSingleActionableAriaLabel\",\n      clrDetailExpandableAriaLabel: \"clrDetailExpandableAriaLabel\",\n      clrDgDisablePageFocus: \"clrDgDisablePageFocus\",\n      loading: [\"clrDgLoading\", \"loading\"],\n      selected: [\"clrDgSelected\", \"selected\"],\n      singleSelected: [\"clrDgSingleSelected\", \"singleSelected\"],\n      clrDgPreserveSelection: \"clrDgPreserveSelection\",\n      rowSelectionMode: [\"clrDgRowSelection\", \"rowSelectionMode\"]\n    },\n    outputs: {\n      refresh: \"clrDgRefresh\",\n      selectedChanged: \"clrDgSelectedChange\",\n      singleSelectedChanged: \"clrDgSingleSelectedChange\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([Selection, Sort, FiltersProvider, Page, Items, DatagridRenderOrganizer, RowActionService, ExpandableRowsCount, StateDebouncer, DetailService, UNIQUE_ID_PROVIDER, StateProvider, TableSizeService, ColumnsService, DisplayModeService, KeyNavigationGridController])],\n    ngContentSelectors: _c63,\n    decls: 32,\n    vars: 7,\n    consts: [[1, \"datagrid-outer-wrapper\"], [1, \"datagrid-inner-wrapper\"], [1, \"datagrid\"], [\"datagrid\", \"\"], [1, \"datagrid-table-wrapper\"], [\"role\", \"grid\", \"tabindex\", \"-1\", 1, \"datagrid-table\"], [\"datagridTable\", \"\"], [\"role\", \"rowgroup\", 1, \"datagrid-header\"], [\"role\", \"row\", 1, \"datagrid-row\"], [1, \"datagrid-row-master\", \"datagrid-row-flex\"], [1, \"datagrid-row-sticky\"], [\"role\", \"columnheader\", \"class\", \"datagrid-column datagrid-select datagrid-fixed-column\", 3, \"keydown.space\", 4, \"ngIf\"], [\"role\", \"columnheader\", \"class\", \"datagrid-column datagrid-select datagrid-fixed-column\", 4, \"ngIf\"], [\"role\", \"columnheader\", \"class\", \"datagrid-column datagrid-row-actions datagrid-fixed-column\", 4, \"ngIf\"], [\"role\", \"columnheader\", \"class\", \"datagrid-column datagrid-expandable-caret datagrid-fixed-column\", 4, \"ngIf\"], [1, \"datagrid-row-scrollable\"], [\"projectedDisplayColumns\", \"\"], [\"displayedRows\", \"\"], [4, \"ngIf\"], [\"class\", \"datagrid-spinner\", 4, \"ngIf\"], [1, \"datagrid-calculation-table\"], [1, \"datagrid-calculation-header\"], [\"projectedCalculationColumns\", \"\"], [\"calculationRows\", \"\"], [\"role\", \"columnheader\", 1, \"datagrid-column\", \"datagrid-select\", \"datagrid-fixed-column\", 3, \"keydown.space\"], [1, \"clr-checkbox-wrapper\"], [\"type\", \"checkbox\", \"tabindex\", \"-1\", 3, \"id\", \"ngModel\", \"ngModelChange\"], [1, \"clr-control-label\", \"clr-col-null\", 3, \"for\"], [1, \"clr-sr-only\"], [1, \"datagrid-column-separator\"], [\"role\", \"columnheader\", 1, \"datagrid-column\", \"datagrid-select\", \"datagrid-fixed-column\"], [\"role\", \"columnheader\", 1, \"datagrid-column\", \"datagrid-row-actions\", \"datagrid-fixed-column\"], [\"role\", \"columnheader\", 1, \"datagrid-column\", \"datagrid-expandable-caret\", \"datagrid-fixed-column\"], [1, \"datagrid-spinner\"], [\"clrMedium\", \"\"]],\n    template: function ClrDatagrid_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c62);\n        ɵngcc0.ɵɵprojection(0);\n        ɵngcc0.ɵɵelementStart(1, \"div\", 0);\n        ɵngcc0.ɵɵelementStart(2, \"div\", 1);\n        ɵngcc0.ɵɵelementStart(3, \"div\", 2, 3);\n        ɵngcc0.ɵɵelementStart(5, \"div\", 4);\n        ɵngcc0.ɵɵelementStart(6, \"div\", 5, 6);\n        ɵngcc0.ɵɵelementStart(8, \"div\", 7);\n        ɵngcc0.ɵɵelementStart(9, \"div\", 8);\n        ɵngcc0.ɵɵelementStart(10, \"div\", 9);\n        ɵngcc0.ɵɵelementStart(11, \"div\", 10);\n        ɵngcc0.ɵɵtemplate(12, ClrDatagrid_div_12_Template, 7, 5, \"div\", 11);\n        ɵngcc0.ɵɵtemplate(13, ClrDatagrid_div_13_Template, 2, 1, \"div\", 12);\n        ɵngcc0.ɵɵtemplate(14, ClrDatagrid_div_14_Template, 2, 1, \"div\", 13);\n        ɵngcc0.ɵɵtemplate(15, ClrDatagrid_div_15_Template, 2, 1, \"div\", 14);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(16, \"div\", 15);\n        ɵngcc0.ɵɵelementContainer(17, null, 16);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementContainer(19, null, 17);\n        ɵngcc0.ɵɵprojection(21, 1);\n        ɵngcc0.ɵɵtemplate(22, ClrDatagrid_clr_dg_placeholder_22_Template, 1, 0, \"clr-dg-placeholder\", 18);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵprojection(23, 2);\n        ɵngcc0.ɵɵtemplate(24, ClrDatagrid_div_24_Template, 3, 0, \"div\", 19);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵprojection(25, 3);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(26, \"div\", 20);\n        ɵngcc0.ɵɵelementStart(27, \"div\", 21);\n        ɵngcc0.ɵɵelementContainer(28, null, 22);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementContainer(30, null, 23);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵattribute(\"aria-hidden\", ctx.detailService.isOpen ? true : null);\n        ɵngcc0.ɵɵadvance(9);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.selection.selectionType === ctx.SELECTION_TYPE.Multi);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.selection.selectionType === ctx.SELECTION_TYPE.Single);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.rowActionService.hasActionableRow);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.expandableRows.hasExpandableRow || ctx.detailService.enabled);\n        ɵngcc0.ɵɵadvance(7);\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.placeholder);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.loading);\n      }\n    },\n    directives: [ɵngcc1.NgIf, ɵngcc2.CheckboxControlValueAccessor, ɵngcc2.NgControlStatus, ɵngcc2.NgModel, ClrLabel, ClrDatagridPlaceholder, ClrSpinner],\n    encapsulation: 2\n  });\n  return ClrDatagrid;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrDatagridActionBar = /*#__PURE__*/(() => {\n  class ClrDatagridActionBar {}\n\n  ClrDatagridActionBar.ɵfac = function ClrDatagridActionBar_Factory(t) {\n    return new (t || ClrDatagridActionBar)();\n  };\n\n  ClrDatagridActionBar.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ClrDatagridActionBar,\n    selectors: [[\"clr-dg-action-bar\"]],\n    hostVars: 2,\n    hostBindings: function ClrDatagridActionBar_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"datagrid-action-bar\", true);\n      }\n    },\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function ClrDatagridActionBar_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2\n  });\n  return ClrDatagridActionBar;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet clrDgActionId = 0;\nlet ClrDatagridActionOverflow = /*#__PURE__*/(() => {\n  class ClrDatagridActionOverflow {\n    constructor(rowActionService, commonStrings, platformId, zone, smartToggleService, popoverId) {\n      this.rowActionService = rowActionService;\n      this.commonStrings = commonStrings;\n      this.platformId = platformId;\n      this.zone = zone;\n      this.smartToggleService = smartToggleService;\n      this.popoverId = popoverId;\n      this.subscriptions = [];\n      this.smartPosition = {\n        axis: ClrAxis.HORIZONTAL,\n        side: ClrSide.AFTER,\n        anchor: ClrAlignment.CENTER,\n        content: ClrAlignment.CENTER\n      };\n      this._open = false;\n      this.openChange = new EventEmitter(false);\n      this.rowActionService.register();\n      this.subscriptions.push(this.smartToggleService.openChange.subscribe(openState => {\n        this.open = openState;\n\n        if (openState) {\n          this.focusFirstButton();\n        }\n      }));\n      this.popoverId = 'clr-action-menu' + clrDgActionId++;\n    }\n\n    ngOnDestroy() {\n      this.rowActionService.unregister();\n      this.subscriptions.forEach(sub => sub.unsubscribe());\n    }\n\n    closeOverflowContent(event) {\n      this.smartToggleService.toggleWithEvent(event);\n    }\n\n    focusFirstButton() {\n      if (isPlatformBrowser(this.platformId)) {\n        this.zone.runOutsideAngular(() => {\n          setTimeout(() => {\n            const firstButton = document.querySelector('button.action-item');\n\n            if (firstButton) {\n              firstButton.focus();\n            }\n          });\n        });\n      }\n    }\n\n    get open() {\n      return this._open;\n    }\n\n    set open(open) {\n      const openState = !!open;\n\n      if (!!openState !== this.open) {\n        // prevents chocolate mess\n        this.smartToggleService.open = openState;\n        this.openChange.emit(openState);\n        this._open = openState;\n      }\n    }\n\n  }\n\n  ClrDatagridActionOverflow.ɵfac = function ClrDatagridActionOverflow_Factory(t) {\n    return new (t || ClrDatagridActionOverflow)(ɵngcc0.ɵɵdirectiveInject(RowActionService), ɵngcc0.ɵɵdirectiveInject(ClrCommonStringsService), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ClrPopoverToggleService), ɵngcc0.ɵɵdirectiveInject(UNIQUE_ID));\n  };\n\n  ClrDatagridActionOverflow.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ClrDatagridActionOverflow,\n    selectors: [[\"clr-dg-action-overflow\"]],\n    inputs: {\n      open: [\"clrDgActionOverflowOpen\", \"open\"]\n    },\n    outputs: {\n      openChange: \"clrDgActionOverflowOpenChange\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([UNIQUE_ID_PROVIDER, ClrPopoverToggleService, ClrPopoverEventsService, ClrPopoverPositionService])],\n    ngContentSelectors: _c0,\n    decls: 4,\n    vars: 8,\n    consts: [[\"type\", \"button\", \"role\", \"button\", \"aria-haspopup\", \"true\", \"clrPopoverAnchor\", \"\", \"clrPopoverOpenCloseButton\", \"\", 1, \"datagrid-action-toggle\"], [\"anchor\", \"\"], [\"shape\", \"ellipsis-vertical\"], [\"class\", \"datagrid-action-overflow\", \"role\", \"menu\", \"clrFocusTrap\", \"\", 3, \"id\", \"click\", 4, \"clrPopoverContent\", \"clrPopoverContentAt\", \"clrPopoverContentOutsideClickToClose\", \"clrPopoverContentScrollToClose\"], [\"role\", \"menu\", \"clrFocusTrap\", \"\", 1, \"datagrid-action-overflow\", 3, \"id\", \"click\"]],\n    template: function ClrDatagridActionOverflow_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"button\", 0, 1);\n        ɵngcc0.ɵɵelement(2, \"cds-icon\", 2);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(3, ClrDatagridActionOverflow_div_3_Template, 2, 3, \"div\", 3);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-controls\", ctx.popoverId)(\"aria-expanded\", ctx.open)(\"aria-label\", ctx.commonStrings.keys.rowActions);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵattribute(\"title\", ctx.commonStrings.keys.rowActions);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"clrPopoverContent\", ctx.open)(\"clrPopoverContentAt\", ctx.smartPosition)(\"clrPopoverContentOutsideClickToClose\", true)(\"clrPopoverContentScrollToClose\", true);\n      }\n    },\n    directives: [ClrPopoverAnchor, ClrPopoverOpenCloseButton, CdsIconCustomTag, ClrPopoverContent, FocusTrapDirective],\n    encapsulation: 2\n  });\n  return ClrDatagridActionOverflow;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nconst MIN_COLUMN_WIDTH = 96; // This service allows DatagridHeaderRenderer and ClrDatagridColumnSeparator\n// to share column resize data with each other.\n\nlet ColumnResizerService = /*#__PURE__*/(() => {\n  class ColumnResizerService {\n    constructor(el, domAdapter, organizer) {\n      this.el = el;\n      this.domAdapter = domAdapter;\n      this.organizer = organizer;\n      this._resizedBy = 0;\n    }\n\n    get resizedBy() {\n      return this._resizedBy;\n    }\n\n    get minColumnWidth() {\n      return this.domAdapter.minWidth(this.el.nativeElement) || MIN_COLUMN_WIDTH;\n    }\n\n    get maxResizeRange() {\n      return this.widthBeforeResize - this.minColumnWidth;\n    }\n\n    startResize() {\n      this._resizedBy = 0;\n      this.isWithinMaxResizeRange = true;\n      this.widthBeforeResize = this.domAdapter.clientRect(this.el.nativeElement).width;\n    }\n\n    endResize() {\n      this.organizer.resize();\n    }\n\n    get widthAfterResize() {\n      return this.widthBeforeResize + this._resizedBy;\n    }\n\n    calculateResize(resizedBy) {\n      // calculates the resize amount within the allowed range\n      if (resizedBy < -this.maxResizeRange) {\n        this._resizedBy = -this.maxResizeRange;\n        this.isWithinMaxResizeRange = false;\n      } else {\n        this._resizedBy = resizedBy;\n        this.isWithinMaxResizeRange = true;\n      }\n    }\n\n  }\n\n  ColumnResizerService.ɵfac = function ColumnResizerService_Factory(t) {\n    return new (t || ColumnResizerService)(ɵngcc0.ɵɵinject(ɵngcc0.ElementRef), ɵngcc0.ɵɵinject(DomAdapter), ɵngcc0.ɵɵinject(DatagridRenderOrganizer));\n  };\n\n  ColumnResizerService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: ColumnResizerService,\n    factory: ColumnResizerService.ɵfac\n  });\n  return ColumnResizerService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n// Default resize length on each keyboard move event\n\n\nconst KEYBOARD_RESIZE_LENGTH = 12;\nlet ClrDatagridColumnSeparator = /*#__PURE__*/(() => {\n  class ClrDatagridColumnSeparator {\n    // Every column draggable separator should have its own unique ID\n    // in order to not conflict with other draggables/droppables.\n    constructor(columnResizerService, renderer, ngZone, tableSizeService, commonString, document, columnSeparatorId) {\n      this.columnResizerService = columnResizerService;\n      this.renderer = renderer;\n      this.ngZone = ngZone;\n      this.tableSizeService = tableSizeService;\n      this.commonString = commonString;\n      this.document = document;\n      this.columnSeparatorId = columnSeparatorId;\n      this.resizeStartedOnKeyDown = false;\n      this.unlisteners = [];\n    }\n\n    get resizeTrackerEl() {\n      return this.resizeTrackerRef.nativeElement;\n    }\n\n    get columnHandleEl() {\n      return this.columnHandleRef.nativeElement;\n    }\n\n    ngAfterViewInit() {\n      this.ngZone.runOutsideAngular(() => {\n        this.unlisteners.push(this.renderer.listen(this.columnHandleEl, 'keydown', event => {\n          this.showTrackerOnFirstKeyDown(event);\n          this.moveTrackerOnKeyDown(event);\n        }));\n        this.unlisteners.push(this.renderer.listen(this.columnHandleEl, 'keyup', event => {\n          this.hideTrackerOnKeyUp(event);\n        }));\n      });\n    }\n\n    get descriptionId() {\n      return `${this.columnSeparatorId}-aria-describedby`;\n    }\n\n    showTracker() {\n      this.columnResizerService.startResize();\n      const tableHeight = this.tableSizeService.getColumnDragHeight();\n      this.renderer.setStyle(this.resizeTrackerEl, 'height', tableHeight);\n      this.renderer.setStyle(this.resizeTrackerEl, 'display', 'block');\n    }\n\n    moveTracker(movedBy) {\n      this.columnResizerService.calculateResize(movedBy);\n      this.renderer.setStyle(this.resizeTrackerEl, 'transform', `translateX(${this.columnResizerService.resizedBy}px)`);\n      this.renderer.setStyle(this.document.body, 'cursor', 'col-resize');\n      this.redFlagTracker();\n    }\n\n    hideTracker() {\n      this.columnResizerService.endResize();\n      this.renderer.setStyle(this.resizeTrackerEl, 'display', 'none');\n      this.renderer.setStyle(this.resizeTrackerEl, 'transform', `translateX(0px)`);\n      this.renderer.setStyle(this.document.body, 'cursor', 'auto');\n    }\n\n    showTrackerOnFirstKeyDown(event) {\n      if (!this.resizeStartedOnKeyDown && (this.isArrowLeftKeyEvent(event) || this.isArrowRightKeyEvent(event))) {\n        this.resizeStartedOnKeyDown = true;\n        this.renderer.addClass(this.resizeTrackerEl, 'on-arrow-key-resize');\n        this.showTracker();\n      }\n    }\n\n    moveTrackerOnKeyDown(event) {\n      if (this.isArrowLeftKeyEvent(event)) {\n        this.moveTracker(this.columnResizerService.resizedBy - KEYBOARD_RESIZE_LENGTH);\n      } else if (this.isArrowRightKeyEvent(event)) {\n        this.moveTracker(this.columnResizerService.resizedBy + KEYBOARD_RESIZE_LENGTH);\n      }\n    }\n\n    hideTrackerOnKeyUp(event) {\n      if (this.resizeStartedOnKeyDown && (this.isArrowLeftKeyEvent(event) || this.isArrowRightKeyEvent(event))) {\n        this.resizeStartedOnKeyDown = false;\n        this.renderer.removeClass(this.resizeTrackerEl, 'on-arrow-key-resize');\n        this.hideTracker();\n        this.columnHandleEl.focus();\n      }\n    }\n\n    redFlagTracker() {\n      if (this.isWithinMaxResizeRange !== this.columnResizerService.isWithinMaxResizeRange) {\n        this.isWithinMaxResizeRange = this.columnResizerService.isWithinMaxResizeRange;\n\n        if (!this.isWithinMaxResizeRange) {\n          this.renderer.addClass(this.resizeTrackerEl, 'exceeded-max');\n        } else {\n          this.renderer.removeClass(this.resizeTrackerEl, 'exceeded-max');\n        }\n      }\n    }\n\n    isArrowLeftKeyEvent(event) {\n      return event.key === KeyCodes.ArrowLeft || event.key === IEKeyCodes.ArrowLeft;\n    }\n\n    isArrowRightKeyEvent(event) {\n      return event.key === KeyCodes.ArrowRight || event.key === IEKeyCodes.ArrowRight;\n    }\n\n    ngOnDestroy() {\n      this.unlisteners.forEach(unlistener => unlistener());\n    }\n\n  }\n\n  ClrDatagridColumnSeparator.ɵfac = function ClrDatagridColumnSeparator_Factory(t) {\n    return new (t || ClrDatagridColumnSeparator)(ɵngcc0.ɵɵdirectiveInject(ColumnResizerService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(TableSizeService), ɵngcc0.ɵɵdirectiveInject(ClrCommonStringsService), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(UNIQUE_ID));\n  };\n\n  ClrDatagridColumnSeparator.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ClrDatagridColumnSeparator,\n    selectors: [[\"clr-dg-column-separator\"]],\n    viewQuery: function ClrDatagridColumnSeparator_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c64, 5);\n        ɵngcc0.ɵɵviewQuery(_c65, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.resizeTrackerRef = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.columnHandleRef = _t.first);\n      }\n    },\n    hostVars: 2,\n    hostBindings: function ClrDatagridColumnSeparator_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"datagrid-column-separator\", true);\n      }\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([UNIQUE_ID_PROVIDER])],\n    decls: 6,\n    vars: 5,\n    consts: [[\"type\", \"button\", \"clrDraggable\", \"\", 1, \"datagrid-column-handle\", 3, \"clrGroup\", \"clrDragStart\", \"clrDragMove\", \"clrDragEnd\"], [\"columnHandle\", \"\"], [1, \"clr-sr-only\"], [1, \"datagrid-column-resize-tracker\"], [\"resizeTracker\", \"\"]],\n    template: function ClrDatagridColumnSeparator_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"button\", 0, 1);\n        ɵngcc0.ɵɵlistener(\"clrDragStart\", function ClrDatagridColumnSeparator_Template_button_clrDragStart_0_listener() {\n          return ctx.showTracker();\n        })(\"clrDragMove\", function ClrDatagridColumnSeparator_Template_button_clrDragMove_0_listener($event) {\n          return ctx.moveTracker($event.dragPosition.moveX);\n        })(\"clrDragEnd\", function ClrDatagridColumnSeparator_Template_button_clrDragEnd_0_listener() {\n          return ctx.hideTracker();\n        });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(2, \"span\", 2);\n        ɵngcc0.ɵɵtext(3);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelement(4, \"div\", 3, 4);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"clrGroup\", ctx.columnSeparatorId);\n        ɵngcc0.ɵɵattribute(\"aria-label\", ctx.commonString.keys.columnSeparatorAriaLabel)(\"aria-describedby\", ctx.descriptionId);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵattribute(\"id\", ctx.descriptionId);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵtextInterpolate1(\" \", ctx.commonString.keys.columnSeparatorDescription, \" \");\n      }\n    },\n    directives: [ClrDraggable],\n    encapsulation: 2\n  });\n  return ClrDatagridColumnSeparator;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/** @deprecated since 2.0, remove in 3.0 */\n\n\nlet ClrDatagridColumnToggleButton = /*#__PURE__*/(() => {\n  class ClrDatagridColumnToggleButton {\n    constructor(columnsService) {\n      this.columnsService = columnsService;\n      this.allSelected = new EventEmitter();\n    }\n\n    get clrAllSelected() {\n      return this.allSelected.asObservable();\n    }\n\n    hideableColumns() {\n      return this.columnsService.columns.filter(column => column.value.hideable);\n    }\n\n    get allHideablesVisible() {\n      return this.hideableColumns().filter(column => column.value.hidden).length === 0;\n    }\n\n    selectAll() {\n      this.hideableColumns().forEach(hideableColumn => this.columnsService.emitStateChange(hideableColumn, {\n        hidden: false,\n        changes: [DatagridColumnChanges.HIDDEN]\n      }));\n      this.allSelected.next(true);\n    }\n\n  }\n\n  ClrDatagridColumnToggleButton.ɵfac = function ClrDatagridColumnToggleButton_Factory(t) {\n    return new (t || ClrDatagridColumnToggleButton)(ɵngcc0.ɵɵdirectiveInject(ColumnsService));\n  };\n\n  ClrDatagridColumnToggleButton.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ClrDatagridColumnToggleButton,\n    selectors: [[\"clr-dg-column-toggle-button\"]],\n    outputs: {\n      clrAllSelected: \"clrAllSelected\"\n    },\n    ngContentSelectors: _c0,\n    decls: 2,\n    vars: 1,\n    consts: [[\"type\", \"button\", 1, \"btn\", \"btn-sm\", \"btn-link\", \"switch-button\", 3, \"disabled\", \"click\"]],\n    template: function ClrDatagridColumnToggleButton_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"button\", 0);\n        ɵngcc0.ɵɵlistener(\"click\", function ClrDatagridColumnToggleButton_Template_button_click_0_listener() {\n          return ctx.selectAll();\n        });\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"disabled\", ctx.allHideablesVisible);\n      }\n    },\n    encapsulation: 2\n  });\n  return ClrDatagridColumnToggleButton;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/** @deprecated since 2.0, remove in 3.0 */\n\n\nlet ClrDatagridColumnToggleTitle = /*#__PURE__*/(() => {\n  class ClrDatagridColumnToggleTitle {}\n\n  ClrDatagridColumnToggleTitle.ɵfac = function ClrDatagridColumnToggleTitle_Factory(t) {\n    return new (t || ClrDatagridColumnToggleTitle)();\n  };\n\n  ClrDatagridColumnToggleTitle.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ClrDatagridColumnToggleTitle,\n    selectors: [[\"clr-dg-column-toggle-title\"]],\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function ClrDatagridColumnToggleTitle_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2\n  });\n  return ClrDatagridColumnToggleTitle;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/** @deprecated since 2.0, remove in 3.0 */\n\n\nlet ClrDatagridColumnToggle = /*#__PURE__*/(() => {\n  class ClrDatagridColumnToggle {\n    constructor(commonStrings, columnsService, columnSwitchId, platformId, zone, popoverId) {\n      this.commonStrings = commonStrings;\n      this.columnsService = columnsService;\n      this.columnSwitchId = columnSwitchId;\n      this.platformId = platformId;\n      this.zone = zone;\n      this.popoverId = popoverId; // Smart Popover\n\n      this.smartPosition = {\n        axis: ClrAxis.VERTICAL,\n        side: ClrSide.BEFORE,\n        anchor: ClrAlignment.START,\n        content: ClrAlignment.START\n      };\n    }\n\n    get allColumnsVisible() {\n      return this._allColumnsVisible;\n    }\n\n    set allColumnsVisible(value) {\n      this._allColumnsVisible = value;\n    }\n\n    get hideableColumnStates() {\n      const hideables = this.columnsService.columns.filter(column => column.value.hideable);\n      return hideables.map(column => column.value);\n    }\n\n    get hasOnlyOneVisibleColumn() {\n      const nbNonHideableColumns = this.columnsService.columns.length - this.hideableColumnStates.length; // this should only return true when there is no non-hideable columns.\n\n      return nbNonHideableColumns === 0 && this.hideableColumnStates.filter(columnState => !columnState.hidden).length === 1;\n    }\n\n    toggleColumnState(columnState, event) {\n      const columnToToggle = this.columnsService.columns.filter(column => column.value === columnState)[0];\n      this.columnsService.emitStateChange(columnToToggle, {\n        hidden: event,\n        changes: [DatagridColumnChanges.HIDDEN]\n      });\n    }\n\n    toggleSwitchPanel() {\n      this.openState = !this.openState;\n    }\n\n    allColumnsSelected() {\n      this.allSelectedElement.nativeElement.focus();\n    } // Without tracking the checkboxes get rerendered on model update, which leads\n    // to loss of focus after checkbox toggle.\n\n\n    trackByFn(index) {\n      return index;\n    }\n\n  }\n\n  ClrDatagridColumnToggle.ɵfac = function ClrDatagridColumnToggle_Factory(t) {\n    return new (t || ClrDatagridColumnToggle)(ɵngcc0.ɵɵdirectiveInject(ClrCommonStringsService), ɵngcc0.ɵɵdirectiveInject(ColumnsService), ɵngcc0.ɵɵdirectiveInject(UNIQUE_ID), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(UNIQUE_ID));\n  };\n\n  ClrDatagridColumnToggle.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ClrDatagridColumnToggle,\n    selectors: [[\"clr-dg-column-toggle\"]],\n    contentQueries: function ClrDatagridColumnToggle_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, ClrDatagridColumnToggleTitle, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, ClrDatagridColumnToggleButton, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.customToggleTitle = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.customToggleButton = _t.first);\n      }\n    },\n    viewQuery: function ClrDatagridColumnToggle_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c66, 5, ElementRef);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.allSelectedElement = _t.first);\n      }\n    },\n    hostVars: 4,\n    hostBindings: function ClrDatagridColumnToggle_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"column-switch-wrapper\", true)(\"active\", ctx.openState);\n      }\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([UNIQUE_ID_PROVIDER, ClrPopoverEventsService, ClrPopoverPositionService, ClrPopoverToggleService])],\n    ngContentSelectors: _c68,\n    decls: 3,\n    vars: 8,\n    consts: [[\"role\", \"button\", \"type\", \"button\", \"clrPopoverAnchor\", \"\", \"clrPopoverOpenCloseButton\", \"\", 1, \"btn\", \"btn-sm\", \"btn-link\", \"column-toggle--action\"], [\"shape\", \"view-columns\", \"aria-hidden\", \"true\"], [\"class\", \"column-switch\", \"role\", \"dialog\", \"clrFocusTrap\", \"\", 3, \"id\", 4, \"clrPopoverContent\", \"clrPopoverContentAt\", \"clrPopoverContentOutsideClickToClose\", \"clrPopoverContentScrollToClose\"], [\"role\", \"dialog\", \"clrFocusTrap\", \"\", 1, \"column-switch\", 3, \"id\"], [1, \"switch-header\"], [\"tabindex\", \"-1\", 1, \"clr-sr-only\"], [\"allSelected\", \"\"], [4, \"ngIf\"], [\"clrPopoverCloseButton\", \"\", \"type\", \"button\", 1, \"btn\", \"btn-sm\", \"btn-link\", \"toggle-switch-close-button\"], [\"shape\", \"window-close\", \"aria-hidden\", \"true\"], [1, \"switch-content\", \"list-unstyled\"], [4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [1, \"switch-footer\"], [3, \"clrAllSelected\", 4, \"ngIf\"], [\"clrCheckbox\", \"\", \"type\", \"checkbox\", 3, \"disabled\", \"ngModel\", \"ngModelChange\"], [3, \"ngTemplateOutlet\"], [3, \"clrAllSelected\"]],\n    template: function ClrDatagridColumnToggle_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c67);\n        ɵngcc0.ɵɵelementStart(0, \"button\", 0);\n        ɵngcc0.ɵɵelement(1, \"cds-icon\", 1);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(2, ClrDatagridColumnToggle_div_2_Template, 14, 10, \"div\", 2);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-controls\", ctx.popoverId)(\"aria-owns\", ctx.popoverId)(\"title\", ctx.commonStrings.keys.pickColumns);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵattribute(\"title\", ctx.commonStrings.keys.pickColumns);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"clrPopoverContent\", ctx.openState)(\"clrPopoverContentAt\", ctx.smartPosition)(\"clrPopoverContentOutsideClickToClose\", true)(\"clrPopoverContentScrollToClose\", true);\n      }\n    },\n    directives: function () {\n      return [ClrPopoverAnchor, ClrPopoverOpenCloseButton, CdsIconCustomTag, ClrPopoverContent, FocusTrapDirective, ɵngcc1.NgIf, ClrPopoverCloseButton, ɵngcc1.NgForOf, ClrDatagridItemsTrackBy, ClrCheckboxWrapper, ɵngcc2.CheckboxControlValueAccessor, ClrCheckbox, ɵngcc2.NgControlStatus, ɵngcc2.NgModel, ClrLabel, ɵngcc1.NgTemplateOutlet, ClrDatagridColumnToggleButton];\n    },\n    encapsulation: 2\n  });\n  return ClrDatagridColumnToggle;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrDatagridDetailHeader = /*#__PURE__*/(() => {\n  class ClrDatagridDetailHeader {\n    constructor(detailService, commonStrings) {\n      this.detailService = detailService;\n      this.commonStrings = commonStrings;\n    }\n\n    get titleId() {\n      return `${this.detailService.id}-title`;\n    }\n\n  }\n\n  ClrDatagridDetailHeader.ɵfac = function ClrDatagridDetailHeader_Factory(t) {\n    return new (t || ClrDatagridDetailHeader)(ɵngcc0.ɵɵdirectiveInject(DetailService), ɵngcc0.ɵɵdirectiveInject(ClrCommonStringsService));\n  };\n\n  ClrDatagridDetailHeader.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ClrDatagridDetailHeader,\n    selectors: [[\"clr-dg-detail-header\"]],\n    hostVars: 2,\n    hostBindings: function ClrDatagridDetailHeader_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"datagrid-detail-header\", true);\n      }\n    },\n    ngContentSelectors: _c0,\n    decls: 5,\n    vars: 2,\n    consts: [[\"clrFocusOnViewInit\", \"\", 1, \"datagrid-detail-header-title\", 3, \"id\"], [1, \"datagrid-detail-pane-close\"], [\"type\", \"button\", 1, \"btn\", \"btn-link\", 3, \"click\"], [\"size\", \"24\", \"shape\", \"times\"]],\n    template: function ClrDatagridDetailHeader_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(2, \"div\", 1);\n        ɵngcc0.ɵɵelementStart(3, \"button\", 2);\n        ɵngcc0.ɵɵlistener(\"click\", function ClrDatagridDetailHeader_Template_button_click_3_listener() {\n          return ctx.detailService.close();\n        });\n        ɵngcc0.ɵɵelement(4, \"cds-icon\", 3);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"id\", ctx.titleId);\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵattribute(\"aria-label\", ctx.commonStrings.keys.close);\n      }\n    },\n    directives: [ClrFocusOnViewInit, CdsIconCustomTag],\n    encapsulation: 2\n  });\n  return ClrDatagridDetailHeader;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrDatagridDetail = /*#__PURE__*/(() => {\n  class ClrDatagridDetail {\n    constructor(detailService, commonStrings) {\n      this.detailService = detailService;\n      this.commonStrings = commonStrings;\n    }\n\n    closeCheck() {\n      this.detailService.close();\n    }\n\n  }\n\n  ClrDatagridDetail.ɵfac = function ClrDatagridDetail_Factory(t) {\n    return new (t || ClrDatagridDetail)(ɵngcc0.ɵɵdirectiveInject(DetailService), ɵngcc0.ɵɵdirectiveInject(ClrCommonStringsService));\n  };\n\n  ClrDatagridDetail.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ClrDatagridDetail,\n    selectors: [[\"clr-dg-detail\"]],\n    contentQueries: function ClrDatagridDetail_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, ClrDatagridDetailHeader, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.header = _t.first);\n      }\n    },\n    hostVars: 2,\n    hostBindings: function ClrDatagridDetail_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"keyup.esc\", function ClrDatagridDetail_keyup_esc_HostBindingHandler() {\n          return ctx.closeCheck();\n        }, false, ɵngcc0.ɵɵresolveDocument);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"datagrid-detail-pane\", true);\n      }\n    },\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 1,\n    consts: [[\"class\", \"datagrid-detail-pane-content\", \"role\", \"dialog\", \"aria-modal\", \"true\", 3, \"clrFocusTrap\", \"id\", 4, \"ngIf\"], [\"role\", \"dialog\", \"aria-modal\", \"true\", 1, \"datagrid-detail-pane-content\", 3, \"clrFocusTrap\", \"id\"], [1, \"clr-sr-only\"]],\n    template: function ClrDatagridDetail_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵtemplate(0, ClrDatagridDetail_div_0_Template, 6, 6, \"div\", 0);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.detailService.isOpen);\n      }\n    },\n    directives: [ɵngcc1.NgIf, FocusTrapDirective],\n    encapsulation: 2\n  });\n  return ClrDatagridDetail;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrDatagridDetailBody = /*#__PURE__*/(() => {\n  class ClrDatagridDetailBody {}\n\n  ClrDatagridDetailBody.ɵfac = function ClrDatagridDetailBody_Factory(t) {\n    return new (t || ClrDatagridDetailBody)();\n  };\n\n  ClrDatagridDetailBody.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ClrDatagridDetailBody,\n    selectors: [[\"clr-dg-detail-body\"]],\n    hostVars: 2,\n    hostBindings: function ClrDatagridDetailBody_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"datagrid-detail-body\", true);\n      }\n    },\n    ngContentSelectors: _c0,\n    decls: 2,\n    vars: 0,\n    consts: [[1, \"clr-dg-detail-body-wrapper\"]],\n    template: function ClrDatagridDetailBody_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵelementEnd();\n      }\n    },\n    encapsulation: 2\n  });\n  return ClrDatagridDetailBody;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/*\n * I don't think this deserves to be in IfExpanded itself,\n * so I'm adding a second directive on the same selector for now just for the datagrid\n */\n\n\nlet DatagridDetailRegisterer = /*#__PURE__*/(() => {\n  class DatagridDetailRegisterer {\n    constructor(expandableRowsCount) {\n      this.expandableRowsCount = expandableRowsCount;\n\n      if (this.expandableRowsCount) {\n        this.expandableRowsCount.register();\n      }\n    }\n\n    ngOnDestroy() {\n      if (this.expandableRowsCount) {\n        this.expandableRowsCount.unregister();\n      }\n    }\n\n  }\n\n  DatagridDetailRegisterer.ɵfac = function DatagridDetailRegisterer_Factory(t) {\n    return new (t || DatagridDetailRegisterer)(ɵngcc0.ɵɵdirectiveInject(ExpandableRowsCount, 8));\n  };\n\n  DatagridDetailRegisterer.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: DatagridDetailRegisterer,\n    selectors: [[\"\", \"clrIfExpanded\", \"\"]]\n  });\n  return DatagridDetailRegisterer;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrDatagridFooter = /*#__PURE__*/(() => {\n  class ClrDatagridFooter {\n    constructor(selection, detailService, columnsService) {\n      this.selection = selection;\n      this.detailService = detailService;\n      this.columnsService = columnsService;\n      /* reference to the enum so that template can access */\n\n      this.SELECTION_TYPE = SelectionType;\n    }\n\n    get hasHideableColumns() {\n      return this.columnsService.hasHideableColumns;\n    }\n\n  }\n\n  ClrDatagridFooter.ɵfac = function ClrDatagridFooter_Factory(t) {\n    return new (t || ClrDatagridFooter)(ɵngcc0.ɵɵdirectiveInject(Selection), ɵngcc0.ɵɵdirectiveInject(DetailService), ɵngcc0.ɵɵdirectiveInject(ColumnsService));\n  };\n\n  ClrDatagridFooter.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ClrDatagridFooter,\n    selectors: [[\"clr-dg-footer\"]],\n    contentQueries: function ClrDatagridFooter_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, ClrDatagridColumnToggle, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.toggle = _t.first);\n      }\n    },\n    hostVars: 2,\n    hostBindings: function ClrDatagridFooter_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"datagrid-footer\", true);\n      }\n    },\n    ngContentSelectors: _c71,\n    decls: 3,\n    vars: 2,\n    consts: [[4, \"ngIf\"], [1, \"clr-form-control-disabled\"], [1, \"datagrid-footer-select\"], [\"clrCheckbox\", \"\", \"type\", \"checkbox\", \"checked\", \"checked\", \"disabled\", \"\"], [1, \"datagrid-footer-description\"]],\n    template: function ClrDatagridFooter_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c70);\n        ɵngcc0.ɵɵtemplate(0, ClrDatagridFooter_ng_container_0_Template, 6, 1, \"ng-container\", 0);\n        ɵngcc0.ɵɵtemplate(1, ClrDatagridFooter_ng_container_1_Template, 5, 1, \"ng-container\", 0);\n        ɵngcc0.ɵɵprojection(2);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.selection.selectionType === ctx.SELECTION_TYPE.Multi && ctx.selection.current.length > 0);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.detailService.isOpen);\n      }\n    },\n    directives: [ɵngcc1.NgIf, ClrCheckboxWrapper, ClrCheckbox, ClrLabel, ClrDatagridColumnToggle],\n    encapsulation: 2\n  });\n  return ClrDatagridFooter;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nconst COLUMN_STATE = new InjectionToken('COLUMN_STATE');\n\nfunction columnStateFactory() {\n  return new BehaviorSubject({\n    changes: []\n  });\n}\n\nconst COLUMN_STATE_PROVIDER = {\n  provide: COLUMN_STATE,\n  useFactory: columnStateFactory\n};\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/**\n *\n * @description\n * A structural directive meant to be used inside a clr-dg-column component.\n *\n * <clr-dg-column>\n *       <ng-container *clrDgHideableColumn=\"{ hidden: true }\">\n *           User ID\n *       </ng-container>\n *   </clr-dg-column>\n *\n * It sets up state and properties so that columns can be manges for hide/show by a service and an internal\n * datagrid toggle component.\n *\n */\n\nlet ClrDatagridHideableColumn = /*#__PURE__*/(() => {\n  class ClrDatagridHideableColumn {\n    constructor(titleTemplateRef, viewContainerRef, columnsService, columnState) {\n      this.titleTemplateRef = titleTemplateRef;\n      this.viewContainerRef = viewContainerRef;\n      this.columnsService = columnsService;\n      this.columnState = columnState;\n      this.hiddenChange = new EventEmitter();\n      this.subscriptions = [];\n      this.viewContainerRef.createEmbeddedView(this.titleTemplateRef);\n\n      if (!this.columnState) {\n        throw new Error('The *clrDgHideableColumn directive can only be used inside of a clr-dg-column component.');\n      }\n    }\n    /**\n     *\n     * @description\n     * Setter fn for the @Input with the same name as this structural directive.\n     * It allows the user to pre-configure the column's hide/show state. { hidden: true }\n     * It's more verbose but has more Clarity.\n     *\n     * @example\n     * *clrDgHideableColumn\n     * *clrDgHideableColumn={hidden: false}\n     * *clrDgHideableColumn={hidden: true}\n     *\n     */\n\n\n    set clrDgHideableColumn(value) {\n      if (typeof value === 'string') {\n        this.clrDgHidden = false;\n        return;\n      }\n\n      this.clrDgHidden = value && value.hidden ? value.hidden : false;\n    }\n\n    set clrDgHidden(hidden) {\n      this._hidden = hidden ? hidden : false;\n      this.columnsService.emitStateChange(this.columnState, {\n        hidden: this._hidden,\n        changes: [DatagridColumnChanges.HIDDEN]\n      });\n    }\n\n    ngOnInit() {\n      this.columnsService.emitStateChange(this.columnState, {\n        hideable: true,\n        titleTemplateRef: this.titleTemplateRef,\n        hidden: this._hidden,\n        changes: [DatagridColumnChanges.HIDDEN]\n      });\n      this.subscriptions.push(this.columnState.subscribe(state => {\n        if (state.changes && state.changes.indexOf(DatagridColumnChanges.HIDDEN) > -1) {\n          this.hiddenChange.emit(state.hidden); // Can emit through @Output when desugared syntax is used\n        }\n      }));\n    }\n\n    ngOnDestroy() {\n      this.subscriptions.forEach(sub => sub.unsubscribe());\n    }\n\n  }\n\n  ClrDatagridHideableColumn.ɵfac = function ClrDatagridHideableColumn_Factory(t) {\n    return new (t || ClrDatagridHideableColumn)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ColumnsService), ɵngcc0.ɵɵdirectiveInject(COLUMN_STATE, 8));\n  };\n\n  ClrDatagridHideableColumn.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: ClrDatagridHideableColumn,\n    selectors: [[\"\", \"clrDgHideableColumn\", \"\"]],\n    inputs: {\n      clrDgHideableColumn: \"clrDgHideableColumn\",\n      clrDgHidden: \"clrDgHidden\"\n    },\n    outputs: {\n      hiddenChange: \"clrDgHiddenChange\"\n    }\n  });\n  return ClrDatagridHideableColumn;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrIfDetail = /*#__PURE__*/(() => {\n  class ClrIfDetail {\n    constructor(templateRef, viewContainer, detailService) {\n      this.templateRef = templateRef;\n      this.viewContainer = viewContainer;\n      this.detailService = detailService;\n      this.subscriptions = [];\n      this.skip = false; // This keeps us from resetting the input and calling the toggle twice\n\n      this.stateChange = new EventEmitter(null);\n      this.detailService.enabled = true;\n    }\n\n    set state(model) {\n      if (!this.skip) {\n        this.detailService.toggle(model);\n      }\n\n      this.skip = false;\n    }\n\n    ngOnInit() {\n      this.subscriptions.push(this.detailService.stateChange.subscribe(state => {\n        if (state === true) {\n          this.togglePanel(true);\n        } else {\n          this.togglePanel(false);\n        }\n      }));\n    }\n\n    togglePanel(showPanel) {\n      let stateChangeParams = null;\n      this.viewContainer.clear();\n\n      if (showPanel === true) {\n        this.viewContainer.createEmbeddedView(this.templateRef, {\n          $implicit: this.detailService.state\n        });\n        this.skip = true;\n        stateChangeParams = this.detailService.state;\n      }\n\n      this.stateChange.emit(stateChangeParams);\n    }\n\n    ngOnDestroy() {\n      this.subscriptions.forEach(sub => sub.unsubscribe());\n    }\n\n  }\n\n  ClrIfDetail.ɵfac = function ClrIfDetail_Factory(t) {\n    return new (t || ClrIfDetail)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(DetailService));\n  };\n\n  ClrIfDetail.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: ClrIfDetail,\n    selectors: [[\"\", \"clrIfDetail\", \"\"]],\n    inputs: {\n      state: [\"clrIfDetail\", \"state\"]\n    },\n    outputs: {\n      stateChange: \"clrIfDetailChange\"\n    }\n  });\n  return ClrIfDetail;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrDatagridItemsTrackBy = /*#__PURE__*/(() => {\n  class ClrDatagridItemsTrackBy {\n    constructor(_items) {\n      this._items = _items;\n    }\n\n    set trackBy(value) {\n      if (this._items) {\n        this._items.trackBy = value;\n      }\n    }\n\n  }\n\n  ClrDatagridItemsTrackBy.ɵfac = function ClrDatagridItemsTrackBy_Factory(t) {\n    return new (t || ClrDatagridItemsTrackBy)(ɵngcc0.ɵɵdirectiveInject(Items, 8));\n  };\n\n  ClrDatagridItemsTrackBy.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: ClrDatagridItemsTrackBy,\n    selectors: [[\"\", \"ngForTrackBy\", \"\"]],\n    inputs: {\n      trackBy: [\"ngForTrackBy\", \"trackBy\"]\n    }\n  });\n  return ClrDatagridItemsTrackBy;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrDatagridPageSize = /*#__PURE__*/(() => {\n  class ClrDatagridPageSize {\n    constructor(page) {\n      this.page = page;\n      this.pageSizeOptionsId = uniqueIdFactory();\n    }\n\n    ngOnInit() {\n      if (!this.pageSizeOptions || this.pageSizeOptions.length === 0) {\n        this.pageSizeOptions = [this.page.size];\n      }\n    }\n\n  }\n\n  ClrDatagridPageSize.ɵfac = function ClrDatagridPageSize_Factory(t) {\n    return new (t || ClrDatagridPageSize)(ɵngcc0.ɵɵdirectiveInject(Page));\n  };\n\n  ClrDatagridPageSize.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ClrDatagridPageSize,\n    selectors: [[\"clr-dg-page-size\"]],\n    inputs: {\n      pageSizeOptionsId: [\"clrPageSizeOptionsId\", \"pageSizeOptionsId\"],\n      pageSizeOptions: [\"clrPageSizeOptions\", \"pageSizeOptions\"]\n    },\n    ngContentSelectors: _c0,\n    decls: 4,\n    vars: 5,\n    consts: [[1, \"clr-select-wrapper\"], [3, \"id\", \"ngModel\", \"ngModelChange\"], [3, \"ngValue\", 4, \"ngFor\", \"ngForOf\"], [3, \"ngValue\"]],\n    template: function ClrDatagridPageSize_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n        ɵngcc0.ɵɵelementStart(1, \"div\", 0);\n        ɵngcc0.ɵɵelementStart(2, \"select\", 1);\n        ɵngcc0.ɵɵlistener(\"ngModelChange\", function ClrDatagridPageSize_Template_select_ngModelChange_2_listener($event) {\n          return ctx.page.size = $event;\n        });\n        ɵngcc0.ɵɵtemplate(3, ClrDatagridPageSize_option_3_Template, 2, 2, \"option\", 2);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵclassProp(\"clr-page-size-select\", true);\n        ɵngcc0.ɵɵproperty(\"id\", ctx.pageSizeOptionsId)(\"ngModel\", ctx.page.size);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.pageSizeOptions);\n      }\n    },\n    directives: [ɵngcc2.SelectControlValueAccessor, ɵngcc2.NgControlStatus, ɵngcc2.NgModel, ɵngcc1.NgForOf, ɵngcc2.NgSelectOption, ɵngcc2.ɵNgSelectMultipleOption],\n    encapsulation: 2\n  });\n  return ClrDatagridPageSize;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrDatagridPagination = /*#__PURE__*/(() => {\n  class ClrDatagridPagination {\n    constructor(page, commonStrings, detailService) {\n      this.page = page;\n      this.commonStrings = commonStrings;\n      this.detailService = detailService;\n      this.currentChanged = new EventEmitter(false);\n      this.page.activated = true;\n    }\n    /**********\n     * Subscription to the Page service for page changes.\n     * Note: this only emits after the datagrid is initialized/stabalized and the page changes.\n     */\n\n\n    ngOnInit() {\n      /*\n       * Default page size is 10.\n       * The reason we set it here and not in the provider itself is because\n       * we don't want pagination if this component isn't present in the datagrid.\n       */\n      if (!this.page.size) {\n        this.page.size = 10;\n      }\n\n      this._pageSubscription = this.page.change.subscribe(current => this.currentChanged.emit(current));\n    }\n\n    ngOnDestroy() {\n      this.page.resetPageSize(true);\n\n      if (this._pageSubscription) {\n        this._pageSubscription.unsubscribe();\n      }\n    }\n    /**\n     * Page size\n     */\n\n\n    get pageSize() {\n      return this.page.size;\n    }\n\n    set pageSize(size) {\n      if (typeof size === 'number') {\n        this.page.size = size;\n      }\n    }\n    /**\n     * Total items (needed to guess the last page)\n     */\n\n\n    get totalItems() {\n      return this.page.totalItems;\n    }\n\n    set totalItems(total) {\n      if (typeof total === 'number') {\n        this.page.totalItems = total;\n      }\n    }\n    /**\n     * Last page\n     */\n\n\n    get lastPage() {\n      return this.page.last;\n    }\n\n    set lastPage(last) {\n      if (typeof last === 'number') {\n        this.page.last = last;\n      }\n    }\n    /**\n     * Current page\n     */\n\n\n    get currentPage() {\n      return this.page.current;\n    }\n\n    set currentPage(page) {\n      if (typeof page === 'number') {\n        this.page.current = page;\n      }\n    }\n    /**\n     * Moves to the previous page if it exists\n     */\n\n\n    previous() {\n      this.page.previous();\n    }\n    /**\n     * Moves to the next page if it exists\n     */\n\n\n    next() {\n      this.page.next();\n    }\n    /**\n     * Index of the first item displayed on the current page, starting at 0, -1 if none displayed\n     */\n\n\n    get firstItem() {\n      return this.page.firstItem;\n    }\n    /**\n     * Index of the last item displayed on the current page, starting at 0, -1 if none displayed\n     */\n\n\n    get lastItem() {\n      return this.page.lastItem;\n    }\n    /**\n     * Conditionally adds page numbers before and after the current page\n     */\n\n\n    get middlePages() {\n      const middlePages = [];\n\n      if (this.page.current > 1) {\n        middlePages.push(this.page.current - 1);\n      }\n\n      middlePages.push(this.page.current);\n\n      if (this.page.current < this.page.last) {\n        middlePages.push(this.page.current + 1);\n      }\n\n      return middlePages;\n    }\n    /**\n     * We only update the pagination's current page on blur of the input field, or\n     * when they press enter.\n     */\n\n\n    updateCurrentPage(event) {\n      const parsed = parseInt(event.target.value, 10); // if the input value, is not a number, we don't update the page\n\n      if (!isNaN(parsed)) {\n        if (parsed < 1) {\n          this.page.current = 1;\n        } else if (parsed > this.page.last) {\n          this.page.current = this.page.last;\n        } else {\n          this.page.current = parsed;\n        }\n      }\n      /**\n       * Set the input's value to the new current page. This is needed because the code\n       * above may have changed the value from what the user entered in.\n       */\n\n\n      this.currentPageInputRef.nativeElement.value = this.page.current;\n    }\n\n  }\n\n  ClrDatagridPagination.ɵfac = function ClrDatagridPagination_Factory(t) {\n    return new (t || ClrDatagridPagination)(ɵngcc0.ɵɵdirectiveInject(Page), ɵngcc0.ɵɵdirectiveInject(ClrCommonStringsService), ɵngcc0.ɵɵdirectiveInject(DetailService));\n  };\n\n  ClrDatagridPagination.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ClrDatagridPagination,\n    selectors: [[\"clr-dg-pagination\"]],\n    contentQueries: function ClrDatagridPagination_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, ClrDatagridPageSize, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._pageSizeComponent = _t.first);\n      }\n    },\n    viewQuery: function ClrDatagridPagination_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c72, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.currentPageInputRef = _t.first);\n      }\n    },\n    hostVars: 2,\n    hostBindings: function ClrDatagridPagination_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"pagination\", true);\n      }\n    },\n    inputs: {\n      pageSize: [\"clrDgPageSize\", \"pageSize\"],\n      totalItems: [\"clrDgTotalItems\", \"totalItems\"],\n      lastPage: [\"clrDgLastPage\", \"lastPage\"],\n      currentPage: [\"clrDgPage\", \"currentPage\"],\n      disableCurrentPageInput: [\"clrDgPageInputDisabled\", \"disableCurrentPageInput\"]\n    },\n    outputs: {\n      currentChanged: \"clrDgPageChange\"\n    },\n    ngContentSelectors: _c74,\n    decls: 2,\n    vars: 2,\n    consts: [[4, \"ngIf\"], [\"class\", \"pagination-size\", 4, \"ngIf\"], [1, \"pagination-description\"], [\"class\", \"pagination-list\", 4, \"ngIf\"], [1, \"pagination-size\"], [1, \"pagination-list\"], [\"type\", \"button\", 1, \"pagination-first\", 3, \"disabled\", \"click\"], [\"shape\", \"step-forward-2\", \"direction\", \"down\"], [\"type\", \"button\", 1, \"pagination-previous\", 3, \"disabled\", \"click\"], [\"shape\", \"angle\", \"direction\", \"left\"], [\"type\", \"text\", \"class\", \"pagination-current clr-input\", 3, \"size\", \"value\", \"keydown.enter\", \"blur\", 4, \"ngIf\", \"ngIfElse\"], [\"readOnly\", \"\"], [\"type\", \"button\", 1, \"pagination-next\", 3, \"disabled\", \"click\"], [\"shape\", \"angle\", \"direction\", \"right\"], [\"type\", \"button\", 1, \"pagination-last\", 3, \"disabled\", \"click\"], [\"shape\", \"step-forward-2\", \"direction\", \"up\"], [\"type\", \"text\", 1, \"pagination-current\", \"clr-input\", 3, \"size\", \"value\", \"keydown.enter\", \"blur\"], [\"currentPageInput\", \"\"], [1, \"pagination-description-compact\"]],\n    template: function ClrDatagridPagination_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c73);\n        ɵngcc0.ɵɵtemplate(0, ClrDatagridPagination_ng_container_0_Template, 5, 2, \"ng-container\", 0);\n        ɵngcc0.ɵɵtemplate(1, ClrDatagridPagination_ng_container_1_Template, 10, 8, \"ng-container\", 0);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.detailService.isOpen);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.detailService.isOpen);\n      }\n    },\n    directives: [ɵngcc1.NgIf, CdsIconCustomTag],\n    encapsulation: 2\n  });\n  return ClrDatagridPagination;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/**\n * Generic bland container serving various purposes for Datagrid.\n * For instance, it can help span a text over multiple rows in detail view.\n */\n\n\nlet ClrDatagridRowDetail = /*#__PURE__*/(() => {\n  class ClrDatagridRowDetail {\n    constructor(selection, rowActionService, expand, expandableRows, commonStrings) {\n      this.selection = selection;\n      this.rowActionService = rowActionService;\n      this.expand = expand;\n      this.expandableRows = expandableRows;\n      this.commonStrings = commonStrings;\n      /* reference to the enum so that template can access it */\n\n      this.SELECTION_TYPE = SelectionType;\n      this.subscriptions = [];\n      this.replacedRow = false;\n    }\n\n    set replace(value) {\n      this.expand.setReplace(!!value);\n    }\n\n    ngAfterContentInit() {\n      this.subscriptions.push(this.expand.replace.subscribe(replaceChange => {\n        this.replacedRow = replaceChange;\n      }));\n    }\n\n    ngOnDestroy() {\n      this.subscriptions.forEach(sub => sub.unsubscribe());\n    }\n\n    get beginningOfExpandableContentAriaText() {\n      return this._beginningOfExpandableContentAriaText || `${this.commonStrings.keys.dategridExpandableBeginningOf || this.commonStrings.keys.datagridExpandableBeginningOf} \n      ${this.commonStrings.keys.dategridExpandableRowContent || this.commonStrings.keys.datagridExpandableRowContent}`;\n    }\n\n    get endOfExpandableContentAriaText() {\n      return this._endOfExpandableContentAriaText || `${this.commonStrings.keys.dategridExpandableEndOf || this.commonStrings.keys.datagridExpandableEndOf} \n      ${this.commonStrings.keys.dategridExpandableRowContent || this.commonStrings.keys.datagridExpandableRowContent}`;\n    }\n\n  }\n\n  ClrDatagridRowDetail.ɵfac = function ClrDatagridRowDetail_Factory(t) {\n    return new (t || ClrDatagridRowDetail)(ɵngcc0.ɵɵdirectiveInject(Selection), ɵngcc0.ɵɵdirectiveInject(RowActionService), ɵngcc0.ɵɵdirectiveInject(DatagridIfExpandService), ɵngcc0.ɵɵdirectiveInject(ExpandableRowsCount), ɵngcc0.ɵɵdirectiveInject(ClrCommonStringsService));\n  };\n\n  ClrDatagridRowDetail.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ClrDatagridRowDetail,\n    selectors: [[\"clr-dg-row-detail\"]],\n    contentQueries: function ClrDatagridRowDetail_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, ClrDatagridCell, 4);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.cells = _t);\n      }\n    },\n    hostAttrs: [\"role\", \"gridcell\"],\n    hostVars: 7,\n    hostBindings: function ClrDatagridRowDetail_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"id\", ctx.expand.expandableId);\n        ɵngcc0.ɵɵclassProp(\"datagrid-row-flex\", true)(\"datagrid-row-detail\", true)(\"datagrid-container\", ctx.cells.length === 0);\n      }\n    },\n    inputs: {\n      replace: [\"clrDgReplace\", \"replace\"],\n      _beginningOfExpandableContentAriaText: [\"clrRowDetailBeginningAriaText\", \"_beginningOfExpandableContentAriaText\"],\n      _endOfExpandableContentAriaText: [\"clrRowDetailEndAriaText\", \"_endOfExpandableContentAriaText\"]\n    },\n    ngContentSelectors: _c0,\n    decls: 5,\n    vars: 3,\n    consts: [[1, \"clr-sr-only\"]],\n    template: function ClrDatagridRowDetail_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵtext(1);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵprojection(2);\n        ɵngcc0.ɵɵelementStart(3, \"div\", 0);\n        ɵngcc0.ɵɵtext(4);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵtextInterpolate2(\" \", ctx.beginningOfExpandableContentAriaText, \" \", ctx.commonStrings.keys.dategridExpandableRowsHelperText || ctx.commonStrings.keys.datagridExpandableRowsHelperText, \" \");\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵtextInterpolate(ctx.endOfExpandableContentAriaText);\n      }\n    },\n    encapsulation: 2\n  });\n  return ClrDatagridRowDetail;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n// @TODO The top two are not used now, which is probably a performance drag that was broken along the way.\n// There was a previous pattern to hide everything to do computation then display, for Firefox, needs revisiting.\n\n\nconst NO_LAYOUT_CLASS = 'datagrid-no-layout';\nconst COMPUTE_WIDTH_CLASS = 'datagrid-computing-columns-width';\nconst STRICT_WIDTH_CLASS = 'datagrid-fixed-width';\nconst HIDDEN_COLUMN_CLASS = 'datagrid-hidden-column';\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nlet DatagridCellRenderer = /*#__PURE__*/(() => {\n  class DatagridCellRenderer {\n    constructor(el, renderer, organizer) {\n      this.el = el;\n      this.renderer = renderer;\n      this.subscriptions = [];\n      this.subscriptions.push(organizer.filterRenderSteps(DatagridRenderStep.CLEAR_WIDTHS).subscribe(() => this.clearWidth()));\n    } // @TODO(JEREMY) Work out how to dedupe some of this code between header and cell renderers\n\n\n    set columnState(columnState) {\n      if (this.stateSubscription) {\n        this.stateSubscription.unsubscribe();\n      }\n\n      this.runAllChanges = ALL_COLUMN_CHANGES;\n      this.stateSubscription = columnState.subscribe(state => this.stateChanges(state));\n    }\n\n    ngOnDestroy() {\n      this.subscriptions.forEach(sub => sub.unsubscribe());\n\n      if (this.stateSubscription) {\n        this.stateSubscription.unsubscribe();\n      }\n    }\n\n    stateChanges(state) {\n      if (this.runAllChanges) {\n        state.changes = this.runAllChanges;\n        delete this.runAllChanges;\n      }\n\n      if (state.changes && state.changes.length) {\n        state.changes.forEach(change => {\n          switch (change) {\n            case DatagridColumnChanges.WIDTH:\n              this.setWidth(state);\n              break;\n\n            case DatagridColumnChanges.HIDDEN:\n              this.setHidden(state);\n              break;\n\n            default:\n              break;\n          }\n        });\n      }\n    }\n\n    clearWidth() {\n      this.renderer.removeClass(this.el.nativeElement, STRICT_WIDTH_CLASS);\n      this.renderer.setStyle(this.el.nativeElement, 'width', null);\n    }\n\n    setWidth(state) {\n      if (state.strictWidth) {\n        this.renderer.addClass(this.el.nativeElement, STRICT_WIDTH_CLASS);\n      } else {\n        this.renderer.removeClass(this.el.nativeElement, STRICT_WIDTH_CLASS);\n      }\n\n      this.renderer.setStyle(this.el.nativeElement, 'width', state.width + 'px');\n    }\n\n    setHidden(state) {\n      if (state.hidden) {\n        this.renderer.addClass(this.el.nativeElement, HIDDEN_COLUMN_CLASS);\n      } else {\n        this.renderer.removeClass(this.el.nativeElement, HIDDEN_COLUMN_CLASS);\n      }\n    }\n\n  }\n\n  DatagridCellRenderer.ɵfac = function DatagridCellRenderer_Factory(t) {\n    return new (t || DatagridCellRenderer)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(DatagridRenderOrganizer));\n  };\n\n  DatagridCellRenderer.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: DatagridCellRenderer,\n    selectors: [[\"clr-dg-cell\"]]\n  });\n  return DatagridCellRenderer;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet DatagridHeaderRenderer = /*#__PURE__*/(() => {\n  class DatagridHeaderRenderer {\n    constructor(el, renderer, organizer, domAdapter, columnResizerService, columnsService, columnState) {\n      this.el = el;\n      this.renderer = renderer;\n      this.organizer = organizer;\n      this.domAdapter = domAdapter;\n      this.columnResizerService = columnResizerService;\n      this.columnsService = columnsService;\n      this.columnState = columnState;\n      this.resizeEmitter = new EventEmitter();\n      /**\n       * Indicates if the column has a strict width, so it doesn't shrink or expand based on the content.\n       */\n\n      this.widthSet = false;\n      this.autoSet = false;\n      this.subscriptions = [];\n      this.subscriptions.push(this.organizer.filterRenderSteps(DatagridRenderStep.CLEAR_WIDTHS).subscribe(() => this.clearWidth()));\n      this.subscriptions.push(columnState.subscribe(state => this.stateChanges(state)));\n    }\n\n    ngOnDestroy() {\n      this.subscriptions.forEach(sub => sub.unsubscribe());\n    }\n\n    stateChanges(state) {\n      if (state.changes && state.changes.length) {\n        state.changes.forEach(change => {\n          switch (change) {\n            case DatagridColumnChanges.WIDTH:\n              this.setWidth(state);\n              break;\n\n            case DatagridColumnChanges.HIDDEN:\n              this.setHidden(state);\n              break;\n\n            default:\n              break;\n          }\n        });\n      }\n    }\n\n    clearWidth() {\n      // remove the width only if we set it, and it is not changed by dragging.\n      if (this.widthSet && !this.columnResizerService.resizedBy) {\n        this.renderer.setStyle(this.el.nativeElement, 'width', null);\n      }\n\n      if (this.autoSet) {\n        this.renderer.removeClass(this.el.nativeElement, STRICT_WIDTH_CLASS);\n      }\n    }\n\n    detectStrictWidth() {\n      if (this.columnResizerService.resizedBy) {\n        return this.columnResizerService.widthAfterResize;\n      } else if (this.autoSet) {\n        return 0;\n      } else {\n        return this.domAdapter.userDefinedWidth(this.el.nativeElement);\n      }\n    }\n\n    computeWidth(strictWidth) {\n      let width = strictWidth;\n\n      if (!width) {\n        width = this.domAdapter.scrollWidth(this.el.nativeElement);\n      }\n\n      return width;\n    }\n\n    getColumnWidthState() {\n      const strictWidth = this.detectStrictWidth();\n      return {\n        width: this.computeWidth(strictWidth),\n        strictWidth: strictWidth\n      };\n    }\n\n    setColumnState(index) {\n      this.columnsService.columns[index] = this.columnState;\n    }\n\n    setWidth(state) {\n      if (state.strictWidth) {\n        if (this.columnResizerService.resizedBy) {\n          this.resizeEmitter.emit(state.width);\n          this.renderer.setStyle(this.el.nativeElement, 'width', state.width + 'px');\n          this.widthSet = false;\n        } // Don't set width if there is a user-defined one. Just add the strict width class.\n\n\n        this.renderer.addClass(this.el.nativeElement, STRICT_WIDTH_CLASS);\n        this.autoSet = false;\n      } else {\n        this.renderer.removeClass(this.el.nativeElement, STRICT_WIDTH_CLASS);\n        this.renderer.setStyle(this.el.nativeElement, 'width', state.width + 'px');\n        this.widthSet = true;\n        this.autoSet = true;\n      }\n    }\n\n    setHidden(state) {\n      if (state.hidden) {\n        this.renderer.addClass(this.el.nativeElement, HIDDEN_COLUMN_CLASS);\n      } else {\n        this.renderer.removeClass(this.el.nativeElement, HIDDEN_COLUMN_CLASS);\n      }\n    }\n\n  }\n\n  DatagridHeaderRenderer.ɵfac = function DatagridHeaderRenderer_Factory(t) {\n    return new (t || DatagridHeaderRenderer)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(DatagridRenderOrganizer), ɵngcc0.ɵɵdirectiveInject(DomAdapter), ɵngcc0.ɵɵdirectiveInject(ColumnResizerService), ɵngcc0.ɵɵdirectiveInject(ColumnsService), ɵngcc0.ɵɵdirectiveInject(COLUMN_STATE));\n  };\n\n  DatagridHeaderRenderer.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: DatagridHeaderRenderer,\n    selectors: [[\"clr-dg-column\"]],\n    outputs: {\n      resizeEmitter: \"clrDgColumnResize\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([ColumnResizerService, COLUMN_STATE_PROVIDER])]\n  });\n  return DatagridHeaderRenderer;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet NoopDomAdapter = /*#__PURE__*/(() => {\n  class NoopDomAdapter {\n    // eslint-disable-next-line\n    userDefinedWidth(element) {\n      return 0;\n    } // eslint-disable-next-line\n\n\n    scrollBarWidth(element) {\n      return 0;\n    } // eslint-disable-next-line\n\n\n    scrollWidth(element) {\n      return 0;\n    } // eslint-disable-next-line\n\n\n    computedHeight(element) {\n      return 0;\n    } // eslint-disable-next-line\n\n\n    clientRect(element) {\n      return {\n        top: 0,\n        bottom: 0,\n        left: 0,\n        right: 0,\n        width: 0,\n        height: 0\n      };\n    } // eslint-disable-next-line\n\n\n    minWidth(element) {\n      return 0;\n    } // eslint-disable-next-line\n\n\n    focus(element) {// Do nothing\n    }\n\n  }\n\n  NoopDomAdapter.ɵfac = function NoopDomAdapter_Factory(t) {\n    return new (t || NoopDomAdapter)();\n  };\n\n  NoopDomAdapter.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: NoopDomAdapter,\n    factory: NoopDomAdapter.ɵfac\n  });\n  return NoopDomAdapter;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet DatagridRowRenderer = /*#__PURE__*/(() => {\n  class DatagridRowRenderer {\n    constructor(columnsService) {\n      this.columnsService = columnsService;\n      this.subscriptions = [];\n    }\n\n    ngAfterContentInit() {\n      this.setColumnState(); // case #3 and #4\n\n      this.subscriptions.push(this.cells.changes.subscribe(() => {\n        this.setColumnState(); // case #2\n        // Note on case #2: In the case of dynamic columns, when one column (header/cell together) gets deleted,\n        // this.cells.changes emits before this.columnsService.columns gets updated in MainRenderer\n        // when this.headers.changes emits as well. So that means there will be n+1 column state providers\n        // when this.cells.changes emits. Hence, we should quit earlier there. But this method will be called\n        // right after again when this.headers.changes emits. By then, there will be the same number of column state\n        // providers as column headers.\n      }));\n    }\n\n    ngOnDestroy() {\n      this.subscriptions.forEach(sub => sub.unsubscribe());\n    }\n\n    setColumnState() {\n      // This method runs in four cases:\n      // 1. When the initial rows appear on the first page.\n      //    In this case, the method will be called in DatagridMainRenderer.\n      // 2. When columns (corresponding header/cells) get added and deleted.\n      //    In this case, the method will be called in DatagridMainRenderer. (Read the note on this case above).\n      // 3. When rows load asynchronously.\n      //    In this case, the method will be called in this class.\n      // 4. When rows load after switching pages.\n      //    In this case, the method will be called in this class (Basically, same as the case 3).\n      if (this.cells.length === this.columnsService.columns.length) {\n        this.cells.forEach((cell, index) => {\n          if (this.columnsService.columns[index]) {\n            cell.columnState = this.columnsService.columns[index];\n          }\n        });\n      }\n    }\n\n  }\n\n  DatagridRowRenderer.ɵfac = function DatagridRowRenderer_Factory(t) {\n    return new (t || DatagridRowRenderer)(ɵngcc0.ɵɵdirectiveInject(ColumnsService));\n  };\n\n  DatagridRowRenderer.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: DatagridRowRenderer,\n    selectors: [[\"clr-dg-row\"], [\"clr-dg-row-detail\"]],\n    contentQueries: function DatagridRowRenderer_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, DatagridCellRenderer, 4);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.cells = _t);\n      }\n    }\n  });\n  return DatagridRowRenderer;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n// Fixes build error\n// @dynamic (https://github.com/angular/angular/issues/19698#issuecomment-338340211)\n\n\nconst domAdapterFactory = platformId => {\n  if (isPlatformBrowser(platformId)) {\n    return new DomAdapter();\n  } else {\n    return new NoopDomAdapter();\n  }\n}; // Fixes build error\n// @dynamic (https://github.com/angular/angular/issues/19698#issuecomment-338340211)\n\n\nlet DatagridMainRenderer = /*#__PURE__*/(() => {\n  class DatagridMainRenderer {\n    constructor(organizer, items, page, domAdapter, el, renderer, detailService, tableSizeService, columnsService) {\n      this.organizer = organizer;\n      this.items = items;\n      this.page = page;\n      this.domAdapter = domAdapter;\n      this.el = el;\n      this.renderer = renderer;\n      this.detailService = detailService;\n      this.tableSizeService = tableSizeService;\n      this.columnsService = columnsService;\n      this._heightSet = false;\n      this.subscriptions = [];\n      /**\n       * Indicates if we want to re-compute columns width. This should only happen:\n       * 1) When headers change, with columns being added or removed\n       * 2) When rows are lazily loaded for the first time\n       */\n\n      this.columnsSizesStable = false;\n      this.shouldStabilizeColumns = true;\n      this.subscriptions.push(this.organizer.filterRenderSteps(DatagridRenderStep.COMPUTE_COLUMN_WIDTHS).subscribe(() => this.computeHeadersWidth()));\n      this.subscriptions.push(this.page.sizeChange.subscribe(() => {\n        if (this._heightSet) {\n          this.resetDatagridHeight();\n        }\n      }));\n      this.subscriptions.push(this.detailService.stateChange.subscribe(state => this.toggleDetailPane(state)));\n      this.subscriptions.push(this.items.change.subscribe(() => this.shouldStabilizeColumns = true));\n    }\n\n    ngAfterContentInit() {\n      this.setupColumns();\n      this.subscriptions.push(this.headers.changes.subscribe(() => {\n        // TODO: only re-stabilize if a column was added or removed. Reordering is fine.\n        // Need to setup columns before stabalizing them\n        this.setupColumns();\n        this.columnsSizesStable = false;\n        this.stabilizeColumns();\n      }));\n    } // Initialize and set Table width for horizontal scrolling here.\n\n\n    ngAfterViewInit() {\n      this.tableSizeService.table = this.el;\n    }\n\n    ngAfterViewChecked() {\n      if (this.shouldStabilizeColumns) {\n        this.stabilizeColumns();\n      }\n\n      if (this.shouldComputeHeight()) {\n        setTimeout(() => {\n          this.computeDatagridHeight();\n        });\n      }\n    }\n\n    setupColumns() {\n      this.headers.forEach((header, index) => header.setColumnState(index));\n      this.columnsService.columns.splice(this.headers.length); // Trim any old columns\n\n      this.rows.forEach(row => row.setColumnState());\n    }\n\n    shouldComputeHeight() {\n      if (!this._heightSet && this.page.size > 0) {\n        if (this.items.displayed.length === this.page.size) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n\n    toggleDetailPane(state) {\n      if (this.headers) {\n        if (state && !this.columnsService.hasCache()) {\n          this.columnsService.cache();\n          this.headers.forEach((_header, index) => {\n            if (index > 0) {\n              this.columnsService.emitStateChangeAt(index, {\n                changes: [DatagridColumnChanges.HIDDEN],\n                hidden: state\n              });\n            }\n          });\n        } else if (!state) {\n          this.columnsService.resetToLastCache();\n        }\n      }\n    }\n    /**\n     * Computes the height of the datagrid.\n     *\n     * NOTE: We had to choose to set the height instead of the min-height because\n     * IE 11 requires the height on the parent for the children flex grow/shrink properties to work.\n     * When we used min-height, 1 1 auto doesn't used to work in IE11 :-(\n     * But this doesn't affect the fix. It works in both fixed & variable height datagrids.\n     *\n     * Refer: http://stackoverflow.com/questions/24396205/flex-grow-not-working-in-internet-explorer-11-0\n     */\n\n\n    computeDatagridHeight() {\n      // IE doesn't return correct value for getComputedStyle(element).getPropertyValue(\"height\")\n      const value = this.domAdapter.clientRect(this.el.nativeElement).height;\n      this.renderer.setStyle(this.el.nativeElement, 'height', value + 'px');\n      this._heightSet = true;\n    }\n\n    resetDatagridHeight() {\n      this.renderer.setStyle(this.el.nativeElement, 'height', '');\n      this._heightSet = false;\n    }\n\n    ngOnDestroy() {\n      this.subscriptions.forEach(sub => sub.unsubscribe());\n    }\n    /**\n     * Makes each header compute its width.\n     */\n\n\n    computeHeadersWidth() {\n      const nbColumns = this.headers.length;\n      let allStrict = true;\n      this.headers.forEach((header, index) => {\n        // On the last header column check whether all columns have strict widths.\n        // If all columns have strict widths, remove the strict width from the last column and make it the column's\n        // minimum width so that when all previous columns shrink, it will get a flexible width and cover the empty\n        // gap in the Datagrid.\n        const state = Object.assign({\n          changes: [DatagridColumnChanges.WIDTH]\n        }, header.getColumnWidthState());\n\n        if (!state.strictWidth) {\n          allStrict = false;\n        }\n\n        if (nbColumns === index + 1 && allStrict) {\n          state.strictWidth = 0;\n        }\n\n        this.columnsService.emitStateChangeAt(index, state);\n      });\n    }\n    /**\n     * Triggers a whole re-rendring cycle to set column sizes, if needed.\n     */\n\n\n    stabilizeColumns() {\n      this.shouldStabilizeColumns = false;\n\n      if (this.columnsSizesStable) {\n        // Nothing to do.\n        return;\n      } // Resize when the rows are loaded.\n\n\n      if (this.items.displayed.length > 0) {\n        this.organizer.resize();\n        this.columnsSizesStable = true;\n      }\n    }\n\n  }\n\n  DatagridMainRenderer.ɵfac = function DatagridMainRenderer_Factory(t) {\n    return new (t || DatagridMainRenderer)(ɵngcc0.ɵɵdirectiveInject(DatagridRenderOrganizer), ɵngcc0.ɵɵdirectiveInject(Items), ɵngcc0.ɵɵdirectiveInject(Page), ɵngcc0.ɵɵdirectiveInject(DomAdapter), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(DetailService), ɵngcc0.ɵɵdirectiveInject(TableSizeService), ɵngcc0.ɵɵdirectiveInject(ColumnsService));\n  };\n\n  DatagridMainRenderer.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: DatagridMainRenderer,\n    selectors: [[\"clr-datagrid\"]],\n    contentQueries: function DatagridMainRenderer_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, DatagridHeaderRenderer, 4);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, DatagridRowRenderer, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.headers = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.rows = _t);\n      }\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([{\n      provide: DomAdapter,\n      useFactory: domAdapterFactory,\n      deps: [PLATFORM_ID]\n    }])]\n  });\n  return DatagridMainRenderer;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nconst CLR_DATAGRID_DIRECTIVES = [// Core\nClrDatagrid, ClrDatagridActionBar, ClrDatagridActionOverflow, ClrDatagridColumn, ClrDatagridColumnSeparator, ClrDatagridColumnToggle, ClrDatagridHideableColumn, ClrDatagridFilter, ClrDatagridItems, ClrDatagridItemsTrackBy, ClrDatagridRow, ClrDatagridRowDetail, DatagridDetailRegisterer, ClrDatagridCell, ClrDatagridFooter, ClrDatagridPagination, ClrDatagridPageSize, ClrDatagridPlaceholder, ClrDatagridColumnToggleButton, ClrDatagridColumnToggleTitle, ClrDatagridDetail, ClrIfDetail, ClrDatagridDetailHeader, ClrDatagridDetailBody, WrappedCell, WrappedColumn, WrappedRow, // Renderers\nDatagridMainRenderer, DatagridHeaderRenderer, DatagridRowRenderer, DatagridCellRenderer, // Chocolate\nDatagridWillyWonka, ActionableOompaLoompa, ExpandableOompaLoompa, // Built-in shortcuts\nDatagridStringFilter, DatagridNumericFilter];\nlet ClrDatagridModule = /*#__PURE__*/(() => {\n  class ClrDatagridModule {\n    constructor() {\n      ClarityIcons.addIcons(ellipsisVerticalIcon, viewColumnsIcon, windowCloseIcon, arrowIcon, timesIcon, stepForward2Icon, angleDoubleIcon, filterGridCircleIcon, filterGridIcon);\n    }\n\n  }\n\n  ClrDatagridModule.ɵfac = function ClrDatagridModule_Factory(t) {\n    return new (t || ClrDatagridModule)();\n  };\n\n  ClrDatagridModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: ClrDatagridModule\n  });\n  ClrDatagridModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule, ClrIconModule, ClrFormsModule, FormsModule, ClrLoadingModule, ClrConditionalModule, ClrOutsideClickModule, ClrExpandableAnimationModule, ClrDragAndDropModule, ClrSpinnerModule, ClrPopoverModuleNext, ClrFocusTrapModule, ClrFocusOnViewInitModule]]\n  });\n  return ClrDatagridModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ClrDatagridModule, {\n    declarations: function () {\n      return [ClrDatagrid, ClrDatagridActionBar, ClrDatagridActionOverflow, ClrDatagridColumn, ClrDatagridColumnSeparator, ClrDatagridColumnToggle, ClrDatagridHideableColumn, ClrDatagridFilter, ClrDatagridItems, ClrDatagridItemsTrackBy, ClrDatagridRow, ClrDatagridRowDetail, DatagridDetailRegisterer, ClrDatagridCell, ClrDatagridFooter, ClrDatagridPagination, ClrDatagridPageSize, ClrDatagridPlaceholder, ClrDatagridColumnToggleButton, ClrDatagridColumnToggleTitle, ClrDatagridDetail, ClrIfDetail, ClrDatagridDetailHeader, ClrDatagridDetailBody, WrappedCell, WrappedColumn, WrappedRow, DatagridMainRenderer, DatagridHeaderRenderer, DatagridRowRenderer, DatagridCellRenderer, DatagridWillyWonka, ActionableOompaLoompa, ExpandableOompaLoompa, DatagridStringFilter, DatagridNumericFilter];\n    },\n    imports: function () {\n      return [CommonModule, ClrIconModule, ClrFormsModule, FormsModule, ClrLoadingModule, ClrConditionalModule, ClrOutsideClickModule, ClrExpandableAnimationModule, ClrDragAndDropModule, ClrSpinnerModule, ClrPopoverModuleNext, ClrFocusTrapModule, ClrFocusOnViewInitModule];\n    },\n    exports: function () {\n      return [ClrDatagrid, ClrDatagridActionBar, ClrDatagridActionOverflow, ClrDatagridColumn, ClrDatagridColumnSeparator, ClrDatagridColumnToggle, ClrDatagridHideableColumn, ClrDatagridFilter, ClrDatagridItems, ClrDatagridItemsTrackBy, ClrDatagridRow, ClrDatagridRowDetail, DatagridDetailRegisterer, ClrDatagridCell, ClrDatagridFooter, ClrDatagridPagination, ClrDatagridPageSize, ClrDatagridPlaceholder, ClrDatagridColumnToggleButton, ClrDatagridColumnToggleTitle, ClrDatagridDetail, ClrIfDetail, ClrDatagridDetailHeader, ClrDatagridDetailBody, WrappedCell, WrappedColumn, WrappedRow, DatagridMainRenderer, DatagridHeaderRenderer, DatagridRowRenderer, DatagridCellRenderer, DatagridWillyWonka, ActionableOompaLoompa, ExpandableOompaLoompa, DatagridStringFilter, DatagridNumericFilter];\n    }\n  });\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrStackViewCustomTags = /*#__PURE__*/(() => {\n  class ClrStackViewCustomTags {}\n\n  ClrStackViewCustomTags.ɵfac = function ClrStackViewCustomTags_Factory(t) {\n    return new (t || ClrStackViewCustomTags)();\n  };\n\n  ClrStackViewCustomTags.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: ClrStackViewCustomTags,\n    selectors: [[\"clr-stack-content\"]]\n  });\n  return ClrStackViewCustomTags;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nlet ClrStackViewLabel = /*#__PURE__*/(() => {\n  class ClrStackViewLabel {\n    constructor(uniqueId) {\n      this.uniqueId = uniqueId;\n      this._generatedId = null;\n      this._id = null;\n    }\n\n    set id(val) {\n      if (typeof val === 'string' && val !== '') {\n        this._id = val;\n      } else {\n        this._id = this._generatedId + '';\n      }\n    }\n\n    get id() {\n      return this._id;\n    }\n\n    ngOnInit() {\n      this._generatedId = 'clr-stack-label-' + this.uniqueId;\n\n      if (!this.id) {\n        this._id = this._generatedId + '';\n      }\n    }\n\n  }\n\n  ClrStackViewLabel.ɵfac = function ClrStackViewLabel_Factory(t) {\n    return new (t || ClrStackViewLabel)(ɵngcc0.ɵɵdirectiveInject(UNIQUE_ID));\n  };\n\n  ClrStackViewLabel.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ClrStackViewLabel,\n    selectors: [[\"clr-stack-label\"]],\n    hostVars: 1,\n    hostBindings: function ClrStackViewLabel_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"id\", ctx.id);\n      }\n    },\n    inputs: {\n      id: \"id\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([UNIQUE_ID_PROVIDER])],\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function ClrStackViewLabel_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2\n  });\n  return ClrStackViewLabel;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrStackBlock = /*#__PURE__*/(() => {\n  class ClrStackBlock {\n    /*\n     * This would be more efficient with @ContentChildren, with the parent ClrStackBlock\n     * querying for children StackBlocks, but this feature is not available when downgrading\n     * the component for Angular 1.\n     */\n    constructor(parent, uniqueId, commonStrings) {\n      this.parent = parent;\n      this.uniqueId = uniqueId;\n      this.commonStrings = commonStrings;\n      this.expanded = false;\n      this.expandedChange = new EventEmitter(false);\n      this.expandable = false;\n      this.focused = false;\n      this._changedChildren = 0;\n      this._fullyInitialized = false;\n      this._changed = false;\n\n      if (parent) {\n        parent.addChild();\n      }\n    }\n\n    get getChangedValue() {\n      return this._changed || this._changedChildren > 0 && !this.expanded;\n    }\n\n    set setChangedValue(value) {\n      this._changed = value;\n\n      if (this.parent && this._fullyInitialized) {\n        if (value) {\n          this.parent._changedChildren++;\n        } else {\n          this.parent._changedChildren--;\n        }\n      }\n    }\n\n    get labelledById() {\n      return this.stackBlockTitle.id;\n    }\n\n    get headingLevel() {\n      if (this.ariaLevel) {\n        return this.ariaLevel + '';\n      }\n\n      return this.parent ? '4' : '3';\n    }\n\n    ngOnInit() {\n      // in order to access the parent ClrStackBlock's properties,\n      // the child ClrStackBlock has to be fully initialized at first.\n      this._fullyInitialized = true;\n    }\n\n    addChild() {\n      this.expandable = true;\n    }\n\n    toggleExpand() {\n      if (this.expandable) {\n        this.expanded = !this.expanded;\n        this.expandedChange.emit(this.expanded);\n      }\n    }\n\n    get caretDirection() {\n      return this.expanded ? 'down' : 'right';\n    }\n\n    get role() {\n      return this.expandable ? 'button' : null;\n    }\n\n    get tabIndex() {\n      return this.expandable ? '0' : null;\n    }\n\n    get onStackLabelFocus() {\n      return this.expandable && !this.expanded && this.focused;\n    }\n\n    get ariaExpanded() {\n      if (!this.expandable) {\n        return null;\n      } else {\n        return this.expanded ? 'true' : 'false';\n      }\n    }\n\n    getStackChildrenId() {\n      return this.expanded ? `clr-stack-children-${this.uniqueId}` : null;\n    }\n\n  }\n\n  ClrStackBlock.ɵfac = function ClrStackBlock_Factory(t) {\n    return new (t || ClrStackBlock)(ɵngcc0.ɵɵdirectiveInject(ClrStackBlock, 12), ɵngcc0.ɵɵdirectiveInject(UNIQUE_ID), ɵngcc0.ɵɵdirectiveInject(ClrCommonStringsService));\n  };\n\n  ClrStackBlock.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ClrStackBlock,\n    selectors: [[\"clr-stack-block\"]],\n    contentQueries: function ClrStackBlock_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, ClrStackViewLabel, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.stackBlockTitle = _t.first);\n      }\n    },\n    hostVars: 12,\n    hostBindings: function ClrStackBlock_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"role\", \"heading\")(\"aria-level\", ctx.headingLevel);\n        ɵngcc0.ɵɵclassProp(\"stack-block\", true)(\"stack-block-expanded\", ctx.expanded)(\"stack-block-expandable\", ctx.expandable)(\"stack-block-changed\", ctx.getChangedValue)(\"on-focus\", ctx.onStackLabelFocus);\n      }\n    },\n    inputs: {\n      expanded: [\"clrSbExpanded\", \"expanded\"],\n      expandable: [\"clrSbExpandable\", \"expandable\"],\n      setChangedValue: [\"clrSbNotifyChange\", \"setChangedValue\"],\n      ariaLevel: [\"clrStackViewLevel\", \"ariaLevel\"],\n      ariaSetsize: [\"clrStackViewSetsize\", \"ariaSetsize\"],\n      ariaPosinset: [\"clrStackViewPosinset\", \"ariaPosinset\"]\n    },\n    outputs: {\n      expandedChange: \"clrSbExpandedChange\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([UNIQUE_ID_PROVIDER])],\n    ngContentSelectors: _c76,\n    decls: 9,\n    vars: 9,\n    consts: [[1, \"stack-block-label\", 3, \"id\", \"click\", \"keyup.enter\", \"keyup.space\", \"focus\", \"blur\"], [\"shape\", \"angle\", \"class\", \"stack-block-caret\", 4, \"ngIf\"], [\"class\", \"clr-sr-only\", 4, \"ngIf\"], [1, \"stack-view-key\"], [1, \"stack-block-content\"], [1, \"stack-children\", 3, \"clrExpandTrigger\"], [\"role\", \"region\", 3, \"height\", 4, \"ngIf\"], [\"shape\", \"angle\", 1, \"stack-block-caret\"], [1, \"clr-sr-only\"], [\"role\", \"region\"]],\n    template: function ClrStackBlock_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c75);\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵlistener(\"click\", function ClrStackBlock_Template_div_click_0_listener() {\n          return ctx.toggleExpand();\n        })(\"keyup.enter\", function ClrStackBlock_Template_div_keyup_enter_0_listener() {\n          return ctx.toggleExpand();\n        })(\"keyup.space\", function ClrStackBlock_Template_div_keyup_space_0_listener() {\n          return ctx.toggleExpand();\n        })(\"focus\", function ClrStackBlock_Template_div_focus_0_listener() {\n          return ctx.focused = true;\n        })(\"blur\", function ClrStackBlock_Template_div_blur_0_listener() {\n          return ctx.focused = false;\n        });\n        ɵngcc0.ɵɵtemplate(1, ClrStackBlock_cds_icon_1_Template, 1, 1, \"cds-icon\", 1);\n        ɵngcc0.ɵɵtemplate(2, ClrStackBlock_span_2_Template, 2, 1, \"span\", 2);\n        ɵngcc0.ɵɵelementStart(3, \"div\", 3);\n        ɵngcc0.ɵɵprojection(4);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(5, \"div\", 4);\n        ɵngcc0.ɵɵprojection(6, 1);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(7, \"clr-expandable-animation\", 5);\n        ɵngcc0.ɵɵtemplate(8, ClrStackBlock_div_8_Template, 2, 4, \"div\", 6);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"id\", ctx.uniqueId);\n        ɵngcc0.ɵɵattribute(\"role\", ctx.role)(\"tabindex\", ctx.tabIndex)(\"aria-expanded\", ctx.ariaExpanded)(\"aria-controls\", ctx.getStackChildrenId());\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.expandable);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.getChangedValue);\n        ɵngcc0.ɵɵadvance(5);\n        ɵngcc0.ɵɵproperty(\"clrExpandTrigger\", ctx.expanded);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.expanded);\n      }\n    },\n    directives: [ɵngcc1.NgIf, ClrExpandableAnimation, CdsIconCustomTag],\n    styles: [_c77]\n  });\n  return ClrStackBlock;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrStackContentInput = /*#__PURE__*/(() => {\n  class ClrStackContentInput {\n    constructor(uniqueId) {\n      this.uniqueId = uniqueId;\n    }\n\n  }\n\n  ClrStackContentInput.ɵfac = function ClrStackContentInput_Factory(t) {\n    return new (t || ClrStackContentInput)(ɵngcc0.ɵɵdirectiveInject(UNIQUE_ID));\n  };\n\n  ClrStackContentInput.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: ClrStackContentInput,\n    selectors: [[\"\", \"clrStackInput\", \"\"]],\n    hostVars: 3,\n    hostBindings: function ClrStackContentInput_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-labelledby\", ctx.uniqueId);\n        ɵngcc0.ɵɵclassProp(\"clr-input\", true);\n      }\n    }\n  });\n  return ClrStackContentInput;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrStackView = /*#__PURE__*/(() => {\n  class ClrStackView {\n    constructor() {\n      /**\n       * Undocumented experimental feature: inline editing.\n       */\n      this.editable = false;\n      this.save = new EventEmitter(false);\n      this._editMode = false;\n      this.editingChange = new EventEmitter(false);\n      /**\n       * End of undocumented experimental feature.\n       */\n    }\n\n    get editing() {\n      return this.editable && this._editMode;\n    }\n\n    set editing(value) {\n      if (this.editable) {\n        this._editMode = value;\n        this.editingChange.emit(value);\n\n        if (!value) {\n          this.save.emit(null);\n        }\n      }\n    }\n\n  }\n\n  ClrStackView.ɵfac = function ClrStackView_Factory(t) {\n    return new (t || ClrStackView)();\n  };\n\n  ClrStackView.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ClrStackView,\n    selectors: [[\"clr-stack-view\"]],\n    outputs: {\n      save: \"clrStackSave\"\n    },\n    ngContentSelectors: _c79,\n    decls: 3,\n    vars: 0,\n    consts: [[1, \"stack-view\"]],\n    template: function ClrStackView_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c78);\n        ɵngcc0.ɵɵprojection(0);\n        ɵngcc0.ɵɵelementStart(1, \"div\", 0);\n        ɵngcc0.ɵɵprojection(2, 1);\n        ɵngcc0.ɵɵelementEnd();\n      }\n    },\n    styles: [_c77]\n  });\n  return ClrStackView;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrStackHeader = /*#__PURE__*/(() => {\n  class ClrStackHeader {\n    constructor(stackView) {\n      this.stackView = stackView;\n    }\n\n  }\n\n  ClrStackHeader.ɵfac = function ClrStackHeader_Factory(t) {\n    return new (t || ClrStackHeader)(ɵngcc0.ɵɵdirectiveInject(ClrStackView));\n  };\n\n  ClrStackHeader.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ClrStackHeader,\n    selectors: [[\"clr-stack-header\"]],\n    ngContentSelectors: _c81,\n    decls: 6,\n    vars: 1,\n    consts: [[1, \"stack-header\"], [1, \"stack-title\"], [1, \"stack-actions\"], [\"class\", \"stack-action btn btn-sm btn-link\", \"type\", \"button\", 3, \"click\", 4, \"ngIf\"], [\"type\", \"button\", 1, \"stack-action\", \"btn\", \"btn-sm\", \"btn-link\", 3, \"click\"]],\n    template: function ClrStackHeader_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c80);\n        ɵngcc0.ɵɵelementStart(0, \"h4\", 0);\n        ɵngcc0.ɵɵelementStart(1, \"span\", 1);\n        ɵngcc0.ɵɵprojection(2);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(3, \"span\", 2);\n        ɵngcc0.ɵɵprojection(4, 1);\n        ɵngcc0.ɵɵtemplate(5, ClrStackHeader_button_5_Template, 2, 0, \"button\", 3);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(5);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.stackView.editable);\n      }\n    },\n    directives: [ɵngcc1.NgIf],\n    styles: [_c77]\n  });\n  return ClrStackHeader;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nclass StackControl {\n  constructor(stackView) {\n    this.stackView = stackView;\n    this.modelChange = new EventEmitter(false); // Make the ClrStackView editable, since it contains a StackControl\n\n    this.stackView.editable = true;\n    this.stackView.editingChange.subscribe(editing => {\n      // Edit mode was closed\n      if (!editing) {\n        this.modelChange.emit(this.model);\n      }\n    });\n  }\n\n}\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrStackInput = /*#__PURE__*/(() => {\n  class ClrStackInput extends StackControl {\n    constructor(stackView) {\n      super(stackView);\n      this.stackView = stackView;\n      this.type = 'text';\n    }\n\n  }\n\n  ClrStackInput.ɵfac = function ClrStackInput_Factory(t) {\n    return new (t || ClrStackInput)(ɵngcc0.ɵɵdirectiveInject(ClrStackView));\n  };\n\n  ClrStackInput.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ClrStackInput,\n    selectors: [[\"clr-stack-input\"]],\n    inputs: {\n      model: [\"clrModel\", \"model\"],\n      type: \"type\"\n    },\n    outputs: {\n      modelChange: \"clrModelChange\"\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    decls: 2,\n    vars: 2,\n    consts: [[4, \"ngIf\"], [3, \"type\", \"ngModel\", \"ngModelChange\", 4, \"ngIf\"], [3, \"type\", \"ngModel\", \"ngModelChange\"]],\n    template: function ClrStackInput_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, ClrStackInput_span_0_Template, 2, 1, \"span\", 0);\n        ɵngcc0.ɵɵtemplate(1, ClrStackInput_input_1_Template, 1, 2, \"input\", 1);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.stackView.editing);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.stackView.editing);\n      }\n    },\n    directives: [ɵngcc1.NgIf, ɵngcc2.DefaultValueAccessor, ɵngcc2.NgControlStatus, ɵngcc2.NgModel],\n    encapsulation: 2\n  });\n  return ClrStackInput;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrStackSelect = /*#__PURE__*/(() => {\n  class ClrStackSelect extends StackControl {\n    constructor(stackView) {\n      super(stackView);\n      this.stackView = stackView;\n    }\n\n  }\n\n  ClrStackSelect.ɵfac = function ClrStackSelect_Factory(t) {\n    return new (t || ClrStackSelect)(ɵngcc0.ɵɵdirectiveInject(ClrStackView));\n  };\n\n  ClrStackSelect.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ClrStackSelect,\n    selectors: [[\"clr-stack-select\"]],\n    inputs: {\n      model: [\"clrModel\", \"model\"]\n    },\n    outputs: {\n      modelChange: \"clrModelChange\"\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c0,\n    decls: 2,\n    vars: 2,\n    consts: [[4, \"ngIf\"], [\"class\", \"select\", 4, \"ngIf\"], [1, \"select\"], [3, \"ngModel\", \"ngModelChange\"]],\n    template: function ClrStackSelect_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵtemplate(0, ClrStackSelect_span_0_Template, 2, 1, \"span\", 0);\n        ɵngcc0.ɵɵtemplate(1, ClrStackSelect_div_1_Template, 3, 1, \"div\", 1);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.stackView.editing);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.stackView.editing);\n      }\n    },\n    directives: [ɵngcc1.NgIf, ɵngcc2.SelectControlValueAccessor, ɵngcc2.NgControlStatus, ɵngcc2.NgModel],\n    encapsulation: 2\n  });\n  return ClrStackSelect;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nconst CLR_STACK_VIEW_DIRECTIVES = [ClrStackView, ClrStackHeader, ClrStackBlock, ClrStackContentInput, ClrStackViewLabel, ClrStackViewCustomTags,\n/**\n * Undocumented experimental feature: inline editing.\n */\nClrStackInput, ClrStackSelect\n/**\n * End of undocumented experimental feature.\n */\n];\nlet ClrStackViewModule = /*#__PURE__*/(() => {\n  class ClrStackViewModule {\n    constructor() {\n      ClarityIcons.addIcons(angleIcon);\n    }\n\n  }\n\n  ClrStackViewModule.ɵfac = function ClrStackViewModule_Factory(t) {\n    return new (t || ClrStackViewModule)();\n  };\n\n  ClrStackViewModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: ClrStackViewModule\n  });\n  ClrStackViewModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule, FormsModule, ClrIconModule, ClrExpandableAnimationModule]]\n  });\n  return ClrStackViewModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ClrStackViewModule, {\n    declarations: function () {\n      return [ClrStackView, ClrStackHeader, ClrStackBlock, ClrStackContentInput, ClrStackViewLabel, ClrStackViewCustomTags, ClrStackInput, ClrStackSelect];\n    },\n    imports: function () {\n      return [CommonModule, FormsModule, ClrIconModule, ClrExpandableAnimationModule];\n    },\n    exports: function () {\n      return [ClrStackView, ClrStackHeader, ClrStackBlock, ClrStackContentInput, ClrStackViewLabel, ClrStackViewCustomTags, ClrStackInput, ClrStackSelect];\n    }\n  });\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet TreeFeaturesService = /*#__PURE__*/(() => {\n  class TreeFeaturesService {\n    constructor() {\n      this.selectable = false;\n      this.eager = true;\n      this.childrenFetched = new Subject();\n    }\n\n  }\n\n  TreeFeaturesService.ɵfac = function TreeFeaturesService_Factory(t) {\n    return new (t || TreeFeaturesService)();\n  };\n\n  TreeFeaturesService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: TreeFeaturesService,\n    factory: TreeFeaturesService.ɵfac\n  });\n  return TreeFeaturesService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nfunction treeFeaturesFactory(existing) {\n  return existing || new TreeFeaturesService();\n}\n\nconst TREE_FEATURES_PROVIDER = {\n  provide: TreeFeaturesService,\n  useFactory: treeFeaturesFactory,\n\n  /*\n   * The Optional + SkipSelf pattern ensures that in case of nested components, only the root one will\n   * instantiate a new service and all its children will reuse the root's instance.\n   * If there are several roots (in this case, several independent trees on a page), each root will instantiate\n   * its own service so they won't interfere with one another.\n   *\n   * TL;DR - Optional + SkipSelf = 1 instance of TreeFeaturesService per tree.\n   */\n  deps: [[new Optional(), new SkipSelf(), TreeFeaturesService]]\n};\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/**\n * Internal component, do not export!\n * This is part of the hack to get around https://github.com/angular/angular/issues/15998\n */\n\nlet RecursiveChildren = /*#__PURE__*/(() => {\n  class RecursiveChildren {\n    constructor(featuresService, expandService) {\n      this.featuresService = featuresService;\n      this.expandService = expandService;\n\n      if (expandService) {\n        this.subscription = this.expandService.expandChange.subscribe(value => {\n          if (!value && this.parent && !this.featuresService.eager && this.featuresService.recursion) {\n            // In the case of lazy-loading recursive trees, we clear the children on collapse.\n            // This is better in case they change between two user interaction, and that way\n            // the app itself can decide whether to cache them or not.\n            this.parent.clearChildren();\n          }\n        });\n      }\n    }\n\n    shouldRender() {\n      return this.featuresService.recursion && ( // In the smart case, we eagerly render all the recursive children\n      // to make sure two-way bindings for selection are available.\n      // They will be hidden with CSS by the parent.\n      this.featuresService.eager || !this.expandService || this.expandService.expanded);\n    }\n\n    getContext(node) {\n      return {\n        $implicit: node.model,\n        clrModel: node\n      };\n    }\n\n    ngOnDestroy() {\n      if (this.subscription) {\n        this.subscription.unsubscribe();\n      }\n    }\n\n  }\n\n  RecursiveChildren.ɵfac = function RecursiveChildren_Factory(t) {\n    return new (t || RecursiveChildren)(ɵngcc0.ɵɵdirectiveInject(TreeFeaturesService), ɵngcc0.ɵɵdirectiveInject(IfExpandService, 8));\n  };\n\n  RecursiveChildren.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: RecursiveChildren,\n    selectors: [[\"clr-recursive-children\"]],\n    hostVars: 1,\n    hostBindings: function RecursiveChildren_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"role\", \"group\");\n      }\n    },\n    inputs: {\n      parent: \"parent\",\n      children: \"children\"\n    },\n    decls: 1,\n    vars: 1,\n    consts: [[4, \"ngIf\"], [4, \"ngFor\", \"ngForOf\"], [4, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"]],\n    template: function RecursiveChildren_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, RecursiveChildren_ng_container_0_Template, 2, 1, \"ng-container\", 0);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.shouldRender());\n      }\n    },\n    directives: [ɵngcc1.NgIf, ɵngcc1.NgForOf, ɵngcc1.NgTemplateOutlet],\n    encapsulation: 2\n  });\n  return RecursiveChildren;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nfunction isPromise(o) {\n  // Shamelessly copied from every open-source project out there.\n  return o && typeof o.then === 'function';\n}\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n// TODO: I'd like this to be a CheckedState enum for the checkboxes in the future.\n\n\nvar ClrSelectedState = /*#__PURE__*/(() => {\n  (function (ClrSelectedState) {\n    // WARNING! Unselected has the value 0,\n    // so it's actually the only one that will evaluate to false if cast to a boolean.\n    // Don't mess with the order!\n    ClrSelectedState[ClrSelectedState[\"UNSELECTED\"] = 0] = \"UNSELECTED\";\n    ClrSelectedState[ClrSelectedState[\"SELECTED\"] = 1] = \"SELECTED\";\n    ClrSelectedState[ClrSelectedState[\"INDETERMINATE\"] = 2] = \"INDETERMINATE\";\n  })(ClrSelectedState || (ClrSelectedState = {}));\n\n  return ClrSelectedState;\n})();\n\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nclass TreeNodeModel {\n  constructor() {\n    this.selected = new BehaviorSubject(ClrSelectedState.UNSELECTED);\n    /*\n     * Being able to push this down to the RecursiveTreeNodeModel would require too much work on the angular components\n     * right now for them to know which kind of model they are using. So I'm lifting the public properties to this\n     * abstract parent class for now and we can revisit it later, when we're not facing such a close deadline.\n     */\n\n    this._loading = false;\n    this.loading$ = new BehaviorSubject(false);\n  }\n\n  get loading() {\n    return this._loading;\n  }\n\n  set loading(isLoading) {\n    this._loading = isLoading;\n    this.loading$.next(isLoading);\n  }\n\n  destroy() {\n    // Just to be safe\n    this.selected.complete();\n  } // Propagate by default when eager, don't propagate in the lazy-loaded tree.\n\n\n  setSelected(state, propagateUp, propagateDown) {\n    if (state === this.selected.value) {\n      return;\n    }\n\n    this.selected.next(state);\n\n    if (propagateDown && state !== ClrSelectedState.INDETERMINATE && this.children) {\n      this.children.forEach(child => child.setSelected(state, false, true));\n    }\n\n    if (propagateUp && this.parent) {\n      this.parent._updateSelectionFromChildren();\n    }\n  }\n\n  toggleSelection(propagate) {\n    // Both unselected and indeterminate toggle to selected\n    const newState = this.selected.value === ClrSelectedState.SELECTED ? ClrSelectedState.UNSELECTED : ClrSelectedState.SELECTED; // NOTE: we always propagate selection up in this method because it is only called when the user takes an action.\n    // It should never be called from lifecycle hooks or app-provided inputs.\n\n    this.setSelected(newState, true, propagate);\n  }\n\n  computeSelectionStateFromChildren() {\n    let oneSelected = false;\n    let oneUnselected = false; // Using a good old for loop to exit as soon as we can tell, for better performance on large trees.\n\n    for (const child of this.children) {\n      switch (child.selected.value) {\n        case ClrSelectedState.INDETERMINATE:\n          return ClrSelectedState.INDETERMINATE;\n\n        case ClrSelectedState.SELECTED:\n          oneSelected = true;\n\n          if (oneUnselected) {\n            return ClrSelectedState.INDETERMINATE;\n          }\n\n          break;\n\n        case ClrSelectedState.UNSELECTED:\n        default:\n          // Default is the same as unselected, in case an undefined somehow made it all the way here.\n          oneUnselected = true;\n\n          if (oneSelected) {\n            return ClrSelectedState.INDETERMINATE;\n          }\n\n          break;\n      }\n    }\n\n    if (!oneSelected) {\n      return ClrSelectedState.UNSELECTED;\n    } else if (!oneUnselected) {\n      return ClrSelectedState.SELECTED;\n    } else {\n      return ClrSelectedState.UNSELECTED;\n    }\n  }\n  /*\n   * Internal, but needs to be called by other nodes\n   */\n\n\n  _updateSelectionFromChildren() {\n    const newState = this.computeSelectionStateFromChildren();\n\n    if (newState === this.selected.value) {\n      return;\n    }\n\n    this.selected.next(newState);\n\n    if (this.parent) {\n      this.parent._updateSelectionFromChildren();\n    }\n  }\n\n}\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/*\n * A recursive model is built received from the app and traversed to create the corresponding components.\n * Recursive = Model dictates the tree node components\n */\n\n\nclass RecursiveTreeNodeModel extends TreeNodeModel {\n  constructor(model, parent, getChildren, featuresService) {\n    super();\n    this.getChildren = getChildren;\n    this.featuresService = featuresService;\n    this.childrenFetched = false;\n    this._children = [];\n    this.model = model;\n    this.parent = parent;\n  }\n\n  clearChildren() {\n    this._children.forEach(child => child.destroy());\n\n    delete this._children;\n    this.childrenFetched = false;\n  }\n\n  fetchChildren() {\n    if (this.childrenFetched) {\n      return;\n    }\n\n    const asyncChildren = this.getChildren(this.model);\n\n    if (isPromise(asyncChildren)) {\n      this.loading = true;\n      asyncChildren.then(raw => {\n        this._children = this.wrapChildren(raw);\n        this.loading = false;\n      });\n    } else if (isObservable(asyncChildren)) {\n      this.loading = true;\n      this.subscription = asyncChildren.subscribe(raw => {\n        this._children = this.wrapChildren(raw);\n        this.loading = false;\n      });\n    } else if (asyncChildren) {\n      // Synchronous case\n      this._children = this.wrapChildren(asyncChildren);\n    } else {\n      this._children = [];\n    }\n\n    this.childrenFetched = true;\n\n    if (this.featuresService) {\n      this.featuresService.childrenFetched.next();\n    }\n  }\n\n  wrapChildren(rawModels) {\n    return rawModels.map(m => new RecursiveTreeNodeModel(m, this, this.getChildren, this.featuresService));\n  }\n\n  get children() {\n    this.fetchChildren();\n    return this._children;\n  }\n\n  set children(value) {\n    this._children = value;\n  }\n\n  destroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n\n    super.destroy();\n  }\n\n}\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrRecursiveForOf = /*#__PURE__*/(() => {\n  class ClrRecursiveForOf {\n    constructor(template, featuresService, cdr) {\n      this.template = template;\n      this.featuresService = featuresService;\n      this.cdr = cdr;\n    } // I'm using OnChanges instead of OnInit to easily keep up to date with dynamic trees. Maybe optimizable later.\n\n\n    ngOnChanges() {\n      let wrapped;\n\n      if (Array.isArray(this.nodes)) {\n        wrapped = this.nodes.map(node => new RecursiveTreeNodeModel(node, null, this.getChildren, this.featuresService));\n      } else {\n        wrapped = [new RecursiveTreeNodeModel(this.nodes, null, this.getChildren, this.featuresService)];\n      }\n\n      if (!this.childrenFetchSubscription) {\n        this.childrenFetchSubscription = this.featuresService.childrenFetched.pipe(debounceTime(0)).subscribe(() => {\n          this.cdr.detectChanges();\n        });\n      }\n\n      this.featuresService.recursion = {\n        template: this.template,\n        root: wrapped\n      };\n    }\n\n    ngOnDestroy() {\n      if (this.childrenFetchSubscription) {\n        this.childrenFetchSubscription.unsubscribe();\n      }\n    }\n\n  }\n\n  ClrRecursiveForOf.ɵfac = function ClrRecursiveForOf_Factory(t) {\n    return new (t || ClrRecursiveForOf)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(TreeFeaturesService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef));\n  };\n\n  ClrRecursiveForOf.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: ClrRecursiveForOf,\n    selectors: [[\"\", \"clrRecursiveFor\", \"\", \"clrRecursiveForOf\", \"\"]],\n    inputs: {\n      nodes: [\"clrRecursiveForOf\", \"nodes\"],\n      getChildren: [\"clrRecursiveForGetChildren\", \"getChildren\"]\n    },\n    features: [ɵngcc0.ɵɵNgOnChangesFeature]\n  });\n  return ClrRecursiveForOf;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet TreeFocusManagerService = /*#__PURE__*/(() => {\n  class TreeFocusManagerService {\n    constructor() {\n      this._focusRequest = new Subject();\n      this._focusChange = new Subject();\n    }\n\n    get focusRequest() {\n      return this._focusRequest.asObservable();\n    }\n\n    get focusChange() {\n      return this._focusChange.asObservable();\n    }\n\n    findSiblings(model) {\n      // the method will return not only sibling models but also itself among them\n      if (model.parent) {\n        return model.parent.children;\n      } else {\n        return this.rootNodeModels;\n      }\n    }\n\n    findLastVisibleInNode(model) {\n      // the method will traverse through until it finds the last visible node from the given node\n      if (!model) {\n        return null;\n      }\n\n      if (model.expanded && model.children.length > 0) {\n        const children = model.children;\n        const lastChild = children[children.length - 1];\n        return this.findLastVisibleInNode(lastChild);\n      } else {\n        return model;\n      }\n    }\n\n    findNextFocusable(model) {\n      if (!model) {\n        return null;\n      }\n\n      const siblings = this.findSiblings(model);\n      const selfIndex = siblings.indexOf(model);\n\n      if (selfIndex < siblings.length - 1) {\n        return siblings[selfIndex + 1];\n      } else if (selfIndex === siblings.length - 1) {\n        return this.findNextFocusable(model.parent);\n      }\n\n      return null;\n    }\n\n    findLastVisibleInTree() {\n      const lastRootNode = this.rootNodeModels && this.rootNodeModels.length && this.rootNodeModels[this.rootNodeModels.length - 1];\n      return this.findLastVisibleInNode(lastRootNode);\n    }\n\n    findNodeAbove(model) {\n      if (!model) {\n        return null;\n      }\n\n      const siblings = this.findSiblings(model);\n      const selfIndex = siblings.indexOf(model);\n\n      if (selfIndex === 0) {\n        return model.parent;\n      } else if (selfIndex > 0) {\n        return this.findLastVisibleInNode(siblings[selfIndex - 1]);\n      }\n\n      return null;\n    }\n\n    findNodeBelow(model) {\n      if (!model) {\n        return null;\n      }\n\n      if (model.expanded && model.children.length > 0) {\n        return model.children[0];\n      } else {\n        return this.findNextFocusable(model);\n      }\n    }\n\n    focusNode(model) {\n      if (model) {\n        this._focusRequest.next(model.nodeId);\n      }\n    }\n\n    broadcastFocusedNode(nodeId) {\n      if (this.focusedNodeId !== nodeId) {\n        this.focusedNodeId = nodeId;\n\n        this._focusChange.next(nodeId);\n      }\n    }\n\n    focusParent(model) {\n      if (model) {\n        this.focusNode(model.parent);\n      }\n    }\n\n    focusFirstVisibleNode() {\n      const focusModel = this.rootNodeModels && this.rootNodeModels[0];\n      this.focusNode(focusModel);\n    }\n\n    focusLastVisibleNode() {\n      this.focusNode(this.findLastVisibleInTree());\n    }\n\n    focusNodeAbove(model) {\n      this.focusNode(this.findNodeAbove(model));\n    }\n\n    focusNodeBelow(model) {\n      this.focusNode(this.findNodeBelow(model));\n    }\n\n  }\n\n  TreeFocusManagerService.ɵfac = function TreeFocusManagerService_Factory(t) {\n    return new (t || TreeFocusManagerService)();\n  };\n\n  TreeFocusManagerService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: TreeFocusManagerService,\n    factory: TreeFocusManagerService.ɵfac\n  });\n  return TreeFocusManagerService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/*\n * A declarative model is built by traversing the Angular component tree.\n * Declarative = Tree node components dictate the model\n */\n\n\nclass DeclarativeTreeNodeModel extends TreeNodeModel {\n  constructor(parent) {\n    super();\n    this.parent = parent;\n\n    if (parent) {\n      parent._addChild(this);\n    }\n\n    this.children = [];\n  }\n\n  _addChild(child) {\n    this.children.push(child);\n  }\n\n  _removeChild(child) {\n    const index = this.children.indexOf(child);\n\n    if (index > -1) {\n      this.children.splice(index, 1);\n    }\n  }\n\n  destroy() {\n    if (this.parent) {\n      this.parent._removeChild(this);\n    }\n\n    super.destroy();\n  }\n\n}\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrTreeNodeLink = /*#__PURE__*/(() => {\n  class ClrTreeNodeLink {\n    constructor(el) {\n      this.el = el;\n    }\n\n    activate() {\n      if (this.el.nativeElement && this.el.nativeElement.click) {\n        this.el.nativeElement.click();\n      }\n    }\n\n  }\n\n  ClrTreeNodeLink.ɵfac = function ClrTreeNodeLink_Factory(t) {\n    return new (t || ClrTreeNodeLink)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  ClrTreeNodeLink.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: ClrTreeNodeLink,\n    selectors: [[\"\", 8, \"clr-treenode-link\"]]\n  });\n  return ClrTreeNodeLink;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nconst LVIEW_CONTEXT_INDEX = 8;\nlet ClrTreeNode = /*#__PURE__*/(() => {\n  class ClrTreeNode {\n    constructor(nodeId, platformId, parent, featuresService, expandService, commonStrings, focusManager, injector) {\n      this.nodeId = nodeId;\n      this.platformId = platformId;\n      this.featuresService = featuresService;\n      this.expandService = expandService;\n      this.commonStrings = commonStrings;\n      this.focusManager = focusManager;\n      this.STATES = ClrSelectedState;\n      this.skipEmitChange = false;\n      this.isModelLoading = false;\n      this.selectedChange = new EventEmitter(false);\n      this.expandedChange = new EventEmitter();\n      this.subscriptions = [];\n      this.contentContainerTabindex = -1;\n\n      if (this.featuresService.recursion) {\n        // I'm completely stuck, we have to hack into private properties until either\n        // https://github.com/angular/angular/issues/14935 or https://github.com/angular/angular/issues/15998\n        // are fixed\n        // This is for non-ivy implementations\n        if (injector.view) {\n          this._model = injector.view.context.clrModel;\n        } else {\n          // Ivy puts this on a specific index of a _lView property\n          this._model = injector._lView[LVIEW_CONTEXT_INDEX].clrModel;\n        }\n      } else {\n        // Force cast for now, not sure how to tie the correct type here to featuresService.recursion\n        this._model = new DeclarativeTreeNodeModel(parent ? parent._model : null);\n      }\n\n      this._model.nodeId = this.nodeId;\n    }\n\n    isExpandable() {\n      if (typeof this.expandable !== 'undefined') {\n        return this.expandable;\n      }\n\n      return !!this.expandService.expandable || this._model.children && this._model.children.length > 0;\n    }\n\n    get selected() {\n      return this._model.selected.value;\n    }\n\n    set selected(value) {\n      this.featuresService.selectable = true; // Gracefully handle falsy states like null or undefined because it's just easier than answering questions.\n      // This shouldn't happen with strict typing on the app's side, but it's not up to us.\n\n      if (value === null || typeof value === 'undefined') {\n        value = ClrSelectedState.UNSELECTED;\n      } // We match booleans to the corresponding ClrSelectedState\n\n\n      if (typeof value === 'boolean') {\n        value = value ? ClrSelectedState.SELECTED : ClrSelectedState.UNSELECTED;\n      } // We propagate only if the tree is in smart mode, and skip emitting the output when we set the input\n      // See https://github.com/vmware/clarity/issues/3073\n\n\n      this.skipEmitChange = true;\n\n      this._model.setSelected(value, this.featuresService.eager, this.featuresService.eager);\n\n      this.skipEmitChange = false;\n    }\n\n    get ariaSelected() {\n      return this.featuresService.selectable ? this._model.selected.value === ClrSelectedState.SELECTED : null;\n    } // I'm caving on this, for tree nodes I think we can tolerate having a two-way binding on the component\n    // rather than enforce the clrIfExpanded structural directive for dynamic cases. Mostly because for the smart\n    // case, you can't use a structural directive, it would need to go on an ng-container.\n\n\n    get expanded() {\n      return this.expandService.expanded;\n    }\n\n    set expanded(value) {\n      this.expandService.expanded = value;\n    }\n\n    ngOnInit() {\n      this._model.expanded = this.expanded;\n      this.subscriptions.push(this._model.selected.pipe(filter(() => !this.skipEmitChange)).subscribe(value => {\n        this.selectedChange.emit(value);\n      }));\n      this.subscriptions.push(this.expandService.expandChange.subscribe(value => {\n        this.expandedChange.emit(value);\n        this._model.expanded = value;\n      }));\n      this.subscriptions.push(this.focusManager.focusRequest.subscribe(nodeId => {\n        if (this.nodeId === nodeId) {\n          this.focusTreeNode();\n        }\n      }), this.focusManager.focusChange.subscribe(nodeId => {\n        this.checkTabIndex(nodeId);\n      }));\n      this.subscriptions.push(this._model.loading$.pipe(debounceTime(0)).subscribe(isLoading => this.isModelLoading = isLoading));\n    }\n\n    ngOnDestroy() {\n      this._model.destroy();\n\n      this.subscriptions.forEach(sub => sub.unsubscribe());\n    }\n\n    get treeNodeLink() {\n      return this.treeNodeLinkList && this.treeNodeLinkList.first;\n    }\n\n    setTabIndex(value) {\n      this.contentContainerTabindex = value;\n      this.contentContainer.nativeElement.setAttribute('tabindex', value);\n    }\n\n    checkTabIndex(nodeId) {\n      if (isPlatformBrowser(this.platformId) && this.nodeId !== nodeId && this.contentContainerTabindex !== -1) {\n        this.setTabIndex(-1);\n      }\n    }\n\n    focusTreeNode() {\n      if (isPlatformBrowser(this.platformId) && document.activeElement !== this.contentContainer.nativeElement) {\n        this.setTabIndex(0);\n        this.contentContainer.nativeElement.focus();\n      }\n    }\n\n    broadcastFocusOnContainer() {\n      this.focusManager.broadcastFocusedNode(this.nodeId);\n    }\n\n    onKeyDown(event) {\n      // Two reasons to prevent default behavior:\n      // 1. to prevent scrolling on arrow keys\n      // 2. Assistive Technology focus differs from Keyboard focus behavior.\n      //    By default, pressing arrow key makes AT focus go into the nested content of the item.\n      preventArrowKeyScroll(event); // https://www.w3.org/TR/wai-aria-practices-1.1/#keyboard-interaction-22\n\n      switch (keyValidator(event.key)) {\n        case KeyCodes.ArrowUp:\n          this.focusManager.focusNodeAbove(this._model);\n          break;\n\n        case KeyCodes.ArrowDown:\n          this.focusManager.focusNodeBelow(this._model);\n          break;\n\n        case KeyCodes.ArrowRight:\n          this.expandOrFocusFirstChild();\n          break;\n\n        case KeyCodes.ArrowLeft:\n          this.collapseOrFocusParent();\n          break;\n\n        case KeyCodes.Home:\n          this.focusManager.focusFirstVisibleNode();\n          break;\n\n        case KeyCodes.End:\n          this.focusManager.focusLastVisibleNode();\n          break;\n\n        case KeyCodes.Enter:\n          this.triggerDefaultAction();\n          break;\n\n        case KeyCodes.Space:\n          // to prevent scrolling on space key in this specific case\n          event.preventDefault();\n          this.triggerDefaultAction();\n          break;\n\n        default:\n          break;\n      }\n    }\n\n    expandOrFocusFirstChild() {\n      if (this.expanded) {\n        // if the node is already expanded and has children, focus its very first child\n        if (this._model.children.length > 0) {\n          this.focusManager.focusNodeBelow(this._model);\n        }\n      } else {\n        // we must check if the node is expandable, in order to set .expanded to true from false\n        // because we shouldn't set .expanded to true if it's not expandable node\n        if (this.isExpandable()) {\n          this.expandService.expanded = true;\n        }\n      }\n    }\n\n    collapseOrFocusParent() {\n      if (this.expanded) {\n        this.expandService.expanded = false;\n      } else {\n        this.focusManager.focusParent(this._model);\n      }\n    }\n\n    triggerDefaultAction() {\n      if (this.treeNodeLink) {\n        this.treeNodeLink.activate();\n      } else {\n        if (this.featuresService.selectable) {\n          this._model.toggleSelection(this.featuresService.eager);\n        }\n      }\n    }\n\n  }\n\n  ClrTreeNode.ɵfac = function ClrTreeNode_Factory(t) {\n    return new (t || ClrTreeNode)(ɵngcc0.ɵɵdirectiveInject(UNIQUE_ID), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID), ɵngcc0.ɵɵdirectiveInject(ClrTreeNode, 12), ɵngcc0.ɵɵdirectiveInject(TreeFeaturesService), ɵngcc0.ɵɵdirectiveInject(IfExpandService), ɵngcc0.ɵɵdirectiveInject(ClrCommonStringsService), ɵngcc0.ɵɵdirectiveInject(TreeFocusManagerService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector));\n  };\n\n  ClrTreeNode.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ClrTreeNode,\n    selectors: [[\"clr-tree-node\"]],\n    contentQueries: function ClrTreeNode_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, ClrTreeNodeLink, 4);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.treeNodeLinkList = _t);\n      }\n    },\n    viewQuery: function ClrTreeNode_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c82, 7, ElementRef);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.contentContainer = _t.first);\n      }\n    },\n    hostVars: 2,\n    hostBindings: function ClrTreeNode_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"clr-tree-node\", true);\n      }\n    },\n    inputs: {\n      selected: [\"clrSelected\", \"selected\"],\n      expanded: [\"clrExpanded\", \"expanded\"],\n      expandable: [\"clrExpandable\", \"expandable\"]\n    },\n    outputs: {\n      selectedChange: \"clrSelectedChange\",\n      expandedChange: \"clrExpandedChange\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([UNIQUE_ID_PROVIDER, TREE_FEATURES_PROVIDER, IfExpandService, {\n      provide: LoadingListener,\n      useExisting: IfExpandService\n    }])],\n    ngContentSelectors: _c84,\n    decls: 12,\n    vars: 9,\n    consts: [[\"role\", \"treeitem\", \"tabindex\", \"-1\", 1, \"clr-tree-node-content-container\", 3, \"keydown\", \"focus\"], [\"contentContainer\", \"\"], [\"aria-hidden\", \"true\", \"type\", \"button\", \"tabindex\", \"-1\", \"class\", \"clr-treenode-caret\", 3, \"click\", \"focus\", 4, \"ngIf\"], [\"class\", \"clr-treenode-spinner-container\", 4, \"ngIf\"], [\"class\", \"clr-checkbox-wrapper clr-treenode-checkbox\", 4, \"ngIf\"], [1, \"clr-treenode-content\", 3, \"mousedown\"], [\"class\", \"clr-sr-only\", 4, \"ngIf\"], [1, \"clr-treenode-children\"], [3, \"parent\"], [\"aria-hidden\", \"true\", \"type\", \"button\", \"tabindex\", \"-1\", 1, \"clr-treenode-caret\", 3, \"click\", \"focus\"], [\"shape\", \"angle\", 1, \"clr-treenode-caret-icon\"], [1, \"clr-treenode-spinner-container\"], [1, \"clr-treenode-spinner\", \"spinner\"], [1, \"clr-checkbox-wrapper\", \"clr-treenode-checkbox\"], [\"aria-hidden\", \"true\", \"type\", \"checkbox\", \"tabindex\", \"-1\", 1, \"clr-checkbox\", 3, \"id\", \"checked\", \"indeterminate\", \"change\", \"focus\"], [1, \"clr-control-label\", 3, \"for\"], [1, \"clr-sr-only\"], [4, \"ngIf\"]],\n    template: function ClrTreeNode_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c83);\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0, 1);\n        ɵngcc0.ɵɵlistener(\"keydown\", function ClrTreeNode_Template_div_keydown_0_listener($event) {\n          return ctx.onKeyDown($event);\n        })(\"focus\", function ClrTreeNode_Template_div_focus_0_listener() {\n          return ctx.broadcastFocusOnContainer();\n        });\n        ɵngcc0.ɵɵtemplate(2, ClrTreeNode_button_2_Template, 2, 1, \"button\", 2);\n        ɵngcc0.ɵɵtemplate(3, ClrTreeNode_div_3_Template, 2, 0, \"div\", 3);\n        ɵngcc0.ɵɵtemplate(4, ClrTreeNode_div_4_Template, 3, 4, \"div\", 4);\n        ɵngcc0.ɵɵelementStart(5, \"div\", 5);\n        ɵngcc0.ɵɵlistener(\"mousedown\", function ClrTreeNode_Template_div_mousedown_5_listener() {\n          return ctx.focusTreeNode();\n        });\n        ɵngcc0.ɵɵprojection(6);\n        ɵngcc0.ɵɵtemplate(7, ClrTreeNode_div_7_Template, 3, 2, \"div\", 6);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(8, \"div\", 7);\n        ɵngcc0.ɵɵprojection(9, 1);\n        ɵngcc0.ɵɵprojection(10, 2);\n        ɵngcc0.ɵɵelement(11, \"clr-recursive-children\", 8);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-expanded\", ctx.isExpandable() ? ctx.expanded : null)(\"aria-selected\", ctx.ariaSelected);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.isExpandable() && !ctx.isModelLoading && !ctx.expandService.loading);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.expandService.loading || ctx.isModelLoading);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.featuresService.selectable);\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.featuresService.selectable);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"@toggleChildrenAnim\", ctx.expandService.expanded ? \"expanded\" : \"collapsed\");\n        ɵngcc0.ɵɵattribute(\"role\", ctx.isExpandable() && !ctx.featuresService.recursion ? \"group\" : null);\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"parent\", ctx._model);\n      }\n    },\n    directives: [ɵngcc1.NgIf, RecursiveChildren, CdsIconCustomTag],\n    encapsulation: 2,\n    data: {\n      animation: [trigger('toggleChildrenAnim', [transition('collapsed => expanded', [style({\n        height: 0\n      }), animate(200, style({\n        height: '*'\n      }))]), transition('expanded => collapsed', [style({\n        height: '*'\n      }), animate(200, style({\n        height: 0\n      }))]), state('expanded', style({\n        height: '*',\n        'overflow-y': 'visible'\n      })), state('collapsed', style({\n        height: 0\n      }))])]\n    }\n  });\n  return ClrTreeNode;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrTree = /*#__PURE__*/(() => {\n  class ClrTree {\n    constructor(featuresService, focusManagerService, el) {\n      this.featuresService = featuresService;\n      this.focusManagerService = focusManagerService;\n      this.el = el;\n      this.subscriptions = [];\n      this.tabindex = 0;\n    }\n\n    set lazy(value) {\n      this.featuresService.eager = !value;\n    }\n\n    get isMultiSelectable() {\n      return this.featuresService.selectable && this.rootNodes.length > 0;\n    }\n\n    onFocusIn(event) {\n      if (event.target === this.el.nativeElement) {\n        // After discussing with the team, I've made it so that when the tree receives focus, the first visible node will be focused.\n        // This will prevent from the page scrolling abruptly to the first selected node if it exist in a deeply nested tree.\n        this.focusManagerService.focusFirstVisibleNode(); // when the first child gets focus,\n        // tree should no longer have tabindex of 0;\n\n        delete this.tabindex;\n      }\n    }\n\n    ngAfterContentInit() {\n      this.setRootNodes();\n      this.subscriptions.push(this.rootNodes.changes.subscribe(() => {\n        this.setRootNodes();\n      }));\n    }\n\n    setRootNodes() {\n      // if node has no parent, it's a root node\n      // for recursive tree, this.rootNodes registers also nested children\n      // so we have to use filter to extract the ones that are truly root nodes\n      this.focusManagerService.rootNodeModels = this.rootNodes.map(node => node._model).filter(node => !node.parent);\n    }\n\n    ngOnDestroy() {\n      this.subscriptions.forEach(sub => sub.unsubscribe());\n    }\n\n  }\n\n  ClrTree.ɵfac = function ClrTree_Factory(t) {\n    return new (t || ClrTree)(ɵngcc0.ɵɵdirectiveInject(TreeFeaturesService), ɵngcc0.ɵɵdirectiveInject(TreeFocusManagerService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef));\n  };\n\n  ClrTree.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ClrTree,\n    selectors: [[\"clr-tree\"]],\n    contentQueries: function ClrTree_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, ClrTreeNode, 4);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.rootNodes = _t);\n      }\n    },\n    hostVars: 3,\n    hostBindings: function ClrTree_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"focusin\", function ClrTree_focusin_HostBindingHandler($event) {\n          return ctx.onFocusIn($event);\n        });\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"tabindex\", ctx.tabindex)(\"role\", \"tree\")(\"aria-multiselectable\", ctx.isMultiSelectable);\n      }\n    },\n    inputs: {\n      lazy: [\"clrLazy\", \"lazy\"]\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([TREE_FEATURES_PROVIDER, TreeFocusManagerService])],\n    ngContentSelectors: _c0,\n    decls: 2,\n    vars: 1,\n    consts: [[3, \"children\", 4, \"ngIf\"], [3, \"children\"]],\n    template: function ClrTree_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n        ɵngcc0.ɵɵtemplate(1, ClrTree_clr_recursive_children_1_Template, 1, 1, \"clr-recursive-children\", 0);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.featuresService.recursion);\n      }\n    },\n    directives: [ɵngcc1.NgIf, RecursiveChildren],\n    encapsulation: 2\n  });\n  return ClrTree;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nconst CLR_TREE_VIEW_DIRECTIVES = [ClrTree, ClrTreeNode, ClrRecursiveForOf, ClrTreeNodeLink];\nlet ClrTreeViewModule = /*#__PURE__*/(() => {\n  class ClrTreeViewModule {\n    constructor() {\n      ClarityIcons.addIcons(angleIcon);\n    }\n\n  }\n\n  ClrTreeViewModule.ɵfac = function ClrTreeViewModule_Factory(t) {\n    return new (t || ClrTreeViewModule)();\n  };\n\n  ClrTreeViewModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: ClrTreeViewModule\n  });\n  ClrTreeViewModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule, ClrIconModule, ClrLoadingModule]]\n  });\n  return ClrTreeViewModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ClrTreeViewModule, {\n    declarations: function () {\n      return [ClrTree, ClrTreeNode, ClrRecursiveForOf, ClrTreeNodeLink, RecursiveChildren];\n    },\n    imports: function () {\n      return [CommonModule, ClrIconModule, ClrLoadingModule];\n    },\n    exports: function () {\n      return [ClrTree, ClrTreeNode, ClrRecursiveForOf, ClrTreeNodeLink];\n    }\n  });\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrDataModule = /*#__PURE__*/(() => {\n  class ClrDataModule {}\n\n  ClrDataModule.ɵfac = function ClrDataModule_Factory(t) {\n    return new (t || ClrDataModule)();\n  };\n\n  ClrDataModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: ClrDataModule\n  });\n  ClrDataModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [ClrDatagridModule, ClrStackViewModule, ClrTreeViewModule]\n  });\n  return ClrDataModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ClrDataModule, {\n    exports: [ClrDatagridModule, ClrStackViewModule, ClrTreeViewModule]\n  });\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nclass Linkers {\n  /**\n   * Links a set of focusable items to a parent along one direction\n   */\n  static linkParent(items, parent, direction) {\n    items.forEach(item => item[direction] = parent);\n  }\n  /**\n   * Double-links a set of focusable items vertically, possibly looping\n   */\n\n\n  static linkVertical(items, loop = true) {\n    items.forEach((item, index) => {\n      if (index > 0) {\n        item.up = items[index - 1];\n      }\n\n      if (index < items.length - 1) {\n        item.down = items[index + 1];\n      }\n    });\n\n    if (loop && items.length > 1) {\n      items[0].up = items[items.length - 1];\n      items[items.length - 1].down = items[0];\n    }\n  }\n\n} // Right now I only need the two linkers above, but we can easily add more linkers. A couple examples:\n// export function linkHorizontal(items: FocusableItem[], loop = true);\n// export function linkTable(items: FocusableItem[][]);\n\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nfunction wrapObservable(observable, onSubscribe, onUnsubscribe) {\n  return Observable.create(observer => {\n    onSubscribe(observer);\n    const subscription = observable.subscribe(observer);\n    return () => {\n      subscription.unsubscribe();\n\n      if (onUnsubscribe) {\n        onUnsubscribe(observer);\n      }\n    };\n  });\n}\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet DropdownFocusHandler = /*#__PURE__*/(() => {\n  class DropdownFocusHandler {\n    constructor(id, renderer, parent, toggleService, focusService, platformId) {\n      this.id = id;\n      this.renderer = renderer;\n      this.parent = parent;\n      this.toggleService = toggleService;\n      this.focusService = focusService;\n      this.platformId = platformId;\n      this._unlistenFuncs = [];\n      this.focusBackOnTrigger = false;\n      this.resetChildren();\n      this.moveToFirstItemWhenOpen();\n\n      if (!this.parent) {\n        this.handleRootFocus();\n      }\n    }\n    /**\n     * If the dropdown was opened by clicking on the trigger, we automatically move to the first item\n     */\n\n\n    moveToFirstItemWhenOpen() {\n      this.toggleService.openChange.subscribe(open => {\n        if (open && this.toggleService.originalEvent) {\n          // Even if we properly waited for ngAfterViewInit, the container still wouldn't be attached to the DOM.\n          // So setTimeout is the only way to wait for the container to be ready to move focus to first item.\n          setTimeout(() => {\n            this.focusService.moveTo(this);\n\n            if (this.parent) {\n              this.focusService.move(ArrowKeyDirection.RIGHT);\n            } else {\n              this.focusService.move(ArrowKeyDirection.DOWN);\n            }\n          });\n        }\n      });\n    }\n    /**\n     * Focus on the menu when it opens, and focus back on the root trigger when the whole dropdown becomes closed\n     */\n\n\n    handleRootFocus() {\n      this.toggleService.openChange.subscribe(open => {\n        if (!open) {\n          // We reset the state of the focus service both on initialization and when closing.\n          this.focusService.reset(this); // But we only actively focus the trigger when closing, not on initialization.\n\n          if (this.focusBackOnTrigger) {\n            this.focus();\n          }\n        }\n\n        this.focusBackOnTrigger = open;\n      });\n    }\n\n    get trigger() {\n      return this._trigger;\n    }\n\n    set trigger(el) {\n      this._trigger = el;\n\n      if (this.parent) {\n        this._unlistenFuncs.push(this.renderer.listen(el, 'keydown.arrowright', event => this.toggleService.toggleWithEvent(event)));\n      } else {\n        this._unlistenFuncs.push(this.renderer.listen(el, 'keydown.arrowup', event => this.toggleService.toggleWithEvent(event)));\n\n        this._unlistenFuncs.push(this.renderer.listen(el, 'keydown.arrowdown', event => this.toggleService.toggleWithEvent(event)));\n\n        this.focusService.listenToArrowKeys(el);\n      }\n    }\n\n    get container() {\n      return this._container;\n    }\n\n    set container(el) {\n      this._container = el; // whether root container or not, tab key should always toggle (i.e. close) the container\n\n      this._unlistenFuncs.push(this.renderer.listen(el, 'keydown.tab', event => this.toggleService.toggleWithEvent(event)));\n\n      if (this.parent) {\n        // if it's a nested container, pressing esc has the same effect as pressing left key, which closes the current\n        // popup and moves up to its parent. Here, we stop propagation so that the parent container\n        // doesn't receive the esc keydown\n        this._unlistenFuncs.push(this.renderer.listen(el, 'keydown.esc', event => {\n          this.focusService.move(ArrowKeyDirection.LEFT);\n          event.stopPropagation();\n        }));\n      } else {\n        // The root container is the only one we register to the focus service, others do not need focus\n        this.focusService.registerContainer(el); // The root container will simply close the container when esc key is pressed\n\n        this._unlistenFuncs.push(this.renderer.listen(el, 'keydown.esc', event => this.toggleService.toggleWithEvent(event))); // When the user moves focus outside of the menu, we close the dropdown\n\n\n        this._unlistenFuncs.push(this.renderer.listen(el, 'blur', event => {\n          // we clear out any existing focus on the items\n          this.children.pipe(take(1)).subscribe(items => items.forEach(item => item.blur())); // event.relatedTarget is null in IE11. In that case we use document.activeElement which correctly points\n          // to the element we want to check. Note that other browsers might point document.activeElement to the\n          // wrong element. This is ok, because all the other browsers we support relies on event.relatedTarget.\n\n          const target = event.relatedTarget || document.activeElement; // If the user clicks on an item which triggers the blur, we don't want to close it since it may open a submenu.\n          // In the case of needing to close it (i.e. user selected an item and the dropdown menu is set to close on\n          // selection), dropdown-item.ts handles it.\n\n          if (target && isPlatformBrowser(this.platformId)) {\n            if (el.contains(target) || target === this.trigger) {\n              return;\n            }\n          } // We let the user move focus to where the want, we don't force the focus back on the trigger\n\n\n          this.focusBackOnTrigger = false;\n          this.toggleService.open = false;\n        }));\n      }\n    }\n\n    focus() {\n      if (this.trigger && isPlatformBrowser(this.platformId)) {\n        this.trigger.focus();\n      }\n    }\n\n    blur() {\n      if (this.trigger && isPlatformBrowser(this.platformId)) {\n        this.trigger.blur();\n      }\n    }\n\n    activate() {\n      if (isPlatformBrowser(this.platformId)) {\n        this.trigger.click();\n      }\n    }\n\n    openAndGetChildren() {\n      return wrapObservable(this.children, () => this.toggleService.open = true);\n    }\n\n    closeAndGetThis() {\n      return wrapObservable(of(this), () => this.toggleService.open = false);\n    }\n\n    resetChildren() {\n      this.children = new ReplaySubject(1);\n\n      if (this.parent) {\n        this.right = this.openAndGetChildren().pipe(map(all => all[0]));\n      } else {\n        this.down = this.openAndGetChildren().pipe(map(all => all[0]));\n        this.up = this.openAndGetChildren().pipe(map(all => all[all.length - 1]));\n      }\n    }\n\n    addChildren(children) {\n      Linkers.linkVertical(children);\n\n      if (this.parent) {\n        Linkers.linkParent(children, this.closeAndGetThis(), ArrowKeyDirection.LEFT);\n      }\n\n      this.children.next(children);\n    }\n\n    ngOnDestroy() {\n      this._unlistenFuncs.forEach(unlisten => unlisten());\n\n      this.focusService.detachListeners();\n    }\n\n  }\n\n  DropdownFocusHandler.ɵfac = function DropdownFocusHandler_Factory(t) {\n    return new (t || DropdownFocusHandler)(ɵngcc0.ɵɵinject(UNIQUE_ID), ɵngcc0.ɵɵinject(ɵngcc0.Renderer2), ɵngcc0.ɵɵinject(DropdownFocusHandler, 12), ɵngcc0.ɵɵinject(ClrPopoverToggleService), ɵngcc0.ɵɵinject(FocusService$1), ɵngcc0.ɵɵinject(PLATFORM_ID));\n  };\n\n  DropdownFocusHandler.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: DropdownFocusHandler,\n    factory: DropdownFocusHandler.ɵfac\n  });\n  return DropdownFocusHandler;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nconst DROPDOWN_FOCUS_HANDLER_PROVIDER = customFocusableItemProvider(DropdownFocusHandler);\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nlet RootDropdownService = /*#__PURE__*/(() => {\n  class RootDropdownService {\n    constructor() {\n      this._changes = new Subject();\n    }\n\n    get changes() {\n      return this._changes.asObservable();\n    }\n\n    closeMenus() {\n      this._changes.next(false);\n    }\n\n  }\n\n  RootDropdownService.ɵfac = function RootDropdownService_Factory(t) {\n    return new (t || RootDropdownService)();\n  };\n\n  RootDropdownService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: RootDropdownService,\n    factory: RootDropdownService.ɵfac\n  });\n  return RootDropdownService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nfunction clrRootDropdownFactory(existing) {\n  return existing || new RootDropdownService();\n}\n\nconst ROOT_DROPDOWN_PROVIDER = {\n  provide: RootDropdownService,\n  useFactory: clrRootDropdownFactory,\n  deps: [[new Optional(), new SkipSelf(), RootDropdownService]]\n};\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nlet ClrDropdown = /*#__PURE__*/(() => {\n  class ClrDropdown {\n    constructor(parent, toggleService, cdr, dropdownService) {\n      this.parent = parent;\n      this.toggleService = toggleService;\n      this.cdr = cdr;\n      this.subscriptions = [];\n      this.isMenuClosable = true;\n      this.subscriptions.push(dropdownService.changes.subscribe(value => this.toggleService.open = value));\n      this.subscriptions.push(toggleService.openChange.subscribe(() => this.cdr.markForCheck()));\n    }\n\n    ngOnDestroy() {\n      this.subscriptions.forEach(sub => sub.unsubscribe());\n    }\n\n  }\n\n  ClrDropdown.ɵfac = function ClrDropdown_Factory(t) {\n    return new (t || ClrDropdown)(ɵngcc0.ɵɵdirectiveInject(ClrDropdown, 12), ɵngcc0.ɵɵdirectiveInject(ClrPopoverToggleService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(RootDropdownService));\n  };\n\n  ClrDropdown.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ClrDropdown,\n    selectors: [[\"clr-dropdown\"]],\n    hostVars: 4,\n    hostBindings: function ClrDropdown_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"dropdown\", true)(\"open\", ctx.toggleService.open);\n      }\n    },\n    inputs: {\n      isMenuClosable: [\"clrCloseMenuOnItemClick\", \"isMenuClosable\"]\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([ROOT_DROPDOWN_PROVIDER, {\n      provide: POPOVER_HOST_ANCHOR,\n      useExisting: ElementRef\n    }, FOCUS_SERVICE_PROVIDER, ClrPopoverToggleService, DROPDOWN_FOCUS_HANDLER_PROVIDER])],\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function ClrDropdown_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2\n  });\n  return ClrDropdown;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet BasicFocusableItem = /*#__PURE__*/(() => {\n  class BasicFocusableItem {\n    constructor(id, el, renderer, platformId) {\n      this.id = id;\n      this.el = el;\n      this.renderer = renderer;\n      this.platformId = platformId;\n      this.disabled = false;\n      renderer.setAttribute(el.nativeElement, 'id', id);\n      renderer.setAttribute(el.nativeElement, 'tabindex', '-1');\n    }\n\n    focus() {\n      if (isPlatformBrowser(this.platformId)) {\n        this.renderer.setAttribute(this.el.nativeElement, 'tabindex', '0');\n        this.el.nativeElement.focus();\n        this.el.nativeElement.scrollIntoView({\n          behavior: 'smooth',\n          block: 'center',\n          inline: 'nearest'\n        });\n      }\n    }\n\n    blur() {\n      if (isPlatformBrowser(this.platformId)) {\n        this.renderer.setAttribute(this.el.nativeElement, 'tabindex', '-1');\n        this.el.nativeElement.blur();\n      }\n    }\n\n    activate() {\n      if (isPlatformBrowser(this.platformId)) {\n        this.el.nativeElement.click();\n      }\n    }\n\n  }\n\n  BasicFocusableItem.ɵfac = function BasicFocusableItem_Factory(t) {\n    return new (t || BasicFocusableItem)(ɵngcc0.ɵɵinject(UNIQUE_ID), ɵngcc0.ɵɵinject(ɵngcc0.ElementRef), ɵngcc0.ɵɵinject(ɵngcc0.Renderer2), ɵngcc0.ɵɵinject(PLATFORM_ID));\n  };\n\n  BasicFocusableItem.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: BasicFocusableItem,\n    factory: BasicFocusableItem.ɵfac\n  });\n  return BasicFocusableItem;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nconst BASIC_FOCUSABLE_ITEM_PROVIDER = [UNIQUE_ID_PROVIDER, {\n  provide: FocusableItem,\n  useClass: BasicFocusableItem\n}];\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nlet ClrDropdownItem = /*#__PURE__*/(() => {\n  class ClrDropdownItem {\n    constructor(dropdown, el, _dropdownService, renderer, focusableItem) {\n      this.dropdown = dropdown;\n      this.el = el;\n      this._dropdownService = _dropdownService;\n      this.renderer = renderer;\n      this.focusableItem = focusableItem;\n      this.setByDeprecatedDisabled = false;\n    }\n\n    set disabled(value) {\n      // Empty string attribute evaluates to false but should disable the item, so we need to add a special case for it.\n      this.focusableItem.disabled = !!value || value === '';\n    }\n\n    get disabled() {\n      return this.focusableItem.disabled;\n    }\n    /*\n     * @deprecated since 3.0, remove in 4.0. the presence of this attribute makes it not-focusable in IE11. Use [clrDisabled] input instead.\n     */\n\n\n    set disabledDeprecated(value) {\n      // Empty string attribute evaluates to false but should disable the item, so we need to add a special case for it.\n      this.focusableItem.disabled = !!value || value === '';\n      this.setByDeprecatedDisabled = true;\n    }\n\n    get disabledDeprecated() {\n      return this.focusableItem.disabled;\n    }\n    /**\n     * Let you overwrite the focusable auto increment id.\n     */\n\n\n    set dropdownItemId(value) {\n      this.focusableItem.id = value;\n    }\n\n    get dropdownItemId() {\n      return this.focusableItem.id;\n    }\n\n    ngAfterViewInit() {\n      this.unlisten = this.renderer.listen(this.el.nativeElement, 'click', () => this.onDropdownItemClick());\n    }\n\n    onDropdownItemClick() {\n      if (this.dropdown.isMenuClosable && !this.el.nativeElement.classList.contains('disabled')) {\n        this._dropdownService.closeMenus();\n      }\n    }\n\n    ngOnDestroy() {\n      if (this.unlisten) {\n        this.unlisten();\n      }\n    }\n\n  }\n\n  ClrDropdownItem.ɵfac = function ClrDropdownItem_Factory(t) {\n    return new (t || ClrDropdownItem)(ɵngcc0.ɵɵdirectiveInject(ClrDropdown), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(RootDropdownService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(FocusableItem));\n  };\n\n  ClrDropdownItem.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: ClrDropdownItem,\n    selectors: [[\"\", \"clrDropdownItem\", \"\"]],\n    hostVars: 8,\n    hostBindings: function ClrDropdownItem_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"role\", \"menuitem\")(\"aria-disabled\", ctx.disabled)(\"disabled\", ctx.disabled && ctx.setByDeprecatedDisabled ? \"\" : null)(\"id\", ctx.dropdownItemId);\n        ɵngcc0.ɵɵclassProp(\"disabled\", ctx.disabled)(\"dropdown-item\", true);\n      }\n    },\n    inputs: {\n      disabled: [\"clrDisabled\", \"disabled\"],\n      disabledDeprecated: [\"disabled\", \"disabledDeprecated\"],\n      dropdownItemId: [\"id\", \"dropdownItemId\"]\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([BASIC_FOCUSABLE_ITEM_PROVIDER])]\n  });\n  return ClrDropdownItem;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nvar Point = /*#__PURE__*/(() => {\n  (function (Point) {\n    Point[Point[\"RIGHT_CENTER\"] = 0] = \"RIGHT_CENTER\";\n    Point[Point[\"RIGHT_TOP\"] = 1] = \"RIGHT_TOP\";\n    Point[Point[\"RIGHT_BOTTOM\"] = 2] = \"RIGHT_BOTTOM\";\n    Point[Point[\"TOP_CENTER\"] = 3] = \"TOP_CENTER\";\n    Point[Point[\"TOP_RIGHT\"] = 4] = \"TOP_RIGHT\";\n    Point[Point[\"TOP_LEFT\"] = 5] = \"TOP_LEFT\";\n    Point[Point[\"BOTTOM_CENTER\"] = 6] = \"BOTTOM_CENTER\";\n    Point[Point[\"BOTTOM_RIGHT\"] = 7] = \"BOTTOM_RIGHT\";\n    Point[Point[\"BOTTOM_LEFT\"] = 8] = \"BOTTOM_LEFT\";\n    Point[Point[\"LEFT_CENTER\"] = 9] = \"LEFT_CENTER\";\n    Point[Point[\"LEFT_TOP\"] = 10] = \"LEFT_TOP\";\n    Point[Point[\"LEFT_BOTTOM\"] = 11] = \"LEFT_BOTTOM\";\n  })(Point || (Point = {}));\n\n  return Point;\n})();\nconst POSITION_RELATIVE = 'relative';\nconst POSITION_ABSOLUTE = 'absolute';\nconst POSITION_FIXED = 'fixed';\nconst OVERFLOW_SCROLL = 'scroll';\nconst OVERFLOW_AUTO = 'auto';\n\nclass Popover {\n  constructor(element) {\n    this.element = element;\n    /*\n     * Containers up to the first positioned one will have an event on scroll\n     */\n\n    this.scrollableElements = [];\n    this.boundOnScrollListener = this.emitScrollEvent.bind(this); // Browsers don't agree with what to do if some of these are not specified, so we set them all to be safe.\n\n    element.style.position = POSITION_ABSOLUTE;\n    element.style.top = 0;\n    element.style.bottom = 'auto';\n    element.style.left = 0;\n    element.style.right = 'auto';\n  } // TODO: need a way to account for parameters that change dynamically (positioning).\n\n\n  anchor(anchor, anchorAlign, popoverAlign, {\n    offsetX = 0,\n    offsetY = 0,\n    useAnchorParent = false\n  } = {}) {\n    // TODO: we are assuming here that the popover is inside or next to the anchor.\n    // We'd need to go up the popover tree too otherwise\n    this.addScrollEventListeners(anchor);\n\n    if (useAnchorParent) {\n      anchor = anchor.parentNode;\n    } // explicitly override anchor's style to static\n\n\n    anchor.style.position = 'static';\n    const anchorRect = anchor.getBoundingClientRect();\n    const popoverRect = this.element.getBoundingClientRect(); // position of left top corner of anchor + the offset\n\n    let leftDiff = anchorRect.left - popoverRect.left + offsetX;\n    let topDiff = anchorRect.top - popoverRect.top + offsetY; // first, adjust positioning based on anchor's align point\n\n    switch (anchorAlign) {\n      case Point.LEFT_TOP:\n      case Point.TOP_LEFT:\n        break;\n\n      case Point.TOP_CENTER:\n        leftDiff += anchorRect.width / 2;\n        break;\n\n      case Point.TOP_RIGHT:\n        leftDiff += anchorRect.width;\n        break;\n\n      case Point.RIGHT_TOP:\n        leftDiff += anchorRect.width;\n        break;\n\n      case Point.LEFT_BOTTOM:\n        topDiff += anchorRect.height;\n        break;\n\n      case Point.BOTTOM_LEFT:\n        topDiff += anchorRect.height;\n        break;\n\n      case Point.BOTTOM_CENTER:\n        topDiff += anchorRect.height;\n        leftDiff += anchorRect.width / 2;\n        break;\n\n      case Point.BOTTOM_RIGHT:\n        topDiff += anchorRect.height;\n        leftDiff += anchorRect.width;\n        break;\n\n      case Point.RIGHT_BOTTOM:\n        topDiff += anchorRect.height;\n        leftDiff += anchorRect.width;\n        break;\n\n      case Point.LEFT_CENTER:\n        topDiff += anchorRect.height / 2;\n        break;\n\n      case Point.RIGHT_CENTER:\n        topDiff += anchorRect.height / 2;\n        leftDiff += anchorRect.width;\n        break;\n\n      default:\n    } // second, adjust positioning based on popover's align point\n\n\n    switch (popoverAlign) {\n      case Point.LEFT_TOP:\n      case Point.TOP_LEFT:\n        break;\n\n      case Point.TOP_CENTER:\n        leftDiff -= popoverRect.width / 2;\n        break;\n\n      case Point.TOP_RIGHT:\n        leftDiff -= popoverRect.width;\n        break;\n\n      case Point.RIGHT_TOP:\n        leftDiff -= popoverRect.width;\n        break;\n\n      case Point.LEFT_BOTTOM:\n        topDiff -= popoverRect.height;\n        break;\n\n      case Point.BOTTOM_LEFT:\n        topDiff -= popoverRect.height;\n        break;\n\n      case Point.BOTTOM_CENTER:\n        topDiff -= popoverRect.height;\n        leftDiff -= popoverRect.width / 2;\n        break;\n\n      case Point.BOTTOM_RIGHT:\n        topDiff -= popoverRect.height;\n        leftDiff -= popoverRect.width;\n        break;\n\n      case Point.RIGHT_BOTTOM:\n        topDiff -= popoverRect.height;\n        leftDiff -= popoverRect.width;\n        break;\n\n      case Point.LEFT_CENTER:\n        topDiff -= popoverRect.height / 2;\n        break;\n\n      case Point.RIGHT_CENTER:\n        topDiff -= popoverRect.height / 2;\n        leftDiff -= popoverRect.width;\n        break;\n\n      default:\n    } // Third, adjust with popover's margins based on the two align points.\n    // Here, we make an assumption that popover is primarily positioned outside the\n    // anchor with minor offset. Without this assumption, it's impossible to apply\n    // the popover's margins in a predictable way. For example, assume that a popover\n    // and its anchor are exactly the same size. if a popover is positioned inside the\n    // anchor (which is technically possible), then it becomes impossible to know what to do\n    // if the popover has a non-zero margin value all around (because applying the margin in\n    // all four directions will result in no margin visually, which isn't what we want).\n    // Therefore, our logic makes assumptions about margins of interest given the points,\n    // and only covers the cases where popover is outside the anchor.\n\n\n    const popoverComputedStyle = getComputedStyle(this.element);\n    const marginLeft = parseInt(popoverComputedStyle.marginLeft, 10);\n    const marginRight = parseInt(popoverComputedStyle.marginRight, 10);\n    const marginTop = parseInt(popoverComputedStyle.marginTop, 10);\n    const marginBottom = parseInt(popoverComputedStyle.marginBottom, 10);\n\n    switch (anchorAlign) {\n      case Point.LEFT_TOP:\n      case Point.TOP_LEFT:\n      case Point.TOP_RIGHT:\n      case Point.RIGHT_TOP:\n        if (popoverAlign === Point.BOTTOM_RIGHT || popoverAlign === Point.RIGHT_BOTTOM) {\n          topDiff -= marginBottom;\n          leftDiff -= marginRight;\n        }\n\n        if (popoverAlign === Point.BOTTOM_LEFT || popoverAlign === Point.LEFT_BOTTOM) {\n          topDiff -= marginTop;\n          leftDiff += marginLeft;\n        }\n\n        if (popoverAlign === Point.TOP_LEFT || popoverAlign === Point.LEFT_TOP) {\n          topDiff += marginTop;\n          leftDiff += marginLeft;\n        }\n\n        if (popoverAlign === Point.TOP_RIGHT || popoverAlign === Point.RIGHT_TOP) {\n          topDiff += marginTop;\n          leftDiff -= marginRight;\n        }\n\n        break;\n\n      case Point.LEFT_BOTTOM:\n      case Point.BOTTOM_LEFT:\n      case Point.BOTTOM_RIGHT:\n      case Point.RIGHT_BOTTOM:\n        if (popoverAlign === Point.BOTTOM_LEFT || popoverAlign === Point.LEFT_BOTTOM) {\n          topDiff -= marginBottom;\n          leftDiff += marginLeft;\n        }\n\n        if (popoverAlign === Point.BOTTOM_RIGHT || popoverAlign === Point.RIGHT_BOTTOM) {\n          topDiff -= marginBottom;\n          leftDiff -= marginRight;\n        }\n\n        if (popoverAlign === Point.TOP_LEFT || popoverAlign === Point.LEFT_TOP) {\n          topDiff += marginTop;\n          leftDiff += marginLeft;\n        }\n\n        if (popoverAlign === Point.TOP_RIGHT || popoverAlign === Point.RIGHT_TOP) {\n          topDiff += marginTop;\n          leftDiff -= marginRight;\n        }\n\n        break;\n\n      case Point.TOP_CENTER:\n        topDiff -= marginBottom;\n        leftDiff += marginLeft;\n        leftDiff -= marginRight;\n        break;\n\n      case Point.BOTTOM_CENTER:\n        topDiff += marginTop;\n        leftDiff += marginLeft;\n        leftDiff -= marginRight;\n        break;\n\n      case Point.LEFT_CENTER:\n        topDiff += marginTop;\n        topDiff -= marginBottom;\n        leftDiff -= marginRight;\n        break;\n\n      case Point.RIGHT_CENTER:\n        topDiff += marginTop;\n        topDiff -= marginBottom;\n        leftDiff += marginLeft;\n        break;\n\n      default:\n    }\n\n    this.element.style.transform = `translateX(${Math.round(leftDiff)}px) translateY(${Math.round(topDiff)}px)`;\n    return this._scroll.asObservable();\n  }\n\n  release() {\n    this.element.style.transform = '';\n    this.removeScrollEventListeners();\n  }\n\n  isPositioned(container) {\n    const position = getComputedStyle(container).position;\n    return position === POSITION_RELATIVE || position === POSITION_ABSOLUTE || position === POSITION_FIXED;\n  }\n\n  emitScrollEvent() {\n    this._scroll.next();\n  }\n\n  addScrollEventListeners(e) {\n    this._scroll = new Subject();\n    const anchor = e;\n    let current = e;\n\n    while (current && current !== document) {\n      if (this.scrolls(current)) {\n        current.addEventListener('scroll', this.boundOnScrollListener);\n        this.scrollableElements.push(current);\n      }\n\n      if (current !== anchor && this.isPositioned(current)) {\n        break;\n      }\n\n      current = current.parentNode;\n    }\n  }\n\n  removeScrollEventListeners() {\n    for (const elem of this.scrollableElements) {\n      elem.removeEventListener('scroll', this.boundOnScrollListener);\n    }\n\n    this.scrollableElements.length = 0;\n\n    if (this._scroll) {\n      this._scroll.complete();\n\n      delete this._scroll;\n    }\n  }\n\n  scrolls(container) {\n    const computedStyles = getComputedStyle(container);\n    return computedStyles.overflowX === OVERFLOW_SCROLL || computedStyles.overflowX === OVERFLOW_AUTO || computedStyles.overflowY === OVERFLOW_SCROLL || computedStyles.overflowY === OVERFLOW_AUTO;\n  }\n\n}\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n// Literally any annotation would work here, but writing our own @HoneyBadger annotation feels overkill.\n\n\nlet AbstractPopover = /*#__PURE__*/(() => {\n  class AbstractPopover {\n    constructor(injector, parentHost) {\n      this.parentHost = parentHost;\n      this.updateAnchor = false;\n      this.recentlyOpened = false;\n      this.popoverOptions = {};\n      /*\n       * Until https://github.com/angular/angular/issues/8785 is supported, we don't have any way to instantiate\n       * a separate directive on the host. So let's do dirty but performant for now.\n       */\n\n      this.closeOnOutsideClick = false;\n      this.el = injector.get(ElementRef);\n      this.toggleService = injector.get(ClrPopoverToggleService);\n      this.renderer = injector.get(Renderer2); // Default anchor is the parent host\n\n      this.anchorElem = parentHost.nativeElement;\n      this.popoverInstance = new Popover(this.el.nativeElement);\n      this.subscription = this.toggleService.openChange.subscribe(change => {\n        if (change) {\n          this.anchor();\n          this.attachESCListener();\n          this.setRecentlyOpened();\n        } else {\n          this.release();\n          this.detachESCListener();\n        }\n      });\n\n      if (this.toggleService.open) {\n        this.anchor();\n        this.attachESCListener();\n        this.setRecentlyOpened();\n      }\n    }\n\n    anchor() {\n      this.updateAnchor = true; // Ugh\n\n      this.ignore = this.toggleService.originalEvent;\n    }\n\n    release() {\n      this.detachOutsideClickListener();\n      this.popoverInstance.release();\n    }\n\n    ngAfterViewChecked() {\n      if (this.updateAnchor) {\n        this.updateAnchor = false;\n        this.popoverInstance.anchor(this.anchorElem, this.anchorPoint, this.popoverPoint, this.popoverOptions).subscribe(() => {\n          // if a scroll event is detected, close the popover\n          this.toggleService.open = false;\n        });\n        this.attachOutsideClickListener();\n      }\n    }\n\n    ngOnDestroy() {\n      this.release();\n      this.detachESCListener();\n      this.subscription.unsubscribe();\n    }\n    /*\n     * Fallback to hide when *clrIfOpen is not being used\n     */\n\n\n    get isOffScreen() {\n      return this.toggleService.open ? false : true;\n    }\n\n    attachESCListener() {\n      if (!this.popoverOptions.ignoreGlobalESCListener) {\n        this.documentESCListener = this.renderer.listen('document', 'keydown', event => {\n          if (event && event.key) {\n            if (event.key === 'Escape' || event.key === 'Esc') {\n              this.toggleService.open = false;\n            }\n          }\n        });\n      }\n    }\n\n    detachESCListener() {\n      if (this.documentESCListener) {\n        this.documentESCListener();\n        delete this.documentESCListener;\n      }\n    }\n\n    attachOutsideClickListener() {\n      if (this.closeOnOutsideClick) {\n        this.hostClickListener = this.renderer.listen(this.el.nativeElement, 'click', event => this.ignore = event);\n\n        if (this.ignoredElement) {\n          this.ignoredElementClickListener = this.renderer.listen(this.ignoredElement, 'click', event => this.ignore = event);\n        }\n\n        this.documentClickListener = this.renderer.listen('document', 'click', event => {\n          if (event === this.ignore || this.recentlyOpened) {\n            delete this.ignore;\n          } else {\n            this.toggleService.open = false;\n          }\n        });\n      }\n    }\n\n    detachOutsideClickListener() {\n      if (this.closeOnOutsideClick) {\n        if (this.hostClickListener) {\n          this.hostClickListener();\n          delete this.hostClickListener;\n        }\n\n        if (this.ignoredElementClickListener) {\n          this.ignoredElementClickListener();\n          delete this.ignoredElementClickListener;\n        }\n\n        if (this.documentClickListener) {\n          this.documentClickListener();\n          delete this.documentClickListener;\n        }\n      }\n    }\n\n    setRecentlyOpened() {\n      this.recentlyOpened = true;\n      setTimeout(() => {\n        this.recentlyOpened = false;\n      });\n    }\n\n  }\n\n  AbstractPopover.ɵfac = function AbstractPopover_Factory(t) {\n    return new (t || AbstractPopover)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef, 4));\n  };\n\n  AbstractPopover.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: AbstractPopover,\n    hostVars: 2,\n    hostBindings: function AbstractPopover_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"is-off-screen\", ctx.isOffScreen);\n      }\n    }\n  });\n  return AbstractPopover;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrDropdownMenu = /*#__PURE__*/(() => {\n  class ClrDropdownMenu extends AbstractPopover {\n    constructor(injector, parentHost, nested, focusHandler) {\n      if (!parentHost) {\n        throw new Error('clr-dropdown-menu should only be used inside of a clr-dropdown');\n      }\n\n      super(injector, parentHost);\n\n      if (!nested) {\n        // Default positioning for normal dropdown is bottom-left\n        this.anchorPoint = Point.BOTTOM_LEFT;\n        this.popoverPoint = Point.LEFT_TOP;\n      } else {\n        // Default positioning for nested dropdown is right-top\n        this.anchorPoint = Point.RIGHT_TOP;\n        this.popoverPoint = Point.LEFT_TOP;\n      }\n\n      this.popoverOptions.allowMultipleOpen = true;\n      this.popoverOptions.ignoreGlobalESCListener = true;\n      this.closeOnOutsideClick = true;\n      this.focusHandler = focusHandler;\n    }\n\n    set position(position) {\n      // set the popover values based on menu position\n      switch (position) {\n        case 'top-right':\n          this.anchorPoint = Point.TOP_RIGHT;\n          this.popoverPoint = Point.RIGHT_BOTTOM;\n          break;\n\n        case 'top-left':\n          this.anchorPoint = Point.TOP_LEFT;\n          this.popoverPoint = Point.LEFT_BOTTOM;\n          break;\n\n        case 'bottom-right':\n          this.anchorPoint = Point.BOTTOM_RIGHT;\n          this.popoverPoint = Point.RIGHT_TOP;\n          break;\n\n        case 'bottom-left':\n          this.anchorPoint = Point.BOTTOM_LEFT;\n          this.popoverPoint = Point.LEFT_TOP;\n          break;\n\n        case 'right-top':\n          this.anchorPoint = Point.RIGHT_TOP;\n          this.popoverPoint = Point.LEFT_TOP;\n          break;\n\n        case 'right-bottom':\n          this.anchorPoint = Point.RIGHT_BOTTOM;\n          this.popoverPoint = Point.LEFT_BOTTOM;\n          break;\n\n        case 'left-top':\n          this.anchorPoint = Point.LEFT_TOP;\n          this.popoverPoint = Point.RIGHT_TOP;\n          break;\n\n        case 'left-bottom':\n          this.anchorPoint = Point.LEFT_BOTTOM;\n          this.popoverPoint = Point.RIGHT_BOTTOM;\n          break;\n\n        default:\n          this.anchorPoint = Point.BOTTOM_LEFT;\n          this.popoverPoint = Point.LEFT_TOP;\n          break;\n      }\n    }\n\n    ngAfterContentInit() {\n      this.focusHandler.container = this.el.nativeElement;\n      this.items.changes.subscribe(() => this.focusHandler.addChildren(this.items.toArray())); // I saw this on GitHub as a solution to avoid code duplication because of missed QueryList changes\n\n      this.items.notifyOnChanges();\n    }\n\n    ngOnDestroy() {\n      super.ngOnDestroy();\n      this.focusHandler.resetChildren();\n    }\n\n  }\n\n  ClrDropdownMenu.ɵfac = function ClrDropdownMenu_Factory(t) {\n    return new (t || ClrDropdownMenu)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector), ɵngcc0.ɵɵdirectiveInject(POPOVER_HOST_ANCHOR, 8), ɵngcc0.ɵɵdirectiveInject(ClrDropdownMenu, 12), ɵngcc0.ɵɵdirectiveInject(DropdownFocusHandler));\n  };\n\n  ClrDropdownMenu.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ClrDropdownMenu,\n    selectors: [[\"clr-dropdown-menu\"]],\n    contentQueries: function ClrDropdownMenu_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, FocusableItem, 4);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.items = _t);\n      }\n    },\n    hostVars: 3,\n    hostBindings: function ClrDropdownMenu_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"role\", \"menu\");\n        ɵngcc0.ɵɵclassProp(\"dropdown-menu\", true);\n      }\n    },\n    inputs: {\n      position: [\"clrPosition\", \"position\"]\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function ClrDropdownMenu_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2\n  });\n  return ClrDropdownMenu;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrDropdownTrigger = /*#__PURE__*/(() => {\n  class ClrDropdownTrigger {\n    constructor(dropdown, toggleService, el, focusHandler) {\n      this.toggleService = toggleService;\n      this.isRootLevelToggle = true; // if the containing dropdown has a parent, then this is not the root level one\n\n      if (dropdown.parent) {\n        this.isRootLevelToggle = false;\n      }\n\n      focusHandler.trigger = el.nativeElement;\n    }\n\n    get active() {\n      return this.toggleService.open;\n    }\n\n    onDropdownTriggerClick(event) {\n      this.toggleService.toggleWithEvent(event);\n    }\n\n  }\n\n  ClrDropdownTrigger.ɵfac = function ClrDropdownTrigger_Factory(t) {\n    return new (t || ClrDropdownTrigger)(ɵngcc0.ɵɵdirectiveInject(ClrDropdown), ɵngcc0.ɵɵdirectiveInject(ClrPopoverToggleService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(DropdownFocusHandler));\n  };\n\n  ClrDropdownTrigger.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: ClrDropdownTrigger,\n    selectors: [[\"\", \"clrDropdownTrigger\", \"\"], [\"\", \"clrDropdownToggle\", \"\"]],\n    hostVars: 10,\n    hostBindings: function ClrDropdownTrigger_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function ClrDropdownTrigger_click_HostBindingHandler($event) {\n          return ctx.onDropdownTriggerClick($event);\n        });\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-haspopup\", \"menu\")(\"aria-expanded\", ctx.active);\n        ɵngcc0.ɵɵclassProp(\"dropdown-toggle\", ctx.isRootLevelToggle)(\"dropdown-item\", !ctx.isRootLevelToggle)(\"expandable\", !ctx.isRootLevelToggle)(\"active\", ctx.active);\n      }\n    }\n  });\n  return ClrDropdownTrigger;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nconst CLR_DROPDOWN_DIRECTIVES = [ClrDropdown, ClrDropdownMenu, ClrDropdownTrigger, ClrDropdownItem];\nlet ClrDropdownModule = /*#__PURE__*/(() => {\n  class ClrDropdownModule {}\n\n  ClrDropdownModule.ɵfac = function ClrDropdownModule_Factory(t) {\n    return new (t || ClrDropdownModule)();\n  };\n\n  ClrDropdownModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: ClrDropdownModule\n  });\n  ClrDropdownModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule], ClrConditionalModule, ClrIconModule]\n  });\n  return ClrDropdownModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ClrDropdownModule, {\n    declarations: function () {\n      return [ClrDropdown, ClrDropdownMenu, ClrDropdownTrigger, ClrDropdownItem];\n    },\n    imports: function () {\n      return [CommonModule];\n    },\n    exports: function () {\n      return [ClrDropdown, ClrDropdownMenu, ClrDropdownTrigger, ClrDropdownItem, ClrConditionalModule, ClrIconModule];\n    }\n  });\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n// @TODO Make this an enum\n\n\nconst ALERT_TYPES = ['info', 'warning', 'danger', 'success'];\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nlet AlertIconAndTypesService = /*#__PURE__*/(() => {\n  class AlertIconAndTypesService {\n    constructor(commonStrings) {\n      this.commonStrings = commonStrings;\n      this.defaultIconShape = 'info-circle';\n      this._alertIconShape = '';\n      this._alertType = 'info';\n    }\n\n    get alertType() {\n      return this._alertType;\n    }\n\n    set alertType(val) {\n      if (ALERT_TYPES.indexOf(val) > -1) {\n        this._alertType = val;\n      }\n    }\n\n    get alertIconShape() {\n      if ('' === this._alertIconShape) {\n        return this.iconInfoFromType(this._alertType).shape;\n      }\n\n      return this._alertIconShape;\n    }\n\n    set alertIconShape(val) {\n      if (!val) {\n        this._alertIconShape = '';\n      } else if (val !== this._alertIconShape) {\n        this._alertIconShape = val;\n      }\n    }\n\n    get alertIconTitle() {\n      return this.iconInfoFromType(this._alertType).title;\n    }\n\n    iconInfoFromType(type) {\n      const returnObj = {\n        shape: '',\n        cssClass: '',\n        title: ''\n      };\n\n      switch (type) {\n        case 'warning':\n          returnObj.shape = 'exclamation-triangle';\n          returnObj.cssClass = 'alert-warning';\n          returnObj.title = this.commonStrings.keys.warning;\n          break;\n\n        case 'danger':\n          returnObj.shape = 'exclamation-circle';\n          returnObj.cssClass = 'alert-danger';\n          returnObj.title = this.commonStrings.keys.danger;\n          break;\n\n        case 'success':\n          returnObj.shape = 'check-circle';\n          returnObj.cssClass = 'alert-success';\n          returnObj.title = this.commonStrings.keys.success;\n          break;\n\n        default:\n          returnObj.shape = this.defaultIconShape;\n          returnObj.cssClass = 'alert-info';\n          returnObj.title = this.commonStrings.keys.info;\n          break;\n      }\n\n      return returnObj;\n    }\n\n  }\n\n  AlertIconAndTypesService.ɵfac = function AlertIconAndTypesService_Factory(t) {\n    return new (t || AlertIconAndTypesService)(ɵngcc0.ɵɵinject(ClrCommonStringsService));\n  };\n\n  AlertIconAndTypesService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: AlertIconAndTypesService,\n    factory: AlertIconAndTypesService.ɵfac\n  });\n  return AlertIconAndTypesService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet MultiAlertService = /*#__PURE__*/(() => {\n  class MultiAlertService {\n    constructor() {\n      /**\n       * The Observable that lets other classes subscribe to changes\n       */\n      this._change = new Subject();\n    }\n\n    get changes() {\n      return this._change.asObservable();\n    }\n\n    get current() {\n      return this._current;\n    }\n\n    set current(index) {\n      if (index !== this._current) {\n        this._current = index;\n\n        this._change.next(index);\n      }\n    }\n\n    get activeAlerts() {\n      return this.allAlerts && this.allAlerts.filter(alert => !alert._closed);\n    }\n\n    get currentAlert() {\n      return this.activeAlerts && this.activeAlerts[this.current];\n    }\n\n    set currentAlert(alert) {\n      this.current = this.activeAlerts.indexOf(alert);\n    }\n\n    get count() {\n      return this.activeAlerts && this.activeAlerts.length || 0;\n    }\n\n    manage(alerts) {\n      if (this.subscription) {\n        this.subscription.unsubscribe();\n      }\n\n      this.allAlerts = alerts; // After receiving alerts' QueryList,\n      // we are picking index 0 as current by default if a user hasn't any index\n\n      this.current = typeof this._current === 'number' ? this._current : 0; // we have to also broadcast that initial index\n\n      this._change.next(this.current);\n\n      this.subscription = this.allAlerts.changes.subscribe(() => {\n        if (this.current >= this.allAlerts.length) {\n          this.current = Math.max(0, this.allAlerts.length - 1);\n        }\n      });\n    }\n\n    next() {\n      this.current = this.current === this.activeAlerts.length - 1 ? 0 : this.current + 1;\n    }\n\n    previous() {\n      if (this.activeAlerts.length === 0) {\n        return;\n      }\n\n      this.current = this.current === 0 ? this.activeAlerts.length - 1 : this.current - 1;\n    }\n\n    close() {\n      this.previous();\n    }\n\n    destroy() {\n      if (this.subscription) {\n        this.subscription.unsubscribe();\n      }\n    }\n\n  }\n\n  MultiAlertService.ɵfac = function MultiAlertService_Factory(t) {\n    return new (t || MultiAlertService)();\n  };\n\n  MultiAlertService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: MultiAlertService,\n    factory: MultiAlertService.ɵfac\n  });\n  return MultiAlertService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrAlert = /*#__PURE__*/(() => {\n  class ClrAlert {\n    constructor(iconService, cdr, multiAlertService, commonStrings) {\n      this.iconService = iconService;\n      this.cdr = cdr;\n      this.multiAlertService = multiAlertService;\n      this.commonStrings = commonStrings;\n      this.subscriptions = [];\n      this.isSmall = false;\n      this.closable = true;\n      this.isAppLevel = false; // Aria\n\n      this.clrCloseButtonAriaLabel = this.commonStrings.keys.alertCloseButtonAriaLabel;\n      this._closed = false;\n      this._closedChanged = new EventEmitter(false);\n    }\n\n    ngOnInit() {\n      if (this.multiAlertService) {\n        this.subscriptions.push(this.multiAlertService.changes.subscribe(() => {\n          this.hidden = this.multiAlertService.currentAlert !== this;\n        }));\n      }\n    }\n\n    ngOnDestroy() {\n      this.subscriptions.forEach(sub => sub.unsubscribe());\n    }\n\n    set alertType(val) {\n      this.iconService.alertType = val;\n    }\n\n    get alertType() {\n      return this.iconService.alertType;\n    }\n\n    set alertIconShape(value) {\n      this.iconService.alertIconShape = value;\n    }\n\n    get alertClass() {\n      return this.iconService.iconInfoFromType(this.iconService.alertType).cssClass;\n    }\n\n    set hidden(value) {\n      if (value !== this._hidden) {\n        this._hidden = value;\n        this.cdr.detectChanges();\n      }\n    }\n\n    get hidden() {\n      return this._hidden;\n    }\n\n    close() {\n      if (!this.closable) {\n        return;\n      }\n\n      this._closed = true;\n\n      if (this.multiAlertService) {\n        this.multiAlertService.close();\n      }\n\n      this._closedChanged.emit(true);\n    }\n\n    open() {\n      this._closed = false;\n\n      this._closedChanged.emit(false);\n    }\n\n  }\n\n  ClrAlert.ɵfac = function ClrAlert_Factory(t) {\n    return new (t || ClrAlert)(ɵngcc0.ɵɵdirectiveInject(AlertIconAndTypesService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MultiAlertService, 8), ɵngcc0.ɵɵdirectiveInject(ClrCommonStringsService));\n  };\n\n  ClrAlert.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ClrAlert,\n    selectors: [[\"clr-alert\"]],\n    inputs: {\n      isSmall: [\"clrAlertSizeSmall\", \"isSmall\"],\n      closable: [\"clrAlertClosable\", \"closable\"],\n      isAppLevel: [\"clrAlertAppLevel\", \"isAppLevel\"],\n      clrCloseButtonAriaLabel: \"clrCloseButtonAriaLabel\",\n      _closed: [\"clrAlertClosed\", \"_closed\"],\n      alertType: [\"clrAlertType\", \"alertType\"],\n      alertIconShape: [\"clrAlertIcon\", \"alertIconShape\"]\n    },\n    outputs: {\n      _closedChanged: \"clrAlertClosedChange\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([AlertIconAndTypesService])],\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 1,\n    consts: [[\"class\", \"alert\", 3, \"ngClass\", \"alert-hidden\", \"alert-sm\", \"alert-app-level\", 4, \"ngIf\"], [1, \"alert\", 3, \"ngClass\"], [1, \"alert-items\"], [\"type\", \"button\", \"class\", \"close\", 3, \"click\", 4, \"ngIf\"], [\"type\", \"button\", 1, \"close\", 3, \"click\"], [\"shape\", \"window-close\"]],\n    template: function ClrAlert_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵtemplate(0, ClrAlert_div_0_Template, 4, 8, \"div\", 0);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx._closed);\n      }\n    },\n    directives: [ɵngcc1.NgIf, ɵngcc1.NgClass, CdsIconCustomTag],\n    styles: [\"[_nghost-%COMP%] { display: block; }\"]\n  });\n  return ClrAlert;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrAlertItem = /*#__PURE__*/(() => {\n  class ClrAlertItem {\n    constructor(iconService) {\n      this.iconService = iconService;\n    }\n\n  }\n\n  ClrAlertItem.ɵfac = function ClrAlertItem_Factory(t) {\n    return new (t || ClrAlertItem)(ɵngcc0.ɵɵdirectiveInject(AlertIconAndTypesService));\n  };\n\n  ClrAlertItem.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ClrAlertItem,\n    selectors: [[\"clr-alert-item\"]],\n    hostAttrs: [1, \"alert-item\"],\n    ngContentSelectors: _c0,\n    decls: 3,\n    vars: 2,\n    consts: [[1, \"alert-icon-wrapper\"], [\"role\", \"img\", 1, \"alert-icon\"]],\n    template: function ClrAlertItem_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵelement(1, \"cds-icon\", 1);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵprojection(2);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵattribute(\"shape\", ctx.iconService.alertIconShape)(\"aria-label\", ctx.iconService.alertIconTitle);\n      }\n    },\n    directives: [CdsIconCustomTag],\n    encapsulation: 2\n  });\n  return ClrAlertItem;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/**\n * @remark\n * This directive is used only of selectin alert text.\n */\n\n\nlet ClrAlertText = /*#__PURE__*/(() => {\n  class ClrAlertText {}\n\n  ClrAlertText.ɵfac = function ClrAlertText_Factory(t) {\n    return new (t || ClrAlertText)();\n  };\n\n  ClrAlertText.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: ClrAlertText,\n    selectors: [[\"\", 8, \"alert-text\"]]\n  });\n  return ClrAlertText;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrAlerts = /*#__PURE__*/(() => {\n  class ClrAlerts {\n    constructor(multiAlertService) {\n      this.multiAlertService = multiAlertService;\n      this.subscriptions = [];\n      this.currentAlertIndexChange = new EventEmitter(false);\n      this.currentAlertChange = new EventEmitter(false);\n    }\n\n    set allAlerts(value) {\n      this.multiAlertService.manage(value); // provide alerts\n    }\n    /**\n     * Input/Output to support two way binding on current alert index\n     */\n\n\n    set _inputCurrentIndex(index) {\n      if (Number.isInteger(index) && index >= 0) {\n        this.multiAlertService.current = index;\n      }\n    }\n\n    set currentAlertIndex(index) {\n      this.multiAlertService.current = index;\n    }\n\n    get currentAlertIndex() {\n      return this.multiAlertService.current;\n    }\n    /**\n     * Input/Output to support two way binding on current alert instance\n     */\n\n\n    set currentAlert(alert) {\n      if (alert) {\n        this.multiAlertService.currentAlert = alert;\n      }\n    }\n\n    get currentAlert() {\n      return this.multiAlertService.currentAlert;\n    }\n    /**\n     * Ensure we are only dealing with alerts that have not been closed yet\n     */\n\n\n    get alerts() {\n      return this.allAlerts.filter(alert => {\n        return alert.hidden === false;\n      });\n    }\n\n    get currentAlertType() {\n      if (this.multiAlertService.currentAlert) {\n        return this.multiAlertService.currentAlert.alertType;\n      }\n\n      return '';\n    }\n\n    ngAfterContentInit() {\n      this.subscriptions.push(this.multiAlertService.changes.subscribe(index => {\n        this.currentAlertIndexChange.next(index);\n        this.currentAlertChange.next(this.multiAlertService.currentAlert);\n      }));\n    }\n\n    ngOnDestroy() {\n      this.subscriptions.forEach(sub => sub.unsubscribe());\n      this.multiAlertService.destroy();\n    }\n\n  }\n\n  ClrAlerts.ɵfac = function ClrAlerts_Factory(t) {\n    return new (t || ClrAlerts)(ɵngcc0.ɵɵdirectiveInject(MultiAlertService));\n  };\n\n  ClrAlerts.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ClrAlerts,\n    selectors: [[\"clr-alerts\"]],\n    contentQueries: function ClrAlerts_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, ClrAlert, 4);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.allAlerts = _t);\n      }\n    },\n    hostVars: 10,\n    hostBindings: function ClrAlerts_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"alerts\", true)(\"alert-danger\", ctx.currentAlertType == \"danger\")(\"alert-info\", ctx.currentAlertType == \"info\")(\"alert-success\", ctx.currentAlertType == \"success\")(\"alert-warning\", ctx.currentAlertType == \"warning\");\n      }\n    },\n    inputs: {\n      _inputCurrentIndex: [\"clrCurrentAlertIndex\", \"_inputCurrentIndex\"],\n      currentAlert: [\"clrCurrentAlert\", \"currentAlert\"]\n    },\n    outputs: {\n      currentAlertIndexChange: \"clrCurrentAlertIndexChange\",\n      currentAlertChange: \"clrCurrentAlertChange\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([MultiAlertService])],\n    ngContentSelectors: _c86,\n    decls: 2,\n    vars: 1,\n    consts: [[3, \"clrCurrentAlertIndex\", 4, \"ngIf\"], [3, \"clrCurrentAlertIndex\"]],\n    template: function ClrAlerts_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c85);\n        ɵngcc0.ɵɵtemplate(0, ClrAlerts_clr_alerts_pager_0_Template, 1, 1, \"clr-alerts-pager\", 0);\n        ɵngcc0.ɵɵprojection(1);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.multiAlertService.count > 1);\n      }\n    },\n    directives: function () {\n      return [ɵngcc1.NgIf, ClrAlertsPager];\n    },\n    styles: [\"[_nghost-%COMP%] { display: block }\"]\n  });\n  return ClrAlerts;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrAlertsPager = /*#__PURE__*/(() => {\n  class ClrAlertsPager {\n    constructor(multiAlertService, commonStrings) {\n      this.multiAlertService = multiAlertService;\n      this.commonStrings = commonStrings;\n      this.currentAlertChange = new EventEmitter(false);\n      this.currentAlertIndexChange = new EventEmitter();\n    }\n    /**\n     * Input/Output to support two way binding on current alert instance\n     */\n\n\n    set currentAlert(alert) {\n      if (alert) {\n        this.multiAlertService.currentAlert = alert;\n      }\n    }\n\n    get currentAlert() {\n      return this.multiAlertService.currentAlert;\n    }\n    /**\n     * Input/Output to support two way binding on current alert index\n     */\n\n\n    set currentAlertIndex(index) {\n      this.multiAlertService.current = index;\n    }\n\n    get currentAlertIndex() {\n      return this.multiAlertService.current;\n    }\n\n    ngOnInit() {\n      this.multiAlertServiceChanges = this.multiAlertService.changes.subscribe(index => {\n        this.currentAlertIndexChange.emit(index);\n        this.currentAlertChange.emit(this.multiAlertService.activeAlerts[index]);\n      });\n    }\n\n    pageUp() {\n      this.multiAlertService.next();\n    }\n\n    pageDown() {\n      this.multiAlertService.previous();\n    }\n\n    ngOnDestroy() {\n      this.multiAlertServiceChanges.unsubscribe();\n    }\n\n  }\n\n  ClrAlertsPager.ɵfac = function ClrAlertsPager_Factory(t) {\n    return new (t || ClrAlertsPager)(ɵngcc0.ɵɵdirectiveInject(MultiAlertService), ɵngcc0.ɵɵdirectiveInject(ClrCommonStringsService));\n  };\n\n  ClrAlertsPager.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ClrAlertsPager,\n    selectors: [[\"clr-alerts-pager\"]],\n    hostVars: 2,\n    hostBindings: function ClrAlertsPager_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"alerts-pager\", true);\n      }\n    },\n    inputs: {\n      currentAlert: [\"clrCurrentAlert\", \"currentAlert\"],\n      currentAlertIndex: [\"clrCurrentAlertIndex\", \"currentAlertIndex\"]\n    },\n    outputs: {\n      currentAlertChange: \"clrCurrentAlertChange\",\n      currentAlertIndexChange: \"clrCurrentAlertIndexChange\"\n    },\n    decls: 9,\n    vars: 4,\n    consts: [[1, \"alerts-pager-control\"], [1, \"alerts-page-down\"], [1, \"alerts-pager-button\", 3, \"click\"], [\"shape\", \"angle\", \"direction\", \"left\"], [1, \"alerts-pager-text\"], [1, \"alerts-page-up\"], [\"shape\", \"angle\", \"direction\", \"right\"]],\n    template: function ClrAlertsPager_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵelementStart(1, \"div\", 1);\n        ɵngcc0.ɵɵelementStart(2, \"button\", 2);\n        ɵngcc0.ɵɵlistener(\"click\", function ClrAlertsPager_Template_button_click_2_listener() {\n          return ctx.pageDown();\n        });\n        ɵngcc0.ɵɵelement(3, \"cds-icon\", 3);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(4, \"div\", 4);\n        ɵngcc0.ɵɵtext(5);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(6, \"div\", 5);\n        ɵngcc0.ɵɵelementStart(7, \"button\", 2);\n        ɵngcc0.ɵɵlistener(\"click\", function ClrAlertsPager_Template_button_click_7_listener() {\n          return ctx.pageUp();\n        });\n        ɵngcc0.ɵɵelement(8, \"cds-icon\", 6);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵattribute(\"title\", ctx.commonStrings.keys.previous);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵtextInterpolate2(\"\", ctx.multiAlertService.current + 1, \" / \", ctx.multiAlertService.count, \"\");\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵattribute(\"title\", ctx.commonStrings.keys.next);\n      }\n    },\n    directives: [CdsIconCustomTag],\n    encapsulation: 2\n  });\n  return ClrAlertsPager;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nconst CLR_ALERT_DIRECTIVES = [ClrAlert, ClrAlertItem, ClrAlerts, ClrAlertsPager, ClrAlertText];\nlet ClrAlertModule = /*#__PURE__*/(() => {\n  class ClrAlertModule {\n    constructor() {\n      ClarityIcons.addIcons(checkCircleIcon, infoCircleIcon, exclamationCircleIcon, exclamationTriangleIcon, windowCloseIcon);\n    }\n\n  }\n\n  ClrAlertModule.ɵfac = function ClrAlertModule_Factory(t) {\n    return new (t || ClrAlertModule)();\n  };\n\n  ClrAlertModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: ClrAlertModule\n  });\n  ClrAlertModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule, ClrIconModule, ClrDropdownModule]]\n  });\n  return ClrAlertModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ClrAlertModule, {\n    declarations: function () {\n      return [ClrAlert, ClrAlertItem, ClrAlerts, ClrAlertsPager, ClrAlertText];\n    },\n    imports: function () {\n      return [CommonModule, ClrIconModule, ClrDropdownModule];\n    },\n    exports: function () {\n      return [ClrAlert, ClrAlertItem, ClrAlerts, ClrAlertsPager, ClrAlertText];\n    }\n  });\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrEmphasisModule = /*#__PURE__*/(() => {\n  class ClrEmphasisModule {}\n\n  ClrEmphasisModule.ɵfac = function ClrEmphasisModule_Factory(t) {\n    return new (t || ClrEmphasisModule)();\n  };\n\n  ClrEmphasisModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: ClrEmphasisModule\n  });\n  ClrEmphasisModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [ClrAlertModule]\n  });\n  return ClrEmphasisModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ClrEmphasisModule, {\n    exports: [ClrAlertModule]\n  });\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ResponsiveNavCodes = /*#__PURE__*/(() => {\n  class ResponsiveNavCodes {}\n\n  ResponsiveNavCodes.NAV_LEVEL_1 = 1;\n  ResponsiveNavCodes.NAV_LEVEL_2 = 2;\n  ResponsiveNavCodes.NAV_CLOSE_ALL = 'NAV_CLOSE_ALL';\n  ResponsiveNavCodes.NAV_OPEN = 'NAV_OPEN';\n  ResponsiveNavCodes.NAV_CLOSE = 'NAV_CLOSE';\n  ResponsiveNavCodes.NAV_TOGGLE = 'NAV_TOGGLE';\n  ResponsiveNavCodes.NAV_CLASS_HAMBURGER_MENU = 'open-hamburger-menu';\n  ResponsiveNavCodes.NAV_CLASS_OVERFLOW_MENU = 'open-overflow-menu';\n  ResponsiveNavCodes.NAV_CLASS_TRIGGER_1 = 'header-hamburger-trigger';\n  ResponsiveNavCodes.NAV_CLASS_TRIGGER_2 = 'header-overflow-trigger';\n  ResponsiveNavCodes.NAV_CLASS_LEVEL_1 = 'clr-nav-level-1';\n  ResponsiveNavCodes.NAV_CLASS_LEVEL_2 = 'clr-nav-level-2';\n  /*\n   * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n   * This software is released under MIT license.\n   * The full license information can be found in LICENSE in the root directory of this project.\n   */\n\n  return ResponsiveNavCodes;\n})();\n\nclass ResponsiveNavControlMessage {\n  constructor(_controlCode, _navLevel) {\n    this._controlCode = _controlCode;\n    this._navLevel = _navLevel;\n  }\n\n  get controlCode() {\n    return this._controlCode;\n  }\n\n  get navLevel() {\n    return this._navLevel;\n  }\n\n}\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ResponsiveNavigationService = /*#__PURE__*/(() => {\n  class ResponsiveNavigationService {\n    constructor() {\n      this.responsiveNavList = [];\n      this.registerNavSubject = new ReplaySubject();\n      this.controlNavSubject = new Subject();\n      this.closeAllNavs(); // We start with all navs closed\n    }\n\n    get registeredNavs() {\n      return this.registerNavSubject.asObservable();\n    }\n\n    get navControl() {\n      return this.controlNavSubject.asObservable();\n    }\n\n    registerNav(navLevel) {\n      if (!navLevel || this.isNavRegistered(navLevel)) {\n        return;\n      }\n\n      this.responsiveNavList.push(navLevel);\n      this.registerNavSubject.next(this.responsiveNavList);\n    }\n\n    isNavRegistered(navLevel) {\n      if (this.responsiveNavList.indexOf(navLevel) > -1) {\n        console.error('Multiple clr-nav-level ' + navLevel + ' attributes found. Please make sure that only one exists');\n        return true;\n      }\n\n      return false;\n    }\n\n    unregisterNav(navLevel) {\n      const index = this.responsiveNavList.indexOf(navLevel);\n\n      if (index > -1) {\n        this.responsiveNavList.splice(index, 1);\n        this.registerNavSubject.next(this.responsiveNavList);\n      }\n    }\n\n    sendControlMessage(controlCode, navLevel) {\n      const message = new ResponsiveNavControlMessage(controlCode, navLevel);\n      this.controlNavSubject.next(message);\n    }\n\n    closeAllNavs() {\n      const message = new ResponsiveNavControlMessage(ResponsiveNavCodes.NAV_CLOSE_ALL, -999);\n      this.controlNavSubject.next(message);\n    }\n\n  }\n\n  ResponsiveNavigationService.ɵfac = function ResponsiveNavigationService_Factory(t) {\n    return new (t || ResponsiveNavigationService)();\n  };\n\n  ResponsiveNavigationService.ɵprov = i0.ɵɵdefineInjectable({\n    factory: function ResponsiveNavigationService_Factory() {\n      return new ResponsiveNavigationService();\n    },\n    token: ResponsiveNavigationService,\n    providedIn: \"root\"\n  });\n  return ResponsiveNavigationService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrMainContainer = /*#__PURE__*/(() => {\n  class ClrMainContainer {\n    constructor(elRef, responsiveNavService) {\n      this.elRef = elRef;\n      this.responsiveNavService = responsiveNavService;\n    }\n\n    ngOnInit() {\n      this._classList = this.elRef.nativeElement.classList;\n      this._subscription = this.responsiveNavService.navControl.subscribe({\n        next: message => {\n          this.processMessage(message);\n        }\n      });\n    }\n\n    processMessage(message) {\n      let navClass = ResponsiveNavCodes.NAV_CLASS_HAMBURGER_MENU;\n\n      if (message.controlCode === ResponsiveNavCodes.NAV_CLOSE_ALL) {\n        this._classList.remove(ResponsiveNavCodes.NAV_CLASS_HAMBURGER_MENU);\n\n        this._classList.remove(ResponsiveNavCodes.NAV_CLASS_OVERFLOW_MENU);\n      } else if (message.navLevel === ResponsiveNavCodes.NAV_LEVEL_1) {\n        this.controlNav(message.controlCode, navClass);\n      } else if (message.navLevel === ResponsiveNavCodes.NAV_LEVEL_2) {\n        navClass = ResponsiveNavCodes.NAV_CLASS_OVERFLOW_MENU;\n        this.controlNav(message.controlCode, navClass);\n      }\n    }\n\n    controlNav(controlCode, navClass) {\n      if (controlCode === ResponsiveNavCodes.NAV_OPEN) {\n        this._classList.add(navClass);\n      } else if (controlCode === ResponsiveNavCodes.NAV_CLOSE) {\n        this._classList.remove(navClass);\n      } else if (controlCode === ResponsiveNavCodes.NAV_TOGGLE) {\n        this._classList.toggle(navClass);\n      }\n    }\n\n    ngOnDestroy() {\n      this._subscription.unsubscribe();\n    }\n\n  }\n\n  ClrMainContainer.ɵfac = function ClrMainContainer_Factory(t) {\n    return new (t || ClrMainContainer)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ResponsiveNavigationService));\n  };\n\n  ClrMainContainer.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: ClrMainContainer,\n    selectors: [[\"clr-main-container\"]],\n    hostVars: 2,\n    hostBindings: function ClrMainContainer_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"main-container\", true);\n      }\n    }\n  });\n  return ClrMainContainer;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nconst CLR_LAYOUT_DIRECTIVES = [ClrMainContainer];\nlet ClrMainContainerModule = /*#__PURE__*/(() => {\n  class ClrMainContainerModule {}\n\n  ClrMainContainerModule.ɵfac = function ClrMainContainerModule_Factory(t) {\n    return new (t || ClrMainContainerModule)();\n  };\n\n  ClrMainContainerModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: ClrMainContainerModule\n  });\n  ClrMainContainerModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule, ClrIconModule]]\n  });\n  return ClrMainContainerModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ClrMainContainerModule, {\n    declarations: function () {\n      return [ClrMainContainer];\n    },\n    imports: function () {\n      return [CommonModule, ClrIconModule];\n    },\n    exports: function () {\n      return [ClrMainContainer];\n    }\n  });\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet MainContainerWillyWonka = /*#__PURE__*/(() => {\n  class MainContainerWillyWonka extends WillyWonka {}\n\n  MainContainerWillyWonka.ɵfac = /*@__PURE__*/function () {\n    let ɵMainContainerWillyWonka_BaseFactory;\n    return function MainContainerWillyWonka_Factory(t) {\n      return (ɵMainContainerWillyWonka_BaseFactory || (ɵMainContainerWillyWonka_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MainContainerWillyWonka)))(t || MainContainerWillyWonka);\n    };\n  }();\n\n  MainContainerWillyWonka.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: MainContainerWillyWonka,\n    selectors: [[\"clr-main-container\"]],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  return MainContainerWillyWonka;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet NavDetectionOompaLoompa = /*#__PURE__*/(() => {\n  class NavDetectionOompaLoompa extends OompaLoompa {\n    constructor(cdr, willyWonka, responsiveNavService) {\n      if (!willyWonka) {\n        throw new Error('clr-header should only be used inside of a clr-main-container');\n      }\n\n      super(cdr, willyWonka);\n      this.responsiveNavService = responsiveNavService;\n    } // NavDetectionOompaLoompa is the addition of the nav levels\n    // Since we support 2 levels, the possibilities are 0, 1 or 3 (1 + 2)\n\n\n    get flavor() {\n      return this.responsiveNavService.responsiveNavList.reduce((sum, navLevel) => sum + navLevel, 0);\n    }\n\n  }\n\n  NavDetectionOompaLoompa.ɵfac = function NavDetectionOompaLoompa_Factory(t) {\n    return new (t || NavDetectionOompaLoompa)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MainContainerWillyWonka, 8), ɵngcc0.ɵɵdirectiveInject(ResponsiveNavigationService));\n  };\n\n  NavDetectionOompaLoompa.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: NavDetectionOompaLoompa,\n    selectors: [[\"clr-header\"]],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  return NavDetectionOompaLoompa;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrHeader = /*#__PURE__*/(() => {\n  class ClrHeader {\n    constructor(responsiveNavService, commonStrings) {\n      this.responsiveNavService = responsiveNavService;\n      this.commonStrings = commonStrings;\n      this.isNavLevel1OnPage = false;\n      this.isNavLevel2OnPage = false;\n      this.openNavLevel = null;\n      this.responsiveNavCodes = ResponsiveNavCodes;\n      this._subscription = this.responsiveNavService.registeredNavs.subscribe({\n        next: navLevelList => {\n          this.initializeNavTriggers(navLevelList);\n        }\n      });\n\n      this._subscription.add(this.responsiveNavService.navControl.pipe(filter(({\n        controlCode\n      }) => controlCode === ResponsiveNavCodes.NAV_CLOSE || controlCode === ResponsiveNavCodes.NAV_CLOSE_ALL)).subscribe(() => {\n        this.openNavLevel = null;\n      }));\n    } // reset triggers. handles cases when an application has different nav levels on different pages.\n\n\n    resetNavTriggers() {\n      this.isNavLevel1OnPage = false;\n      this.isNavLevel2OnPage = false;\n    } // decides which triggers to show on the header\n\n\n    initializeNavTriggers(navList) {\n      this.resetNavTriggers();\n\n      if (navList.length > 2) {\n        console.error('More than 2 Nav Levels detected.');\n        return;\n      }\n\n      navList.forEach(navLevel => {\n        if (navLevel === ResponsiveNavCodes.NAV_LEVEL_1) {\n          this.isNavLevel1OnPage = true;\n        } else if (navLevel === ResponsiveNavCodes.NAV_LEVEL_2) {\n          this.isNavLevel2OnPage = true;\n        }\n      });\n    } // closes the nav that is open\n\n\n    closeOpenNav() {\n      this.responsiveNavService.closeAllNavs();\n    }\n    /**\n     * @deprecated Will be removed in with @clr/angular v15.0.0\n     *\n     * Use `openNav(navLevel)` instead to open the navigation and ResponsiveNavService to close it.\n     */\n\n\n    toggleNav(navLevel) {\n      if (this.openNavLevel === navLevel) {\n        this.responsiveNavService.sendControlMessage(ResponsiveNavCodes.NAV_CLOSE, navLevel);\n        return;\n      }\n\n      this.openNav(navLevel);\n    }\n\n    openNav(navLevel) {\n      this.openNavLevel = navLevel;\n      this.responsiveNavService.sendControlMessage(ResponsiveNavCodes.NAV_OPEN, navLevel);\n    }\n\n    ngOnDestroy() {\n      this._subscription.unsubscribe();\n    }\n\n  }\n\n  ClrHeader.ɵfac = function ClrHeader_Factory(t) {\n    return new (t || ClrHeader)(ɵngcc0.ɵɵdirectiveInject(ResponsiveNavigationService), ɵngcc0.ɵɵdirectiveInject(ClrCommonStringsService));\n  };\n\n  ClrHeader.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ClrHeader,\n    selectors: [[\"clr-header\"]],\n    hostVars: 2,\n    hostBindings: function ClrHeader_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"header\", true);\n      }\n    },\n    ngContentSelectors: _c0,\n    decls: 4,\n    vars: 2,\n    consts: [[\"type\", \"button\", \"class\", \"header-hamburger-trigger\", 3, \"click\", 4, \"ngIf\"], [\"type\", \"button\", \"class\", \"header-overflow-trigger\", 3, \"click\", 4, \"ngIf\"], [1, \"header-backdrop\", 3, \"click\"], [\"type\", \"button\", 1, \"header-hamburger-trigger\", 3, \"click\"], [\"type\", \"button\", 1, \"header-overflow-trigger\", 3, \"click\"]],\n    template: function ClrHeader_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵtemplate(0, ClrHeader_button_0_Template, 2, 2, \"button\", 0);\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵtemplate(2, ClrHeader_button_2_Template, 2, 2, \"button\", 1);\n        ɵngcc0.ɵɵelementStart(3, \"div\", 2);\n        ɵngcc0.ɵɵlistener(\"click\", function ClrHeader_Template_div_click_3_listener() {\n          return ctx.closeOpenNav();\n        });\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.isNavLevel1OnPage);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.isNavLevel2OnPage);\n      }\n    },\n    directives: [ɵngcc1.NgIf],\n    encapsulation: 2\n  });\n  return ClrHeader;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nfunction collapse() {\n  'use strict';\n\n  return [state('true', style({\n    height: 0,\n    'overflow-y': 'hidden'\n  })), transition('true => false', [animate(defaultAnimationTiming, style({\n    height: '*',\n    'overflow-y': 'hidden'\n  }))]), transition('false => true', [style({\n    height: '*',\n    'overflow-y': 'hidden'\n  }), animate(defaultAnimationTiming)])];\n}\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nfunction fade(opacity = 1) {\n  return [transition('void => *', [style({\n    opacity: 0\n  }), animate(defaultAnimationTiming, style({\n    opacity: opacity\n  }))]), transition('* => void', [animate(defaultAnimationTiming, style({\n    opacity: 0\n  }))])];\n}\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nfunction fadeSlide(direction) {\n  let transform = null;\n\n  if (direction === 'up') {\n    transform = 'translate(0, 25%)';\n  } else if (direction === 'down') {\n    transform = 'translate(0, -25%)';\n  } else if (direction === 'left') {\n    transform = 'translate(25%, 0)';\n  } else if (direction === 'right') {\n    transform = 'translate(-25%, 0)';\n  } else {\n    throw new Error('Unknown direction ' + direction + ' for slide animation.');\n  }\n\n  return [transition('void => *', [style({\n    opacity: 0,\n    transform: transform\n  }), animate(defaultAnimationTiming)]), transition('* => void', [animate(defaultAnimationTiming, style({\n    opacity: 0,\n    transform: transform\n  }))])];\n}\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nfunction slide(direction) {\n  let transform = null;\n\n  if (direction === 'up') {\n    transform = 'translate(0, 25%)';\n  } else if (direction === 'down') {\n    transform = 'translate(0, -25%)';\n  } else if (direction === 'left') {\n    transform = 'translate(25%, 0)';\n  } else if (direction === 'right') {\n    transform = 'translate(-25%, 0)';\n  } else {\n    throw new Error('Unknown direction ' + direction + ' for slide animation.');\n  }\n\n  return [transition('void => *', [style({\n    transform: transform\n  }), animate(defaultAnimationTiming)]), transition('* => void', [animate(defaultAnimationTiming, style({\n    transform: transform\n  }))])];\n}\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nvar ClrAriaLivePoliteness = /*#__PURE__*/(() => {\n  (function (ClrAriaLivePoliteness) {\n    ClrAriaLivePoliteness[\"off\"] = \"off\";\n    ClrAriaLivePoliteness[\"polite\"] = \"polite\";\n    ClrAriaLivePoliteness[\"assertive\"] = \"assertive\";\n  })(ClrAriaLivePoliteness || (ClrAriaLivePoliteness = {}));\n\n  return ClrAriaLivePoliteness;\n})();\n\n/**\n * Time in milliseconds before inserting the content into the container\n */\nconst ARIA_LIVE_TICK = 100;\n/**\n * @deprecated\n *\n * -- ClrAriaLiveService is deprecated in 5.0 to be removed in 6.0 --\n * Please consider using the LiveAnnouncer in the Angular Material CDK\n * if your project needs this functionality.\n * More info: https://material.angular.io/cdk/a11y/overview#example-1\n *\n * This service handle `aria-live` accessibility attribute. The issue is that you need\n * to have the DOM Element with attribute `aria-live` before you could insert content\n * and SR (Screen Reader) pick the change and announce it.\n *\n * ```typescript\n * import { ClrAriaLiveService } from 'src/clr-angular/utils/a11y/aria-live.service';\n *\n * @Component({\n * selector: 'clr-demo-component',\n * providers: [ClrAriaLiveService],\n * template: `\n *   <ng-content></ng-content>\n * `,\n * })\n * export class DemoComponent {\n *  constructor(ariaLiveService: ClrAriaLiveService) {}\n *\n *  public actionThatWillTriggerChange() {\n *    this.ariaLiveService.announce('message that I want to announce to SR');\n *  }\n * }\n * ```\n *\n */\n\nlet ClrAriaLiveService = /*#__PURE__*/(() => {\n  class ClrAriaLiveService {\n    constructor(ngZone, _document, platformId) {\n      this.ngZone = ngZone;\n      this.platformId = platformId;\n      this._id = `clr-aria-live-element-${uniqueIdFactory()}`;\n      this.document = _document;\n    }\n    /**\n     * get access to the internal HTML `id` that gonna be used for the AriaLive container.\n     * @return ID of the DOM Element as string.\n     */\n\n\n    get id() {\n      return this._id;\n    }\n    /**\n     * Append text content inside the AriaLive Container. This method will check if the\n     * DOM Element is existing if not it will create one for us and the will apply the text.\n     *\n     * ```typescript\n     * this.ariaLiveService.announce(this.el.nativeElement);\n     * // or\n     * this.ariaLiveService.announce('Message to announce to SR');\n     * ```\n     *\n     * @remark\n     * When second argument is `AriaLivePoliteness.off` we won't create aria container or update it.\n     * The reason for that is that we don't want to do additional work if the SR will ignore it.\n     *\n     * @param message - This could be simple string or HTMLElement\n     * @param politeness - 'polite', 'assertive' or 'off'\n     */\n\n\n    announce(message, politeness = ClrAriaLivePoliteness.polite) {\n      if (politeness === ClrAriaLivePoliteness.off) {\n        return;\n      }\n\n      if (!this.ariaLiveElement && isPlatformBrowser(this.platformId)) {\n        this.ariaLiveElement = this.createContainer();\n      }\n\n      message = typeof message !== 'string' && isPlatformBrowser(this.platformId) ? message.textContent : message; // when there is no message do NOTHING!\n\n      if (!message) {\n        return;\n      }\n\n      this.ariaLiveElement.setAttribute('aria-live', politeness); // This 100ms timeout is necessary for some browser + screen-reader combinations:\n      // - Both JAWS and NVDA over IE11 will not announce anything without a non-zero timeout.\n      // - With Chrome and IE11 with NVDA or JAWS, a repeated (identical) message won't be read a\n      //   second time without clearing and then using a non-zero delay.\n      // (using JAWS 17 at time of this writing).\n\n      this.ngZone.runOutsideAngular(() => {\n        // This clearTimeout will stop all older messages from announcing\n        // in the case where the messages are comming too fast we gonna try to append only\n        // the last one. That's what the SR will try to do anyway.\n        clearTimeout(this.previousTimeout);\n        this.previousTimeout = setTimeout(() => {\n          this.ariaLiveElement.textContent = message;\n        }, ARIA_LIVE_TICK);\n      });\n    }\n    /**\n     * onDestroy life cycle - must stop all active setTimeouts and remove the AriaLive\n     * container from the document.\n     */\n\n\n    ngOnDestroy() {\n      clearTimeout(this.previousTimeout);\n\n      if (isPlatformBrowser(this.platformId) && this.ariaLiveElement) {\n        this.document.body.removeChild(this.ariaLiveElement);\n        this.ariaLiveElement = null;\n      }\n    }\n    /**\n     * Create AriaLive DOM element as a last child of the document.\n     * After the element is created, we gonna apply Clarity class to hide it from\n     * the screen and set the `aria-live` politness.\n     *\n     * `clr-sr-only` is the CSS class that is used to hide the element from the screen.\n     *\n     * @remark\n     * Calling this method multiple times will create multiple DOM Elements, that\n     * won't be tracked and will be GC after the service is destroyed.\n     *\n     * @return AriaLive container as HTMLElement\n     *\n     */\n\n\n    createContainer() {\n      const ariaLiveElement = this.document.createElement('div');\n      ariaLiveElement.setAttribute('id', this.id); // Use clarity screen reader class to hide the dom element\n      // and fix the scrollbar shake\n\n      ariaLiveElement.classList.add('clr-sr-only');\n      ariaLiveElement.setAttribute('aria-atomic', 'true');\n      ariaLiveElement.setAttribute('aria-live', ClrAriaLivePoliteness.polite);\n      this.document.body.appendChild(ariaLiveElement);\n      return ariaLiveElement;\n    }\n\n  }\n\n  ClrAriaLiveService.ɵfac = function ClrAriaLiveService_Factory(t) {\n    return new (t || ClrAriaLiveService)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(PLATFORM_ID));\n  };\n\n  ClrAriaLiveService.ɵprov = i0.ɵɵdefineInjectable({\n    factory: function ClrAriaLiveService_Factory() {\n      return new ClrAriaLiveService(i0.ɵɵinject(i0.NgZone), i0.ɵɵinject(i1.DOCUMENT), i0.ɵɵinject(i0.PLATFORM_ID));\n    },\n    token: ClrAriaLiveService,\n    providedIn: \"root\"\n  });\n  return ClrAriaLiveService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nfunction refocusIfOutsideFocusTrapElement(focusedElement, focusTrapElement, elementToRefocus) {\n  const focusTrapIsCurrent = FocusTrapTrackerService.getCurrent() === focusTrapElement;\n  const elementToFocusIsOutsideFocusTrap = elementIsOutsideFocusTrapElement(focusedElement, focusTrapElement);\n\n  if (focusTrapIsCurrent && elementToFocusIsOutsideFocusTrap) {\n    elementToRefocus = elementToRefocus || focusTrapElement;\n    elementToRefocus.focus();\n  } else {\n    focusedElement.focus();\n  }\n}\n\nfunction elementIsOutsideFocusTrapElement(focusedElement, focusTrapElement) {\n  if (focusedElement === focusTrapElement.topReboundElement || focusedElement === focusTrapElement.bottomReboundElement) {\n    return true;\n  }\n\n  const elementIsInFocusTrapLightDom = focusTrapElement.contains(focusedElement);\n\n  if (elementIsInFocusTrapLightDom) {\n    return false;\n  }\n\n  if (focusTrapElement !== null && focusTrapElement.contains(focusedElement)) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction createFocusTrapReboundElement(document) {\n  const offScreenSpan = document.createElement('span');\n  offScreenSpan.setAttribute('tabindex', '0');\n  offScreenSpan.classList.add('offscreen-focus-rebounder');\n  return offScreenSpan;\n}\n\nfunction addReboundElementsToFocusTrapElement(document, focusTrapElement) {\n  if (focusTrapElement && !focusTrapElement.topReboundElement && !focusTrapElement.bottomReboundElement) {\n    focusTrapElement.topReboundElement = createFocusTrapReboundElement(document);\n    focusTrapElement.bottomReboundElement = createFocusTrapReboundElement(document);\n    const parent = focusTrapElement.parentElement;\n    const sibling = focusTrapElement.nextSibling;\n\n    if (parent) {\n      parent.insertBefore(focusTrapElement.topReboundElement, focusTrapElement);\n\n      if (sibling) {\n        parent.insertBefore(focusTrapElement.bottomReboundElement, sibling);\n      } else {\n        parent.appendChild(focusTrapElement.bottomReboundElement);\n      }\n    }\n  }\n}\n\nfunction removeReboundElementsFromFocusTrapElement(focusTrapElement) {\n  if (focusTrapElement) {\n    const parent = focusTrapElement.parentElement;\n\n    if (parent) {\n      const topRebound = focusTrapElement.topReboundElement;\n      const bottomRebound = focusTrapElement.bottomReboundElement;\n\n      if (topRebound) {\n        parent.removeChild(topRebound);\n      }\n\n      if (bottomRebound) {\n        parent.removeChild(bottomRebound);\n      }\n    } // These are here to to make sure that we completely delete all traces of the removed DOM objects.\n\n\n    delete focusTrapElement.topReboundElement;\n    delete focusTrapElement.bottomReboundElement;\n  }\n} // this helper exists to enable the focus trap class to handle vanilla html elements\n// it's primary concern is to keep TS happy.\n\n\nfunction castHtmlElementToFocusTrapElement(el) {\n  return el;\n}\n\nlet FocusTrap = /*#__PURE__*/(() => {\n  class FocusTrap {\n    constructor(renderer, injector, platformId, hostElement) {\n      this.renderer = renderer;\n      this.active = false;\n\n      if (isPlatformBrowser(platformId)) {\n        this._document = injector.get(DOCUMENT);\n      }\n\n      hostElement = castHtmlElementToFocusTrapElement(hostElement);\n\n      if (!hostElement.focusTrapId) {\n        hostElement.focusTrapId = createId();\n      }\n\n      this.focusTrapElement = hostElement;\n    }\n\n    enableFocusTrap() {\n      const fte = this.focusTrapElement;\n      const firstFocusElement = fte.querySelector('[cds-first-focus]');\n      const activeEl = this._document.activeElement;\n\n      if (FocusTrapTrackerService.getCurrent() === fte) {\n        throw new Error('Focus trap is already enabled for this instance.');\n      }\n\n      this.firstFocusElement = firstFocusElement || this.focusTrapElement;\n      addReboundElementsToFocusTrapElement(this._document, fte);\n\n      if (!isFocusable(fte)) {\n        fte.setAttribute('tabindex', '-1');\n      }\n\n      if (activeEl && isHTMLElement(activeEl)) {\n        this.previousFocus = activeEl;\n      }\n\n      FocusTrapTrackerService.setCurrent(fte); // setTimeout here is required for Safari which may try to set focus on\n      // element before it is visible...\n\n      const focusTimer = setTimeout(() => {\n        this.firstFocusElement.focus();\n        clearTimeout(focusTimer);\n      }, 10);\n      this.onFocusInEvent = this.onFocusIn.bind(this);\n      this.unlisten = this.renderer.listen(this._document, 'focusin', this.onFocusInEvent);\n      this.active = true;\n    }\n\n    removeFocusTrap() {\n      if (this.unlisten) {\n        this.unlisten();\n      }\n\n      removeReboundElementsFromFocusTrapElement(this.focusTrapElement);\n      this.renderer.removeAttribute(this.focusTrapElement, 'tabindex');\n      FocusTrapTrackerService.activatePreviousCurrent();\n      this.active = false;\n\n      if (this.previousFocus) {\n        this.previousFocus.focus();\n      }\n    }\n\n    onFocusIn(event) {\n      refocusIfOutsideFocusTrapElement(event.composedPath()[0], this.focusTrapElement, this.firstFocusElement);\n    }\n\n  }\n\n  FocusTrap.ɵfac = function FocusTrap_Factory(t) {\n    return new (t || FocusTrap)(ɵngcc0.ɵɵinject(ɵngcc0.Renderer2), ɵngcc0.ɵɵinject(ɵngcc0.Injector), ɵngcc0.ɵɵinject(undefined), ɵngcc0.ɵɵinject(undefined));\n  };\n\n  FocusTrap.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: FocusTrap,\n    factory: FocusTrap.ɵfac\n  });\n  return FocusTrap;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nconst createCdsCloseButton = (document, ariaLabel) => {\n  const cdsCloseButton = document.createElement('cds-internal-close-button');\n  cdsCloseButton.setAttribute('icon-size', '32');\n  cdsCloseButton.setAttribute('aria-label', ariaLabel);\n  cdsCloseButton.setAttribute('aria-hidden', 'true');\n  cdsCloseButton.setAttribute('type', 'button');\n  /**\n   * The button is hidden by default based on our Desktop-first approach.\n   */\n\n  cdsCloseButton.setAttribute('hidden', 'true');\n  cdsCloseButton.className = 'clr-nav-close';\n  return cdsCloseButton;\n};\n\nconst ɵ0 = createCdsCloseButton;\nlet ClrNavLevel = /*#__PURE__*/(() => {\n  class ClrNavLevel extends FocusTrap {\n    constructor(platformId, responsiveNavService, elementRef, renderer, injector) {\n      super(renderer, injector, platformId, elementRef.nativeElement);\n      this.responsiveNavService = responsiveNavService;\n      this.elementRef = elementRef;\n      this._isOpen = false;\n\n      if (isPlatformBrowser(platformId)) {\n        this._document = injector.get(DOCUMENT);\n      }\n\n      this._subscription = responsiveNavService.navControl.pipe(filter(x => x.navLevel === this.level), filter(({\n        controlCode\n      }) => controlCode === ResponsiveNavCodes.NAV_OPEN && !this.isOpen || controlCode === ResponsiveNavCodes.NAV_CLOSE && this.isOpen)).subscribe(({\n        controlCode\n      }) => {\n        if (controlCode === ResponsiveNavCodes.NAV_OPEN) {\n          this.open();\n          return;\n        }\n\n        this.close();\n      });\n\n      this._subscription.add(responsiveNavService.navControl.pipe(filter(({\n        controlCode\n      }) => controlCode === ResponsiveNavCodes.NAV_CLOSE_ALL)).subscribe(() => this.close()));\n    }\n\n    ngOnInit() {\n      if (!this.closeButtonAriaLabel) {\n        this.closeButtonAriaLabel = this._level === ResponsiveNavCodes.NAV_LEVEL_1 ? commonStringsDefault.responsiveNavToggleClose : commonStringsDefault.responsiveNavOverflowClose;\n      }\n\n      if (this.level !== ResponsiveNavCodes.NAV_LEVEL_1 && this.level !== ResponsiveNavCodes.NAV_LEVEL_2) {\n        console.error('Nav Level can only be 1 or 2');\n        return;\n      }\n\n      this.responsiveNavService.registerNav(this.level);\n      this.addNavClass(this.level);\n    }\n\n    ngAfterViewInit() {\n      const closeButton = createCdsCloseButton(this._document, this.closeButtonAriaLabel);\n      this.renderer.listen(closeButton, 'click', this.close.bind(this));\n      this.renderer.insertBefore(this.elementRef.nativeElement, closeButton, this.elementRef.nativeElement.firstChild); // Adding the button at the top of the nav\n\n      if (this._document.body.clientWidth < LARGE_BREAKPOINT) {\n        /**\n         * Close if the document body is smaller than the large breakpoint for example:\n         * - Refreshing the page\n         * - Browser window size is changed when opening the applicaiton\n         * - Browser zoom is turned on and zoomed to a size that makes the document smaller than the large breakpoint\n         */\n        this.close();\n      }\n    }\n\n    addNavClass(level) {\n      const navHostClassList = this.elementRef.nativeElement.classList;\n\n      if (level === ResponsiveNavCodes.NAV_LEVEL_1) {\n        navHostClassList.add(ResponsiveNavCodes.NAV_CLASS_LEVEL_1);\n      } else if (level === ResponsiveNavCodes.NAV_LEVEL_2) {\n        navHostClassList.add(ResponsiveNavCodes.NAV_CLASS_LEVEL_2);\n      }\n    }\n\n    get level() {\n      return this._level;\n    } // getter to access the responsive navigation codes from the template\n\n\n    get responsiveNavCodes() {\n      return ResponsiveNavCodes;\n    }\n\n    get isOpen() {\n      return this._isOpen;\n    }\n\n    onResize(event) {\n      const target = event.target;\n\n      if (target.innerWidth < LARGE_BREAKPOINT && this.isOpen) {\n        this.close();\n        return;\n      }\n\n      this.showNavigation();\n    }\n\n    open() {\n      this._isOpen = true;\n      this.showNavigation();\n      this.enableFocusTrap();\n      this.showCloseButton();\n      this.responsiveNavService.sendControlMessage(ResponsiveNavCodes.NAV_OPEN, this.level);\n    }\n\n    close() {\n      this._isOpen = false;\n      this.hideNavigation();\n      this.removeFocusTrap();\n      this.hideCloseButton();\n      this.responsiveNavService.sendControlMessage(ResponsiveNavCodes.NAV_CLOSE, this.level);\n    } // TODO: Figure out whats the best way to do this. Possible methods\n    // 1. HostListener (current solution)\n    // 2. Directives on the .nav-link class. We discussed on moving away from class selectors but I forget the reason\n    // why\n\n\n    onMouseClick(target) {\n      let current = target; // Get the element in the DOM on which the mouse was clicked\n\n      const navHost = this.elementRef.nativeElement; // Get the current nav native HTML element\n      // Start checking if current and navHost are equal.\n      // If not traverse to the parentNode and check again.\n\n      while (current) {\n        if (current === navHost) {\n          return;\n        } else if (current.classList.contains('nav-link') && this._document.body.clientWidth < LARGE_BREAKPOINT) {\n          this.close();\n          return;\n        }\n\n        current = current.parentNode;\n      }\n    }\n\n    hideNavigation() {\n      this.renderer.setAttribute(this.elementRef.nativeElement, 'aria-hidden', 'true');\n      this.renderer.setAttribute(this.elementRef.nativeElement, 'hidden', 'true');\n    }\n\n    showNavigation() {\n      this.renderer.setAttribute(this.elementRef.nativeElement, 'aria-hidden', 'false');\n      this.renderer.removeAttribute(this.elementRef.nativeElement, 'hidden');\n    }\n\n    hideCloseButton() {\n      this.renderer.setAttribute(this.elementRef.nativeElement, 'aria-hidden', 'true');\n      this.renderer.setAttribute(this.elementRef.nativeElement.querySelector('.clr-nav-close'), 'hidden', 'true');\n    }\n\n    showCloseButton() {\n      this.renderer.setAttribute(this.elementRef.nativeElement.querySelector('.clr-nav-close'), 'aria-hidden', 'false');\n      this.renderer.removeAttribute(this.elementRef.nativeElement.querySelector('.clr-nav-close'), 'hidden');\n    }\n\n    ngOnDestroy() {\n      this.responsiveNavService.unregisterNav(this.level);\n\n      this._subscription.unsubscribe();\n    }\n\n  }\n\n  ClrNavLevel.ɵfac = function ClrNavLevel_Factory(t) {\n    return new (t || ClrNavLevel)(ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID), ɵngcc0.ɵɵdirectiveInject(ResponsiveNavigationService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector));\n  };\n\n  ClrNavLevel.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: ClrNavLevel,\n    selectors: [[\"\", \"clr-nav-level\", \"\"]],\n    hostBindings: function ClrNavLevel_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"resize\", function ClrNavLevel_resize_HostBindingHandler($event) {\n          return ctx.onResize($event);\n        }, false, ɵngcc0.ɵɵresolveWindow)(\"click\", function ClrNavLevel_click_HostBindingHandler($event) {\n          return ctx.onMouseClick($event.target);\n        });\n      }\n    },\n    inputs: {\n      closeButtonAriaLabel: [\"closeAriaLabel\", \"closeButtonAriaLabel\"],\n      _level: [\"clr-nav-level\", \"_level\"]\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  return ClrNavLevel;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nconst CLR_NAVIGATION_DIRECTIVES = [ClrHeader, ClrNavLevel, NavDetectionOompaLoompa, MainContainerWillyWonka];\nlet ClrNavigationModule = /*#__PURE__*/(() => {\n  class ClrNavigationModule {}\n\n  ClrNavigationModule.ɵfac = function ClrNavigationModule_Factory(t) {\n    return new (t || ClrNavigationModule)();\n  };\n\n  ClrNavigationModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: ClrNavigationModule\n  });\n  ClrNavigationModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule, ClrIconModule, ClrDropdownModule]]\n  });\n  return ClrNavigationModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ClrNavigationModule, {\n    declarations: function () {\n      return [ClrHeader, ClrNavLevel, NavDetectionOompaLoompa, MainContainerWillyWonka];\n    },\n    imports: function () {\n      return [CommonModule, ClrIconModule, ClrDropdownModule];\n    },\n    exports: function () {\n      return [ClrHeader, ClrNavLevel, NavDetectionOompaLoompa, MainContainerWillyWonka];\n    }\n  });\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet TemplateRefContainer = /*#__PURE__*/(() => {\n  class TemplateRefContainer {}\n\n  TemplateRefContainer.ɵfac = function TemplateRefContainer_Factory(t) {\n    return new (t || TemplateRefContainer)();\n  };\n\n  TemplateRefContainer.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: TemplateRefContainer,\n    selectors: [[\"ng-component\"]],\n    viewQuery: function TemplateRefContainer_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(TemplateRef, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.template = _t.first);\n      }\n    },\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function TemplateRefContainer_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵtemplate(0, TemplateRefContainer_ng_template_0_Template, 1, 0, \"ng-template\");\n      }\n    },\n    encapsulation: 2\n  });\n  return TemplateRefContainer;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nconst TEMPLATE_REF_DIRECTIVES = [TemplateRefContainer];\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nlet ClrTemplateRefModule = /*#__PURE__*/(() => {\n  class ClrTemplateRefModule {}\n\n  ClrTemplateRefModule.ɵfac = function ClrTemplateRefModule_Factory(t) {\n    return new (t || ClrTemplateRefModule)();\n  };\n\n  ClrTemplateRefModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: ClrTemplateRefModule\n  });\n  ClrTemplateRefModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule]]\n  });\n  return ClrTemplateRefModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ClrTemplateRefModule, {\n    declarations: function () {\n      return [TemplateRefContainer];\n    },\n    imports: function () {\n      return [CommonModule];\n    },\n    exports: function () {\n      return [TemplateRefContainer];\n    }\n  });\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet TabsWillyWonka = /*#__PURE__*/(() => {\n  class TabsWillyWonka extends WillyWonka {}\n\n  TabsWillyWonka.ɵfac = /*@__PURE__*/function () {\n    let ɵTabsWillyWonka_BaseFactory;\n    return function TabsWillyWonka_Factory(t) {\n      return (ɵTabsWillyWonka_BaseFactory || (ɵTabsWillyWonka_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(TabsWillyWonka)))(t || TabsWillyWonka);\n    };\n  }();\n\n  TabsWillyWonka.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: TabsWillyWonka,\n    selectors: [[\"clr-tabs\"]],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  return TabsWillyWonka;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ActiveOompaLoompa = /*#__PURE__*/(() => {\n  class ActiveOompaLoompa extends OompaLoompa {\n    constructor(cdr, willyWonka, id, ifActive) {\n      if (!willyWonka) {\n        throw new Error('clrTabLink and clr-tab-content should only be used inside of a clr-tabs');\n      }\n\n      super(cdr, willyWonka);\n      this.ifActive = ifActive;\n      this.id = id;\n    }\n\n    get flavor() {\n      return this.ifActive.current === this.id;\n    }\n\n  }\n\n  ActiveOompaLoompa.ɵfac = function ActiveOompaLoompa_Factory(t) {\n    return new (t || ActiveOompaLoompa)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(TabsWillyWonka, 8), ɵngcc0.ɵɵdirectiveInject(IF_ACTIVE_ID), ɵngcc0.ɵɵdirectiveInject(IfActiveService));\n  };\n\n  ActiveOompaLoompa.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: ActiveOompaLoompa,\n    selectors: [[\"\", \"clrTabLink\", \"\"], [\"clr-tab-content\"]],\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature]\n  });\n  return ActiveOompaLoompa;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nvar TabsLayout = /*#__PURE__*/(() => {\n  (function (TabsLayout) {\n    TabsLayout[\"HORIZONTAL\"] = \"horizontal\";\n    TabsLayout[\"VERTICAL\"] = \"vertical\";\n  })(TabsLayout || (TabsLayout = {}));\n\n  return TabsLayout;\n})();\n\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nlet TabsService = /*#__PURE__*/(() => {\n  class TabsService {\n    constructor() {\n      this._children = [];\n      this.layout = TabsLayout.HORIZONTAL;\n    }\n\n    register(tab) {\n      this._children.push(tab);\n    }\n\n    get children() {\n      return this._children;\n    }\n\n    get activeTab() {\n      return this.children.find(tab => {\n        return tab.active;\n      });\n    }\n\n    get overflowTabs() {\n      if (this.layout === TabsLayout.VERTICAL) {\n        return [];\n      } else {\n        return this.children.filter(tab => tab.tabLink.inOverflow === true);\n      }\n    }\n\n    unregister(tab) {\n      const index = this.children.indexOf(tab);\n\n      if (index > -1) {\n        this.children.splice(index, 1);\n      }\n    }\n\n  }\n\n  TabsService.ɵfac = function TabsService_Factory(t) {\n    return new (t || TabsService)();\n  };\n\n  TabsService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: TabsService,\n    factory: TabsService.ɵfac\n  });\n  return TabsService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet nbTabContentComponents = 0;\nlet ClrTabContent = /*#__PURE__*/(() => {\n  class ClrTabContent {\n    constructor(ifActiveService, id, ariaService, tabsService) {\n      this.ifActiveService = ifActiveService;\n      this.id = id;\n      this.ariaService = ariaService;\n      this.tabsService = tabsService;\n\n      if (!this.tabContentId) {\n        this.tabContentId = 'clr-tab-content-' + nbTabContentComponents++;\n      }\n    } // The template must be applied on the top-down phase of view-child initialization to prevent\n    // components in the content from initializing before a content container exists.\n    // Some child components need their container for sizing calculations.\n\n\n    set templateRef(value) {\n      this.viewRef = this.tabsService.tabContentViewContainer.createEmbeddedView(value);\n    }\n\n    get ariaLabelledBy() {\n      return this.ariaService.ariaLabelledBy;\n    }\n\n    get tabContentId() {\n      return this.ariaService.ariaControls;\n    }\n\n    set tabContentId(id) {\n      this.ariaService.ariaControls = id;\n    }\n\n    get active() {\n      return this.ifActiveService.current === this.id;\n    }\n\n    ngOnDestroy() {\n      const index = this.tabsService.tabContentViewContainer.indexOf(this.viewRef);\n\n      if (index > -1) {\n        this.tabsService.tabContentViewContainer.remove(index);\n      }\n    }\n\n  }\n\n  ClrTabContent.ɵfac = function ClrTabContent_Factory(t) {\n    return new (t || ClrTabContent)(ɵngcc0.ɵɵdirectiveInject(IfActiveService), ɵngcc0.ɵɵdirectiveInject(IF_ACTIVE_ID), ɵngcc0.ɵɵdirectiveInject(AriaService), ɵngcc0.ɵɵdirectiveInject(TabsService));\n  };\n\n  ClrTabContent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ClrTabContent,\n    selectors: [[\"clr-tab-content\"]],\n    viewQuery: function ClrTabContent_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c87, 7);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.templateRef = _t.first);\n      }\n    },\n    inputs: {\n      tabContentId: [\"id\", \"tabContentId\"]\n    },\n    ngContentSelectors: _c0,\n    decls: 2,\n    vars: 0,\n    consts: [[\"tabContentProjectedRef\", \"\"], [\"role\", \"tabpanel\", 1, \"tab-content\", 3, \"id\", \"hidden\"]],\n    template: function ClrTabContent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵtemplate(0, ClrTabContent_ng_template_0_Template, 2, 6, \"ng-template\", null, 0, ɵngcc0.ɵɵtemplateRefExtractor);\n      }\n    },\n    encapsulation: 2\n  });\n  return ClrTabContent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet nbTabsComponent = 0;\nconst TABS_ID = new InjectionToken('TABS_ID');\n\nfunction tokenFactory() {\n  return 'clr-tabs-' + nbTabsComponent++;\n}\n\nconst TABS_ID_PROVIDER = {\n  provide: TABS_ID,\n  useFactory: tokenFactory\n};\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\nlet nbTabLinkComponents = 0;\nlet ClrTabLink = /*#__PURE__*/(() => {\n  class ClrTabLink {\n    constructor(ifActiveService, id, ariaService, el, cfr, viewContainerRef, tabsService, tabsId) {\n      this.ifActiveService = ifActiveService;\n      this.id = id;\n      this.ariaService = ariaService;\n      this.el = el;\n      this.cfr = cfr;\n      this.viewContainerRef = viewContainerRef;\n      this.tabsService = tabsService;\n      this.tabsId = tabsId;\n\n      if (!this.tabLinkId) {\n        this.tabLinkId = 'clr-tab-link-' + nbTabLinkComponents++;\n      } // Tab links can be rendered in one of two places: in the main area or inside the overflow dropdown menu.\n      // Here, we create a container so that its template can be used to create embeddedView on the fly.\n      // See TabsService's renderView() method and how it's used in Tabs class for an example.\n\n\n      const factory = this.cfr.resolveComponentFactory(TemplateRefContainer);\n      this.templateRefContainer = this.viewContainerRef.createComponent(factory, undefined, undefined, [[this.el.nativeElement]]).instance;\n    }\n\n    set inOverflow(inOverflow) {\n      this._inOverflow = inOverflow;\n    }\n\n    get inOverflow() {\n      return this._inOverflow && this.tabsService.layout !== TabsLayout.VERTICAL;\n    }\n\n    get addLinkClasses() {\n      return !this.inOverflow;\n    }\n\n    get ariaControls() {\n      return this.ariaService.ariaControls;\n    }\n\n    get tabLinkId() {\n      return this.ariaService.ariaLabelledBy;\n    }\n\n    set tabLinkId(id) {\n      this.ariaService.ariaLabelledBy = id;\n    }\n\n    activate() {\n      this.ifActiveService.current = this.id;\n    }\n\n    get active() {\n      return this.ifActiveService.current === this.id;\n    }\n\n    get tabindex() {\n      return this.active ? 0 : -1;\n    }\n\n  }\n\n  ClrTabLink.ɵfac = function ClrTabLink_Factory(t) {\n    return new (t || ClrTabLink)(ɵngcc0.ɵɵdirectiveInject(IfActiveService), ɵngcc0.ɵɵdirectiveInject(IF_ACTIVE_ID), ɵngcc0.ɵɵdirectiveInject(AriaService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(TabsService), ɵngcc0.ɵɵdirectiveInject(TABS_ID));\n  };\n\n  ClrTabLink.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: ClrTabLink,\n    selectors: [[\"\", \"clrTabLink\", \"\"]],\n    hostAttrs: [\"role\", \"tab\", \"type\", \"button\"],\n    hostVars: 12,\n    hostBindings: function ClrTabLink_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function ClrTabLink_click_HostBindingHandler() {\n          return ctx.activate();\n        });\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx.tabLinkId);\n        ɵngcc0.ɵɵattribute(\"aria-controls\", ctx.ariaControls)(\"aria-selected\", ctx.active)(\"tabindex\", ctx.tabindex);\n        ɵngcc0.ɵɵclassProp(\"btn\", true)(\"btn-link\", ctx.addLinkClasses)(\"nav-link\", ctx.addLinkClasses)(\"active\", ctx.active);\n      }\n    },\n    inputs: {\n      tabLinkId: [\"id\", \"tabLinkId\"],\n      inOverflow: [\"clrTabLinkInOverflow\", \"inOverflow\"]\n    }\n  });\n  return ClrTabLink;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrTab = /*#__PURE__*/(() => {\n  class ClrTab {\n    constructor(ifActiveService, id, tabsService) {\n      this.ifActiveService = ifActiveService;\n      this.id = id;\n      this.tabsService = tabsService;\n      tabsService.register(this);\n    }\n\n    ngOnDestroy() {\n      this.tabsService.unregister(this);\n    }\n\n    get active() {\n      return this.ifActiveService.current === this.id;\n    }\n\n  }\n\n  ClrTab.ɵfac = function ClrTab_Factory(t) {\n    return new (t || ClrTab)(ɵngcc0.ɵɵdirectiveInject(IfActiveService), ɵngcc0.ɵɵdirectiveInject(IF_ACTIVE_ID), ɵngcc0.ɵɵdirectiveInject(TabsService));\n  };\n\n  ClrTab.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ClrTab,\n    selectors: [[\"clr-tab\"]],\n    contentQueries: function ClrTab_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, ClrTabLink, 7);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, ClrTabContent, 7);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.tabLink = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.tabContent = _t.first);\n      }\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([IF_ACTIVE_ID_PROVIDER, AriaService])],\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function ClrTab_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2\n  });\n  return ClrTab;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrTabOverflowContent = /*#__PURE__*/(() => {\n  class ClrTabOverflowContent {}\n\n  ClrTabOverflowContent.ɵfac = function ClrTabOverflowContent_Factory(t) {\n    return new (t || ClrTabOverflowContent)();\n  };\n\n  ClrTabOverflowContent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ClrTabOverflowContent,\n    selectors: [[\"clr-tab-overflow-content\"]],\n    hostVars: 2,\n    hostBindings: function ClrTabOverflowContent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"dropdown-menu\", true);\n      }\n    },\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function ClrTabOverflowContent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2\n  });\n  return ClrTabOverflowContent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrTabs = /*#__PURE__*/(() => {\n  class ClrTabs {\n    constructor(ifActiveService, toggleService, tabsService, tabsId, commonStrings) {\n      this.ifActiveService = ifActiveService;\n      this.toggleService = toggleService;\n      this.tabsService = tabsService;\n      this.tabsId = tabsId;\n      this.commonStrings = commonStrings;\n      this.subscriptions = [];\n      this._tabLinkDirectives = [];\n      this.tabLinkElements = []; // in order to check focus is triggered by click\n      // we are using this _mousedown flag\n\n      this._mousedown = false;\n    }\n\n    get overflowPosition() {\n      return this._tabLinkDirectives.filter(link => !link.inOverflow).length;\n    }\n\n    set tabContentViewContainer(value) {\n      this.tabsService.tabContentViewContainer = value;\n    }\n\n    set layout(layout) {\n      if (Object.keys(TabsLayout).map(key => {\n        return TabsLayout[key];\n      }).indexOf(layout) >= 0) {\n        this.tabsService.layout = layout;\n      }\n    }\n\n    get layout() {\n      return this.tabsService.layout;\n    }\n\n    get tabLinkDirectives() {\n      return this._tabLinkDirectives;\n    }\n\n    get activeTabInOverflow() {\n      return this.tabsService.overflowTabs.indexOf(this.tabsService.activeTab) > -1;\n    }\n\n    get activeTabPosition() {\n      return this._tabLinkDirectives.findIndex(link => link.active);\n    }\n\n    get tabIds() {\n      return this.tabsService.children.map(tab => tab.tabLink.tabLinkId).join(' ');\n    }\n\n    get isCurrentInOverflow() {\n      return this.keyFocus.current >= this.overflowPosition;\n    }\n\n    get isVertical() {\n      return this.layout === TabsLayout.VERTICAL;\n    }\n\n    toggleOverflowOnPosition(position) {\n      // we need to check current position to determine\n      // whether we need to open the tab overflow or not\n      this.toggleService.open = position >= this.overflowPosition;\n    }\n\n    set tabOverflowEl(value) {\n      this._tabOverflowEl = value && value.nativeElement;\n\n      if (this.toggleService.open && value) {\n        // only when tab overflow view element is registered,\n        // we need to move the focus to the first item\n        this.keyFocus.focusCurrent();\n      }\n    }\n\n    resetKeyFocusCurrentToActive(event) {\n      const keyFocusContainsFocus = this.keyFocus.nativeElement.contains(event.relatedTarget);\n\n      if (!keyFocusContainsFocus && this.keyFocus.current !== this.activeTabPosition) {\n        this.keyFocus.current = this.activeTabPosition;\n      }\n    }\n\n    toggleOverflowOnClick() {\n      if (this.isCurrentInOverflow && this.toggleService.open) {\n        this.keyFocus.moveTo(this.overflowPosition - 1);\n      } else {\n        this.keyFocus.moveTo(this.overflowPosition);\n      } // once click handler completes running,\n      // reset the _mousedown flag\n\n\n      this._mousedown = false;\n    }\n\n    openOverflowOnFocus() {\n      // This method should be called only on keyboard generated focus\n      // when the active tab is in the overflow\n      if (!this._mousedown && !this.toggleService.open) {\n        this.keyFocus.moveTo(this.activeTabPosition);\n      }\n    }\n\n    closeOnFocusOut(event) {\n      if (!this._tabOverflowEl.contains(event.relatedTarget) && this.toggleService.open && !this._mousedown) {\n        this.toggleService.open = false; // if the focus is out of overflow and lands on the active tab link\n        // which is currently visible, set the key focus current to activeTabPosition\n\n        if (this.tabLinkElements[this.activeTabPosition] === event.relatedTarget) {\n          this.keyFocus.current = this.activeTabPosition;\n        }\n      }\n    }\n\n    closeOnEscapeKey() {\n      // Move current to the last visible focusable item\n      this.keyFocus.moveTo(this.overflowPosition - 1);\n    }\n\n    closeOnOutsideClick(event, tabOverflowTrigger) {\n      // Exit early if the event target is the trigger element itself or element that's inside the trigger element.\n      // This is because we have another handler on the tabOverflowTrigger element itself.\n      // As this handler method is on the document level so the event bubbles up to it and conflicts\n      // with the tabOverflowTrigger handler resulting in opening the tab overflow and closing it right away consecutively.\n      if (event.target === tabOverflowTrigger || tabOverflowTrigger.contains(event.target)) {\n        return;\n      } // Move current to the last visible focusable item\n\n\n      if (!this._tabOverflowEl.contains(event.target) && this.isCurrentInOverflow) {\n        this.keyFocus.moveTo(this.overflowPosition - 1);\n      }\n    }\n\n    listenForTabLinkChanges() {\n      return this.tabs.changes.pipe(startWith(this.tabs.map(tab => tab.tabLink))).subscribe(() => {\n        this._tabLinkDirectives = this.tabs.map(tab => tab.tabLink);\n        this.tabLinkElements = this._tabLinkDirectives.map(tab => tab.el.nativeElement);\n      });\n    }\n\n    ngAfterContentInit() {\n      this.subscriptions.push(this.listenForTabLinkChanges());\n\n      if (typeof this.ifActiveService.current === 'undefined' && this.tabLinkDirectives[0]) {\n        this.tabLinkDirectives[0].activate();\n      } // set initial current position\n\n\n      this.keyFocus.current = this.activeTabPosition;\n    }\n\n    ngOnDestroy() {\n      this.subscriptions.forEach(sub => {\n        sub.unsubscribe();\n      });\n    }\n\n  }\n\n  ClrTabs.ɵfac = function ClrTabs_Factory(t) {\n    return new (t || ClrTabs)(ɵngcc0.ɵɵdirectiveInject(IfActiveService), ɵngcc0.ɵɵdirectiveInject(ClrPopoverToggleService), ɵngcc0.ɵɵdirectiveInject(TabsService), ɵngcc0.ɵɵdirectiveInject(TABS_ID), ɵngcc0.ɵɵdirectiveInject(ClrCommonStringsService));\n  };\n\n  ClrTabs.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ClrTabs,\n    selectors: [[\"clr-tabs\"]],\n    contentQueries: function ClrTabs_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, ClrTab, 4);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.tabs = _t);\n      }\n    },\n    viewQuery: function ClrTabs_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c88, 7, ViewContainerRef);\n        ɵngcc0.ɵɵviewQuery(ClrTabOverflowContent, 5, ElementRef);\n        ɵngcc0.ɵɵviewQuery(ClrKeyFocus, 7);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.tabContentViewContainer = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.tabOverflowEl = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.keyFocus = _t.first);\n      }\n    },\n    hostVars: 2,\n    hostBindings: function ClrTabs_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"tabs-vertical\", ctx.isVertical);\n      }\n    },\n    inputs: {\n      layout: [\"clrLayout\", \"layout\"]\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([IfActiveService, ClrPopoverToggleService, TabsService, TABS_ID_PROVIDER])],\n    decls: 5,\n    vars: 4,\n    consts: [[\"role\", \"tablist\", \"clrDirection\", \"both\", 1, \"nav\", 3, \"clrKeyFocus\", \"clrFocusChange\", \"focusout\"], [4, \"ngFor\", \"ngForOf\"], [4, \"ngIf\"], [\"tabContentViewContainer\", \"\"], [\"role\", \"presentation\", 1, \"nav-item\"], [3, \"ngTemplateOutlet\"], [\"role\", \"presentation\", 1, \"tabs-overflow\", \"bottom-right\"], [\"role\", \"application\", 1, \"nav-item\"], [\"type\", \"button\", \"aria-hidden\", \"true\", 1, \"btn\", \"btn-link\", \"nav-link\", \"dropdown-toggle\", 3, \"mousedown\", \"focus\", \"click\"], [\"tabOverflowTrigger\", \"\"], [\"shape\", \"ellipsis-horizontal\", \"status\", \"toggleService.open ? 'info' : null\"], [3, \"keydown.esc\", \"click\", \"focusout\", 4, \"ngIf\"], [3, \"keydown.esc\", \"click\", \"focusout\"], [3, \"ngTemplateOutlet\", 4, \"ngIf\"]],\n    template: function ClrTabs_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"ul\", 0);\n        ɵngcc0.ɵɵlistener(\"clrFocusChange\", function ClrTabs_Template_ul_clrFocusChange_0_listener($event) {\n          return ctx.toggleOverflowOnPosition($event);\n        })(\"focusout\", function ClrTabs_Template_ul_focusout_0_listener($event) {\n          return ctx.resetKeyFocusCurrentToActive($event);\n        });\n        ɵngcc0.ɵɵtemplate(1, ClrTabs_ng_container_1_Template, 2, 1, \"ng-container\", 1);\n        ɵngcc0.ɵɵtemplate(2, ClrTabs_ng_container_2_Template, 7, 10, \"ng-container\", 2);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementContainer(3, null, 3);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"clrKeyFocus\", ctx.tabLinkElements);\n        ɵngcc0.ɵɵattribute(\"aria-owns\", ctx.tabIds);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.tabLinkDirectives);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.tabsService.overflowTabs.length > 0);\n      }\n    },\n    directives: [ClrKeyFocus, ɵngcc1.NgForOf, ɵngcc1.NgIf, ɵngcc1.NgTemplateOutlet, CdsIconCustomTag, ClrTabOverflowContent],\n    encapsulation: 2\n  });\n  return ClrTabs;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nconst CLR_TABS_DIRECTIVES = [ClrTabContent, ClrTab, ClrTabs, ClrTabOverflowContent, ClrTabLink, TabsWillyWonka, ActiveOompaLoompa];\nlet ClrTabsModule = /*#__PURE__*/(() => {\n  class ClrTabsModule {\n    constructor() {\n      ClarityIcons.addIcons(ellipsisHorizontalIcon);\n    }\n\n  }\n\n  ClrTabsModule.ɵfac = function ClrTabsModule_Factory(t) {\n    return new (t || ClrTabsModule)();\n  };\n\n  ClrTabsModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: ClrTabsModule\n  });\n  ClrTabsModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule, ClrConditionalModule, ClrIconModule, ClrTemplateRefModule, ClrKeyFocusModule], ClrConditionalModule]\n  });\n  return ClrTabsModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ClrTabsModule, {\n    declarations: function () {\n      return [ClrTabContent, ClrTab, ClrTabs, ClrTabOverflowContent, ClrTabLink, TabsWillyWonka, ActiveOompaLoompa];\n    },\n    imports: function () {\n      return [CommonModule, ClrConditionalModule, ClrIconModule, ClrTemplateRefModule, ClrKeyFocusModule];\n    },\n    exports: function () {\n      return [ClrTabContent, ClrTab, ClrTabs, ClrTabOverflowContent, ClrTabLink, TabsWillyWonka, ActiveOompaLoompa, ClrConditionalModule];\n    }\n  });\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet VerticalNavGroupRegistrationService = /*#__PURE__*/(() => {\n  class VerticalNavGroupRegistrationService {\n    constructor() {\n      this.navGroupCount = 0;\n    }\n\n    registerNavGroup() {\n      this.navGroupCount++;\n    }\n\n    unregisterNavGroup() {\n      this.navGroupCount--;\n    }\n\n  }\n\n  VerticalNavGroupRegistrationService.ɵfac = function VerticalNavGroupRegistrationService_Factory(t) {\n    return new (t || VerticalNavGroupRegistrationService)();\n  };\n\n  VerticalNavGroupRegistrationService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: VerticalNavGroupRegistrationService,\n    factory: VerticalNavGroupRegistrationService.ɵfac\n  });\n  return VerticalNavGroupRegistrationService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet VerticalNavIconService = /*#__PURE__*/(() => {\n  class VerticalNavIconService {\n    constructor() {\n      this._icons = 0;\n    }\n\n    get hasIcons() {\n      return this._icons > 0;\n    }\n\n    registerIcon() {\n      this._icons++;\n    }\n\n    unregisterIcon() {\n      this._icons--;\n    }\n\n  }\n\n  VerticalNavIconService.ɵfac = function VerticalNavIconService_Factory(t) {\n    return new (t || VerticalNavIconService)();\n  };\n\n  VerticalNavIconService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: VerticalNavIconService,\n    factory: VerticalNavIconService.ɵfac\n  });\n  return VerticalNavIconService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet VerticalNavService = /*#__PURE__*/(() => {\n  class VerticalNavService {\n    constructor() {\n      this._animateOnCollapsed = new Subject();\n      this._collapsedChanged = new Subject();\n      this._collapsed = false;\n      this._collapsible = false;\n    }\n\n    get animateOnCollapsed() {\n      return this._animateOnCollapsed.asObservable();\n    }\n\n    get collapsedChanged() {\n      return this._collapsedChanged.asObservable();\n    }\n\n    get collapsed() {\n      return this._collapsed;\n    }\n\n    set collapsed(value) {\n      value = !!value;\n\n      if (this.collapsible && this._collapsed !== value) {\n        this.updateCollapseBehavior(value);\n      }\n    }\n\n    get collapsible() {\n      return this._collapsible;\n    }\n\n    set collapsible(value) {\n      value = !!value;\n\n      if (this._collapsible !== value) {\n        if (!value && this.collapsed) {\n          this.updateCollapseBehavior(false);\n        }\n\n        this._collapsible = value;\n      }\n    }\n\n    updateCollapseBehavior(value) {\n      this._animateOnCollapsed.next(value);\n\n      this._collapsed = value;\n\n      this._collapsedChanged.next(value);\n    }\n\n  }\n\n  VerticalNavService.ɵfac = function VerticalNavService_Factory(t) {\n    return new (t || VerticalNavService)();\n  };\n\n  VerticalNavService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: VerticalNavService,\n    factory: VerticalNavService.ɵfac\n  });\n  return VerticalNavService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrVerticalNav = /*#__PURE__*/(() => {\n  class ClrVerticalNav {\n    constructor(_navService, _navIconService, _navGroupRegistrationService, commonStrings) {\n      this._navService = _navService;\n      this._navIconService = _navIconService;\n      this._navGroupRegistrationService = _navGroupRegistrationService;\n      this.commonStrings = commonStrings;\n      this._collapsedChanged = new EventEmitter(true);\n      this._sub = this._navService.collapsedChanged.subscribe(value => {\n        this._collapsedChanged.emit(value);\n      });\n    }\n\n    get collapsible() {\n      return this._navService.collapsible;\n    }\n\n    set collapsible(value) {\n      this._navService.collapsible = value;\n    }\n\n    get collapsed() {\n      return this._navService.collapsed;\n    }\n\n    set collapsed(value) {\n      this._navService.collapsed = value;\n    }\n\n    get hasNavGroups() {\n      return this._navGroupRegistrationService.navGroupCount > 0;\n    }\n\n    get hasIcons() {\n      return this._navIconService.hasIcons;\n    }\n\n    get ariaExpanded() {\n      if (!this.collapsible) {\n        return null;\n      }\n\n      return !this.collapsed ? 'true' : 'false';\n    }\n\n    toggleByButton() {\n      this.collapsed = !this.collapsed;\n    }\n\n    ngOnDestroy() {\n      this._sub.unsubscribe();\n    }\n\n  }\n\n  ClrVerticalNav.ɵfac = function ClrVerticalNav_Factory(t) {\n    return new (t || ClrVerticalNav)(ɵngcc0.ɵɵdirectiveInject(VerticalNavService), ɵngcc0.ɵɵdirectiveInject(VerticalNavIconService), ɵngcc0.ɵɵdirectiveInject(VerticalNavGroupRegistrationService), ɵngcc0.ɵɵdirectiveInject(ClrCommonStringsService));\n  };\n\n  ClrVerticalNav.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ClrVerticalNav,\n    selectors: [[\"clr-vertical-nav\"]],\n    hostAttrs: [1, \"clr-vertical-nav\"],\n    hostVars: 6,\n    hostBindings: function ClrVerticalNav_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"is-collapsed\", ctx.collapsed)(\"has-nav-groups\", ctx.hasNavGroups)(\"has-icons\", ctx.hasIcons);\n      }\n    },\n    inputs: {\n      collapsible: [\"clrVerticalNavCollapsible\", \"collapsible\"],\n      collapsed: [\"clrVerticalNavCollapsed\", \"collapsed\"]\n    },\n    outputs: {\n      _collapsedChanged: \"clrVerticalNavCollapsedChange\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([VerticalNavService, VerticalNavIconService, VerticalNavGroupRegistrationService])],\n    ngContentSelectors: _c0,\n    decls: 4,\n    vars: 2,\n    consts: [[\"type\", \"button\", \"class\", \"nav-trigger\", 3, \"on-collapse\", \"click\", 4, \"ngIf\"], [1, \"nav-content\"], [\"class\", \"nav-btn\", \"aria-hidden\", \"true\", \"tabindex\", \"-1\", 3, \"click\", 4, \"ngIf\"], [\"type\", \"button\", 1, \"nav-trigger\", 3, \"click\"], [\"shape\", \"angle-double\", 1, \"nav-trigger-icon\"], [\"aria-hidden\", \"true\", \"tabindex\", \"-1\", 1, \"nav-btn\", 3, \"click\"]],\n    template: function ClrVerticalNav_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵtemplate(0, ClrVerticalNav_button_0_Template, 2, 6, \"button\", 0);\n        ɵngcc0.ɵɵelementStart(1, \"div\", 1);\n        ɵngcc0.ɵɵprojection(2);\n        ɵngcc0.ɵɵtemplate(3, ClrVerticalNav_button_3_Template, 1, 1, \"button\", 2);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.collapsible);\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.collapsible && ctx.collapsed);\n      }\n    },\n    directives: [ɵngcc1.NgIf, CdsIconCustomTag],\n    encapsulation: 2\n  });\n  return ClrVerticalNav;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet VerticalNavGroupService = /*#__PURE__*/(() => {\n  class VerticalNavGroupService {\n    constructor() {\n      this._expandChange = new Subject();\n    }\n\n    get expandChange() {\n      return this._expandChange.asObservable();\n    }\n\n    expand() {\n      this._expandChange.next(true);\n    }\n\n  }\n\n  VerticalNavGroupService.ɵfac = function VerticalNavGroupService_Factory(t) {\n    return new (t || VerticalNavGroupService)();\n  };\n\n  VerticalNavGroupService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: VerticalNavGroupService,\n    factory: VerticalNavGroupService.ɵfac\n  });\n  return VerticalNavGroupService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nconst EXPANDED_STATE = 'expanded';\nconst COLLAPSED_STATE = 'collapsed';\nlet ClrVerticalNavGroup = /*#__PURE__*/(() => {\n  class ClrVerticalNavGroup {\n    constructor(_itemExpand, _navGroupRegistrationService, _navGroupService, _navService, commonStrings) {\n      this._itemExpand = _itemExpand;\n      this._navGroupRegistrationService = _navGroupRegistrationService;\n      this._navGroupService = _navGroupService;\n      this._navService = _navService;\n      this.commonStrings = commonStrings;\n      this.wasExpanded = false;\n      this.groupLabel = this.commonStrings.keys.verticalNavGroupToggle;\n      this.expandedChange = new EventEmitter(true);\n      this._subscriptions = [];\n      this._expandAnimationState = COLLAPSED_STATE;\n\n      this._navGroupRegistrationService.registerNavGroup(); // FIXME: This subscription handles a corner case\n      // Vertical Nav collapse requires the animation to run first and then\n      // remove the nodes from the DOM. If the user directly sets the input\n      // on the clrIfExpanded directive, we have no chance to run the animation\n      // and wait for it to complete. This subscription makes sure that the\n      // animation states are correct for that edge case.\n\n\n      this._subscriptions.push(this._itemExpand.expandChange.subscribe(value => {\n        if (value && this.expandAnimationState === COLLAPSED_STATE) {\n          if (this._navService.collapsed) {\n            this._navService.collapsed = false;\n          }\n\n          this.expandAnimationState = EXPANDED_STATE;\n        } else if (!value && this.expandAnimationState === EXPANDED_STATE) {\n          this.expandAnimationState = COLLAPSED_STATE;\n        }\n      })); // 1. If the nav is collapsing, close the open nav group + save its state\n      // 2. If the nav is expanding, expand the nav group if the previous state was expanded\n\n\n      this._subscriptions.push(this._navService.animateOnCollapsed.subscribe(goingToCollapse => {\n        if (goingToCollapse && this.expanded) {\n          this.wasExpanded = true;\n          this.expandAnimationState = COLLAPSED_STATE;\n        } else if (!goingToCollapse && this.wasExpanded) {\n          this.expandGroup();\n          this.wasExpanded = false;\n        }\n      })); // If a link is clicked, expand the nav group\n\n\n      this._subscriptions.push(this._navGroupService.expandChange.subscribe(expand => {\n        if (expand && !this.expanded) {\n          this.expandGroup();\n        }\n      }));\n    }\n\n    get expanded() {\n      return this._itemExpand.expanded;\n    }\n\n    set expanded(value) {\n      if (this._itemExpand.expanded !== value) {\n        this._itemExpand.expanded = value;\n        this.expandedChange.emit(value);\n      }\n    }\n\n    set userExpandedInput(value) {\n      value = !!value;\n\n      if (this.expanded !== value) {\n        // We have to call toggleExpand because some cases require animations to occur first\n        // Directly setting the Expand service value skips the animation and can result in\n        // nodes in the DOM but the nav group still being collapsed\n        this.toggleExpand();\n      }\n    }\n\n    expandGroup() {\n      this.expanded = true; // Expanded animation occurs after Expand.expand is set to true\n\n      this.expandAnimationState = EXPANDED_STATE;\n    }\n\n    collapseGroup() {\n      // If a Vertical Nav Group toggle button is clicked while the Vertical Nav is in Collapsed state,\n      // the Vertical Nav should be expanded first.\n      this.expandAnimationState = COLLAPSED_STATE;\n    } // closes a group after the collapse animation\n\n\n    expandAnimationDone($event) {\n      if ($event.toState === COLLAPSED_STATE) {\n        this.expanded = false;\n      }\n    }\n\n    get expandAnimationState() {\n      return this._expandAnimationState;\n    }\n\n    set expandAnimationState(value) {\n      if (value !== this._expandAnimationState) {\n        this._expandAnimationState = value;\n      }\n    }\n\n    toggleExpand() {\n      if (this.expanded) {\n        this.collapseGroup();\n      } else {\n        // If nav is collasped, first open the nav\n        if (this._navService.collapsed) {\n          this._navService.collapsed = false;\n        } // then expand the nav group\n\n\n        this.expandGroup();\n      }\n    }\n\n    ngAfterContentInit() {\n      // This makes sure that if someone marks a nav group expanded in a collapsed nav\n      // the expanded property is switched back to collapsed state.\n      if (this._navService.collapsed && this.expanded) {\n        this.wasExpanded = true;\n        this.expandAnimationState = COLLAPSED_STATE;\n      }\n    }\n\n    ngOnDestroy() {\n      this._subscriptions.forEach(sub => sub.unsubscribe());\n\n      this._navGroupRegistrationService.unregisterNavGroup();\n    }\n\n  }\n\n  ClrVerticalNavGroup.ɵfac = function ClrVerticalNavGroup_Factory(t) {\n    return new (t || ClrVerticalNavGroup)(ɵngcc0.ɵɵdirectiveInject(IfExpandService), ɵngcc0.ɵɵdirectiveInject(VerticalNavGroupRegistrationService), ɵngcc0.ɵɵdirectiveInject(VerticalNavGroupService), ɵngcc0.ɵɵdirectiveInject(VerticalNavService), ɵngcc0.ɵɵdirectiveInject(ClrCommonStringsService));\n  };\n\n  ClrVerticalNavGroup.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ClrVerticalNavGroup,\n    selectors: [[\"clr-vertical-nav-group\"]],\n    hostAttrs: [1, \"nav-group\"],\n    hostVars: 2,\n    hostBindings: function ClrVerticalNavGroup_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"is-expanded\", ctx.expanded);\n      }\n    },\n    inputs: {\n      groupLabel: [\"clrVerticalNavGroupLabel\", \"groupLabel\"],\n      userExpandedInput: [\"clrVerticalNavGroupExpanded\", \"userExpandedInput\"]\n    },\n    outputs: {\n      expandedChange: \"clrVerticalNavGroupExpandedChange\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([IfExpandService, VerticalNavGroupService])],\n    ngContentSelectors: _c90,\n    decls: 9,\n    vars: 5,\n    consts: [[1, \"nav-group-content\"], [\"type\", \"button\", 1, \"nav-group-trigger\", 3, \"click\"], [1, \"nav-group-text\"], [\"shape\", \"angle\", 1, \"nav-group-trigger-icon\"], [1, \"nav-group-children\"]],\n    template: function ClrVerticalNavGroup_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c89);\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵelementStart(2, \"button\", 1);\n        ɵngcc0.ɵɵlistener(\"click\", function ClrVerticalNavGroup_Template_button_click_2_listener() {\n          return ctx.toggleExpand();\n        });\n        ɵngcc0.ɵɵprojection(3, 1);\n        ɵngcc0.ɵɵelementStart(4, \"div\", 2);\n        ɵngcc0.ɵɵprojection(5, 2);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelement(6, \"cds-icon\", 3);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(7, \"div\", 4);\n        ɵngcc0.ɵɵlistener(\"@clrExpand.done\", function ClrVerticalNavGroup_Template_div_animation_clrExpand_done_7_listener($event) {\n          return ctx.expandAnimationDone($event);\n        });\n        ɵngcc0.ɵɵprojection(8, 3);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵattribute(\"aria-expanded\", ctx.expanded)(\"aria-label\", ctx.groupLabel);\n        ɵngcc0.ɵɵadvance(4);\n        ɵngcc0.ɵɵattribute(\"direction\", ctx.expanded ? \"down\" : \"right\")(\"title\", ctx.expanded ? ctx.commonStrings.keys.collapse : ctx.commonStrings.keys.expand);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"@clrExpand\", ctx.expandAnimationState);\n      }\n    },\n    directives: [CdsIconCustomTag],\n    encapsulation: 2,\n    data: {\n      animation: [trigger('clrExpand', [state(EXPANDED_STATE, style({\n        height: '*'\n      })), state(COLLAPSED_STATE, style({\n        height: 0,\n        'overflow-y': 'hidden',\n        visibility: 'hidden'\n      })), transition(`${EXPANDED_STATE} <=> ${COLLAPSED_STATE}`, animate('0.2s ease-in-out'))])]\n    }\n  });\n  return ClrVerticalNavGroup;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrVerticalNavGroupChildren = /*#__PURE__*/(() => {\n  class ClrVerticalNavGroupChildren {}\n\n  ClrVerticalNavGroupChildren.ɵfac = function ClrVerticalNavGroupChildren_Factory(t) {\n    return new (t || ClrVerticalNavGroupChildren)();\n  };\n\n  ClrVerticalNavGroupChildren.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ClrVerticalNavGroupChildren,\n    selectors: [[\"clr-vertical-nav-group-children\"]],\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function ClrVerticalNavGroupChildren_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2\n  });\n  return ClrVerticalNavGroupChildren;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrVerticalNavIcon = /*#__PURE__*/(() => {\n  class ClrVerticalNavIcon {\n    constructor(_verticalNavIconService) {\n      this._verticalNavIconService = _verticalNavIconService;\n\n      this._verticalNavIconService.registerIcon();\n    }\n\n    ngOnDestroy() {\n      this._verticalNavIconService.unregisterIcon();\n    }\n\n  }\n\n  ClrVerticalNavIcon.ɵfac = function ClrVerticalNavIcon_Factory(t) {\n    return new (t || ClrVerticalNavIcon)(ɵngcc0.ɵɵdirectiveInject(VerticalNavIconService));\n  };\n\n  ClrVerticalNavIcon.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: ClrVerticalNavIcon,\n    selectors: [[\"\", \"clrVerticalNavIcon\", \"\"]],\n    hostAttrs: [1, \"nav-icon\"]\n  });\n  return ClrVerticalNavIcon;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrVerticalNavLink = /*#__PURE__*/(() => {\n  class ClrVerticalNavLink {\n    constructor(_navGroupService) {\n      this._navGroupService = _navGroupService;\n    }\n\n    expandParentNavGroup() {\n      if (this._navGroupService) {\n        this._navGroupService.expand();\n      }\n    }\n\n  }\n\n  ClrVerticalNavLink.ɵfac = function ClrVerticalNavLink_Factory(t) {\n    return new (t || ClrVerticalNavLink)(ɵngcc0.ɵɵdirectiveInject(VerticalNavGroupService, 8));\n  };\n\n  ClrVerticalNavLink.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ClrVerticalNavLink,\n    selectors: [[\"\", \"clrVerticalNavLink\", \"\"]],\n    hostAttrs: [1, \"nav-link\"],\n    hostBindings: function ClrVerticalNavLink_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function ClrVerticalNavLink_click_HostBindingHandler() {\n          return ctx.expandParentNavGroup();\n        });\n      }\n    },\n    attrs: _c91,\n    ngContentSelectors: _c93,\n    decls: 3,\n    vars: 0,\n    consts: [[1, \"nav-text\"]],\n    template: function ClrVerticalNavLink_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c92);\n        ɵngcc0.ɵɵprojection(0);\n        ɵngcc0.ɵɵelementStart(1, \"span\", 0);\n        ɵngcc0.ɵɵprojection(2, 1);\n        ɵngcc0.ɵɵelementEnd();\n      }\n    },\n    encapsulation: 2\n  });\n  return ClrVerticalNavLink;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nconst CLR_VERTICAL_NAV_DIRECTIVES = [ClrVerticalNav, ClrVerticalNavLink, ClrVerticalNavGroup, ClrVerticalNavGroupChildren, ClrVerticalNavIcon];\nlet ClrVerticalNavModule = /*#__PURE__*/(() => {\n  class ClrVerticalNavModule {\n    constructor() {\n      ClarityIcons.addIcons(angleIcon, angleDoubleIcon);\n    }\n\n  }\n\n  ClrVerticalNavModule.ɵfac = function ClrVerticalNavModule_Factory(t) {\n    return new (t || ClrVerticalNavModule)();\n  };\n\n  ClrVerticalNavModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: ClrVerticalNavModule\n  });\n  ClrVerticalNavModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule, ClrIconModule, ClrConditionalModule, ClrFocusOnViewInitModule], ClrConditionalModule, ClrIconModule, ClrFocusOnViewInitModule]\n  });\n  return ClrVerticalNavModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ClrVerticalNavModule, {\n    declarations: function () {\n      return [ClrVerticalNav, ClrVerticalNavLink, ClrVerticalNavGroup, ClrVerticalNavGroupChildren, ClrVerticalNavIcon];\n    },\n    imports: function () {\n      return [CommonModule, ClrIconModule, ClrConditionalModule, ClrFocusOnViewInitModule];\n    },\n    exports: function () {\n      return [ClrVerticalNav, ClrVerticalNavLink, ClrVerticalNavGroup, ClrVerticalNavGroupChildren, ClrVerticalNavIcon, ClrConditionalModule, ClrIconModule, ClrFocusOnViewInitModule];\n    }\n  });\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrLayoutModule = /*#__PURE__*/(() => {\n  class ClrLayoutModule {}\n\n  ClrLayoutModule.ɵfac = function ClrLayoutModule_Factory(t) {\n    return new (t || ClrLayoutModule)();\n  };\n\n  ClrLayoutModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: ClrLayoutModule\n  });\n  ClrLayoutModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [ClrMainContainerModule, ClrNavigationModule, ClrTabsModule, ClrVerticalNavModule]\n  });\n  return ClrLayoutModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ClrLayoutModule, {\n    exports: [ClrMainContainerModule, ClrNavigationModule, ClrTabsModule, ClrVerticalNavModule]\n  });\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ScrollingService = /*#__PURE__*/(() => {\n  class ScrollingService {\n    constructor(_document) {\n      this._document = _document;\n    }\n\n    stopScrolling() {\n      this._document.body.classList.add('no-scrolling');\n    }\n\n    resumeScrolling() {\n      if (this._document.body.classList.contains('no-scrolling')) {\n        this._document.body.classList.remove('no-scrolling');\n      }\n    }\n\n  }\n\n  ScrollingService.ɵfac = function ScrollingService_Factory(t) {\n    return new (t || ScrollingService)(ɵngcc0.ɵɵinject(DOCUMENT));\n  };\n\n  ScrollingService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: ScrollingService,\n    factory: ScrollingService.ɵfac\n  });\n  return ScrollingService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrModal = /*#__PURE__*/(() => {\n  class ClrModal {\n    constructor(_scrollingService, commonStrings, modalId) {\n      this._scrollingService = _scrollingService;\n      this.commonStrings = commonStrings;\n      this.modalId = modalId;\n      this._open = false;\n      this._openChanged = new EventEmitter(false);\n      this.closable = true;\n      this.staticBackdrop = true;\n      this.skipAnimation = 'false'; // presently this is only used by wizards\n\n      this.bypassScrollService = false;\n      this.stopClose = false;\n      this.altClose = new EventEmitter(false);\n    } // Detect when _open is set to true and set no-scrolling to true\n\n\n    ngOnChanges(changes) {\n      if (!this.bypassScrollService && changes && Object.prototype.hasOwnProperty.call(changes, '_open')) {\n        if (changes._open.currentValue) {\n          this._scrollingService.stopScrolling();\n        } else {\n          this._scrollingService.resumeScrolling();\n        }\n      }\n    }\n\n    ngOnDestroy() {\n      this._scrollingService.resumeScrolling();\n    }\n\n    open() {\n      if (this._open) {\n        return;\n      }\n\n      this._open = true;\n\n      this._openChanged.emit(true);\n    }\n\n    close() {\n      if (this.stopClose) {\n        this.altClose.emit(false);\n        return;\n      }\n\n      if (!this.closable || !this._open) {\n        return;\n      }\n\n      this._open = false; // SPECME\n\n      this.focusTrap.setPreviousFocus(); // Handles moving focus back to the element that had it before.\n    }\n\n    fadeDone(e) {\n      if (e.toState === 'void') {\n        // TODO: Investigate if we can decouple from animation events\n        this._openChanged.emit(false);\n      }\n    }\n\n  }\n\n  ClrModal.ɵfac = function ClrModal_Factory(t) {\n    return new (t || ClrModal)(ɵngcc0.ɵɵdirectiveInject(ScrollingService), ɵngcc0.ɵɵdirectiveInject(ClrCommonStringsService), ɵngcc0.ɵɵdirectiveInject(UNIQUE_ID));\n  };\n\n  ClrModal.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ClrModal,\n    selectors: [[\"clr-modal\"]],\n    viewQuery: function ClrModal_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(FocusTrapDirective, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.focusTrap = _t.first);\n      }\n    },\n    hostVars: 2,\n    hostBindings: function ClrModal_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"keyup.escape\", function ClrModal_keyup_escape_HostBindingHandler() {\n          return ctx.close();\n        }, false, ɵngcc0.ɵɵresolveBody);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"open\", ctx._open);\n      }\n    },\n    inputs: {\n      _open: [\"clrModalOpen\", \"_open\"],\n      closable: [\"clrModalClosable\", \"closable\"],\n      staticBackdrop: [\"clrModalStaticBackdrop\", \"staticBackdrop\"],\n      skipAnimation: [\"clrModalSkipAnimation\", \"skipAnimation\"],\n      bypassScrollService: [\"clrModalOverrideScrollService\", \"bypassScrollService\"],\n      stopClose: [\"clrModalPreventClose\", \"stopClose\"],\n      size: [\"clrModalSize\", \"size\"]\n    },\n    outputs: {\n      _openChanged: \"clrModalOpenChange\",\n      altClose: \"clrModalAlternateClose\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([UNIQUE_ID_PROVIDER], [ScrollingService]), ɵngcc0.ɵɵNgOnChangesFeature],\n    ngContentSelectors: _c95,\n    decls: 1,\n    vars: 1,\n    consts: [[\"clrFocusTrap\", \"\", \"class\", \"modal\", 4, \"ngIf\"], [\"clrFocusTrap\", \"\", 1, \"modal\"], [\"role\", \"dialog\", \"aria-modal\", \"true\", 1, \"modal-dialog\"], [1, \"clr-sr-only\"], [1, \"modal-content-wrapper\"], [1, \"modal-content\"], [1, \"modal-header--accessible\"], [\"clrFocusOnViewInit\", \"\", 1, \"modal-title-wrapper\", 3, \"id\"], [\"type\", \"button\", \"class\", \"close\", 3, \"click\", 4, \"ngIf\"], [1, \"modal-body-wrapper\"], [\"aria-hidden\", \"true\", 1, \"modal-backdrop\", 3, \"click\"], [\"type\", \"button\", 1, \"close\", 3, \"click\"], [\"shape\", \"window-close\"]],\n    template: function ClrModal_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c94);\n        ɵngcc0.ɵɵtemplate(0, ClrModal_div_0_Template, 17, 14, \"div\", 0);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx._open);\n      }\n    },\n    directives: [ɵngcc1.NgIf, FocusTrapDirective, ClrFocusOnViewInit, CdsIconCustomTag],\n    styles: [\"[_nghost-%COMP%] {\\n        display: none;\\n      }\\n      .open[_nghost-%COMP%] {\\n        display: inline;\\n      }\"],\n    data: {\n      animation: [trigger('fadeDown', [transition('* => false', [style({\n        opacity: 0,\n        transform: 'translate(0, -25%)'\n      }), animate('0.2s ease-in-out')]), transition('false => *', [animate('0.2s ease-in-out', style({\n        opacity: 0,\n        transform: 'translate(0, -25%)'\n      }))])]), trigger('fade', [transition('void => *', [style({\n        opacity: 0\n      }), animate('0.2s ease-in-out', style({\n        opacity: 0.85\n      }))]), transition('* => void', [animate('0.2s ease-in-out', style({\n        opacity: 0\n      }))])])]\n    }\n  });\n  return ClrModal;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/**\n * Allows modal overflow area to be scrollable via keyboard.\n * The modal body will focus with keyboard navigation only.\n * This allows inner focusable items to be focused without\n * the overflow scroll being focused.\n */\n\n\nlet ClrModalBody = /*#__PURE__*/(() => {\n  class ClrModalBody {\n    constructor(renderer, host, ngZone) {\n      this.renderer = renderer;\n      this.host = host;\n      this.tabindex = '0';\n      this.unlisteners = [];\n      ngZone.runOutsideAngular(() => {\n        this.observer = new ResizeObserver(() => this.addOrRemoveTabIndex());\n        this.observer.observe(this.host.nativeElement);\n        this.unlisteners.push(this.renderer.listen(this.host.nativeElement, 'mouseup', () => {\n          // set the tabindex binding back when click is completed with mouseup\n          this.addOrRemoveTabIndex();\n        }), this.renderer.listen(this.host.nativeElement, 'mousedown', () => {\n          // tabindex = 0 binding should be removed\n          // so it won't be focused when click starts with mousedown\n          this.removeTabIndex();\n        }));\n      });\n    }\n\n    ngOnDestroy() {\n      while (this.unlisteners.length) {\n        this.unlisteners.pop()();\n      }\n\n      this.observer.disconnect();\n      this.observer = null;\n    }\n\n    addTabIndex() {\n      this.renderer.setAttribute(this.host.nativeElement, 'tabindex', this.tabindex);\n    }\n\n    removeTabIndex() {\n      this.renderer.removeAttribute(this.host.nativeElement, 'tabindex');\n    }\n\n    addOrRemoveTabIndex() {\n      const modalBody = this.host.nativeElement.parentElement;\n\n      if (modalBody.clientHeight < modalBody.scrollHeight) {\n        this.addTabIndex();\n      } else {\n        this.removeTabIndex();\n      }\n    }\n\n  }\n\n  ClrModalBody.ɵfac = function ClrModalBody_Factory(t) {\n    return new (t || ClrModalBody)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n  };\n\n  ClrModalBody.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: ClrModalBody,\n    selectors: [[\"\", 8, \"modal-body\"]]\n  });\n  return ClrModalBody;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nconst CLR_MODAL_DIRECTIVES = [ClrModal, ClrModalBody];\nlet ClrModalModule = /*#__PURE__*/(() => {\n  class ClrModalModule {\n    constructor() {\n      ClarityIcons.addIcons(windowCloseIcon);\n    }\n\n  }\n\n  ClrModalModule.ɵfac = function ClrModalModule_Factory(t) {\n    return new (t || ClrModalModule)();\n  };\n\n  ClrModalModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: ClrModalModule\n  });\n  ClrModalModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule, ClrIconModule, ClrFocusTrapModule, ClrFocusOnViewInitModule], ClrIconModule, ClrFocusOnViewInitModule]\n  });\n  return ClrModalModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ClrModalModule, {\n    declarations: function () {\n      return [ClrModal, ClrModalBody];\n    },\n    imports: function () {\n      return [CommonModule, ClrIconModule, ClrFocusTrapModule, ClrFocusOnViewInitModule];\n    },\n    exports: function () {\n      return [ClrModal, ClrModalBody, ClrIconModule, ClrFocusOnViewInitModule];\n    }\n  });\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nconst SIGNPOST_POSITIONS = {\n  'top-left': {\n    anchorPoint: Point.TOP_CENTER,\n    popoverPoint: Point.BOTTOM_RIGHT,\n    offsetY: -10,\n    offsetX: 0\n  },\n  'top-middle': {\n    anchorPoint: Point.TOP_CENTER,\n    popoverPoint: Point.BOTTOM_CENTER,\n    offsetY: -10,\n    offsetX: 0\n  },\n  'top-right': {\n    anchorPoint: Point.TOP_CENTER,\n    popoverPoint: Point.BOTTOM_LEFT,\n    offsetY: -10,\n    offsetX: 0\n  },\n  'right-top': {\n    anchorPoint: Point.RIGHT_CENTER,\n    popoverPoint: Point.LEFT_BOTTOM,\n    offsetY: 2,\n    offsetX: 14\n  },\n  'right-middle': {\n    anchorPoint: Point.RIGHT_CENTER,\n    popoverPoint: Point.LEFT_CENTER,\n    offsetY: 6,\n    offsetX: 14\n  },\n  'right-bottom': {\n    anchorPoint: Point.RIGHT_CENTER,\n    popoverPoint: Point.LEFT_TOP,\n    offsetY: -1,\n    offsetX: 14\n  },\n  'bottom-right': {\n    anchorPoint: Point.BOTTOM_CENTER,\n    popoverPoint: Point.TOP_LEFT,\n    offsetY: 9,\n    offsetX: -1\n  },\n  'bottom-middle': {\n    anchorPoint: Point.BOTTOM_CENTER,\n    popoverPoint: Point.TOP_CENTER,\n    offsetY: 9,\n    offsetX: 12\n  },\n  'bottom-left': {\n    anchorPoint: Point.BOTTOM_CENTER,\n    popoverPoint: Point.TOP_RIGHT,\n    offsetY: 9,\n    offsetX: 0\n  },\n  'left-bottom': {\n    anchorPoint: Point.LEFT_CENTER,\n    popoverPoint: Point.RIGHT_TOP,\n    offsetY: 0,\n    offsetX: -14\n  },\n  'left-middle': {\n    anchorPoint: Point.LEFT_CENTER,\n    popoverPoint: Point.RIGHT_CENTER,\n    offsetY: 4,\n    offsetX: -14\n  },\n  'left-top': {\n    anchorPoint: Point.LEFT_CENTER,\n    popoverPoint: Point.RIGHT_BOTTOM,\n    offsetY: 0,\n    offsetX: -14\n  },\n  default: {\n    anchorPoint: Point.RIGHT_CENTER,\n    popoverPoint: Point.LEFT_CENTER,\n    offsetY: 6,\n    offsetX: 14\n  }\n};\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n// aka where the arrow / pointer is at in relation to the anchor\n\nconst POSITIONS$1 = ['top-left', 'top-middle', 'top-right', 'right-top', 'right-middle', 'right-bottom', 'bottom-right', 'bottom-middle', 'bottom-left', 'left-bottom', 'left-middle', 'left-top'];\nlet ClrSignpostContent = /*#__PURE__*/(() => {\n  class ClrSignpostContent extends AbstractPopover {\n    constructor(injector, parentHost, commonStrings, signpostContentId, signpostIdService, signpostFocusManager, platformId, document) {\n      super(injector, parentHost);\n      this.commonStrings = commonStrings;\n      this.signpostContentId = signpostContentId;\n      this.signpostIdService = signpostIdService;\n      this.signpostFocusManager = signpostFocusManager;\n      this.platformId = platformId;\n\n      if (!parentHost) {\n        throw new Error('clr-signpost-content should only be used inside of a clr-signpost');\n      } // Defaults\n\n\n      this.position = 'right-middle';\n      this.closeOnOutsideClick = true;\n      this.signpostIdService.setId(signpostContentId);\n      this.document = document;\n    }\n    /**********\n     *\n     * @description\n     * Close function that uses the signpost instance to toggle the state of the content popover.\n     *\n     */\n\n\n    close() {\n      this.toggleService.open = false;\n    }\n\n    get position() {\n      return this._position;\n    }\n    /*********\n     *\n     * @description\n     * A setter for the position of the ClrSignpostContent popover. This is a combination of the following:\n     * - anchorPoint - where on the trigger to anchor the ClrSignpostContent\n     * - popoverPoint - where on the ClrSignpostContent container to align with the anchorPoint\n     * - offsetY - where on the Y axis to align the ClrSignpostContent so it meets specs\n     * - offsetX - where on the X axis to align the ClrSignpostContent so it meets specs\n     * There are 12 possible positions to place a ClrSignpostContent container:\n     * - top-left\n     * - top-middle\n     * - top-right\n     * - right-top\n     * - right-middle\n     * - right-bottom\n     * - bottom-right\n     * - bottom-middle\n     * - bottom-left\n     * - left-bottom\n     * - left-middle\n     * - left-top\n     *\n     * I think of it as follows for 'top-left' -> CONTAINER_SIDE-SIDE_POSITION. In this case CONTAINER_SIDE is 'top'\n     * meaning the top of the trigger icon (above the icon that hides/shows) the ClrSignpostContent. And, SIDE_POSITION\n     * is 'left' meaning two things: 1) the ClrSignpostContent container extends to the left and 2) the 'arrow/pointer'\n     * linking the SingpostContent to the trigger points down at the horizontal center of the trigger icon.\n     *\n     * @param newPosition\n     */\n\n\n    set position(position) {\n      // Ugh\n      this.renderer.removeClass(this.el.nativeElement, this.position);\n\n      if (position && POSITIONS$1.indexOf(position) > -1) {\n        this._position = position;\n      } else {\n        this._position = 'right-middle';\n      } // Ugh\n\n\n      this.renderer.addClass(this.el.nativeElement, this.position);\n      const setPosition = SIGNPOST_POSITIONS[this.position];\n      this.anchorPoint = setPosition.anchorPoint;\n      this.popoverPoint = setPosition.popoverPoint;\n      this.popoverOptions.offsetY = setPosition.offsetY;\n      this.popoverOptions.offsetX = setPosition.offsetX;\n    }\n\n    ngOnDestroy() {\n      if (isPlatformBrowser(this.platformId) && this.el.nativeElement.contains(this.document.activeElement)) {\n        this.signpostFocusManager.focusTrigger();\n      }\n    }\n\n  }\n\n  ClrSignpostContent.ɵfac = function ClrSignpostContent_Factory(t) {\n    return new (t || ClrSignpostContent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector), ɵngcc0.ɵɵdirectiveInject(POPOVER_HOST_ANCHOR, 8), ɵngcc0.ɵɵdirectiveInject(ClrCommonStringsService), ɵngcc0.ɵɵdirectiveInject(UNIQUE_ID), ɵngcc0.ɵɵdirectiveInject(SignpostIdService), ɵngcc0.ɵɵdirectiveInject(SignpostFocusManager), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID), ɵngcc0.ɵɵdirectiveInject(DOCUMENT));\n  };\n\n  ClrSignpostContent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ClrSignpostContent,\n    selectors: [[\"clr-signpost-content\"]],\n    hostVars: 3,\n    hostBindings: function ClrSignpostContent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx.signpostContentId);\n        ɵngcc0.ɵɵclassProp(\"signpost-content\", true);\n      }\n    },\n    inputs: {\n      position: [\"clrPosition\", \"position\"]\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([UNIQUE_ID_PROVIDER]), ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c0,\n    decls: 7,\n    vars: 3,\n    consts: [[1, \"signpost-wrap\"], [1, \"popover-pointer\"], [1, \"signpost-content-header\"], [\"type\", \"button\", 1, \"signpost-action\", \"close\", 3, \"click\"], [\"shape\", \"window-close\"], [1, \"signpost-content-body\"]],\n    template: function ClrSignpostContent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵelement(1, \"div\", 1);\n        ɵngcc0.ɵɵelementStart(2, \"div\", 2);\n        ɵngcc0.ɵɵelementStart(3, \"button\", 3);\n        ɵngcc0.ɵɵlistener(\"click\", function ClrSignpostContent_Template_button_click_3_listener() {\n          return ctx.close();\n        });\n        ɵngcc0.ɵɵelement(4, \"cds-icon\", 4);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(5, \"div\", 5);\n        ɵngcc0.ɵɵprojection(6);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(3);\n        ɵngcc0.ɵɵattribute(\"aria-label\", ctx.commonStrings.keys.signpostClose)(\"aria-controls\", ctx.signpostContentId);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵattribute(\"title\", ctx.commonStrings.keys.close);\n      }\n    },\n    directives: [CdsIconCustomTag],\n    encapsulation: 2\n  });\n  return ClrSignpostContent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nconst CLR_SIGNPOST_DIRECTIVES = [ClrSignpost, ClrSignpostContent, ClrSignpostTrigger];\nlet ClrSignpostModule = /*#__PURE__*/(() => {\n  class ClrSignpostModule {\n    constructor() {\n      ClarityIcons.addIcons(windowCloseIcon, infoCircleIcon);\n    }\n\n  }\n\n  ClrSignpostModule.ɵfac = function ClrSignpostModule_Factory(t) {\n    return new (t || ClrSignpostModule)();\n  };\n\n  ClrSignpostModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: ClrSignpostModule\n  });\n  ClrSignpostModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule, ClrIconModule, ClrFocusOnViewInitModule], ClrConditionalModule]\n  });\n  return ClrSignpostModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ClrSignpostModule, {\n    declarations: function () {\n      return [ClrSignpost, ClrSignpostContent, ClrSignpostTrigger];\n    },\n    imports: function () {\n      return [CommonModule, ClrIconModule, ClrFocusOnViewInitModule];\n    },\n    exports: function () {\n      return [ClrSignpost, ClrSignpostContent, ClrSignpostTrigger, ClrConditionalModule];\n    }\n  });\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet TooltipIdService = /*#__PURE__*/(() => {\n  class TooltipIdService {\n    constructor() {\n      this._id = new Subject();\n    }\n\n    updateId(id) {\n      this._id.next(id);\n    }\n\n    get id() {\n      return this._id.asObservable();\n    }\n\n  }\n\n  TooltipIdService.ɵfac = function TooltipIdService_Factory(t) {\n    return new (t || TooltipIdService)();\n  };\n\n  TooltipIdService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: TooltipIdService,\n    factory: TooltipIdService.ɵfac\n  });\n  return TooltipIdService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrTooltip = /*#__PURE__*/(() => {\n  class ClrTooltip {}\n\n  ClrTooltip.ɵfac = function ClrTooltip_Factory(t) {\n    return new (t || ClrTooltip)();\n  };\n\n  ClrTooltip.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ClrTooltip,\n    selectors: [[\"clr-tooltip\"]],\n    hostVars: 2,\n    hostBindings: function ClrTooltip_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"tooltip\", true);\n      }\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([ClrPopoverToggleService, {\n      provide: POPOVER_HOST_ANCHOR,\n      useExisting: ElementRef\n    }, // TODO: consider centralizing the unique id string on a service that provides ariaAttributes that need it\n    // AriaService in layout/tabs/providers might be a good starting point.\n    UNIQUE_ID_PROVIDER, TooltipIdService])],\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function ClrTooltip_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2\n  });\n  return ClrTooltip;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nconst POSITIONS = ['bottom-left', 'bottom-right', 'top-left', 'top-right', 'right', 'left'];\nconst SIZES = ['xs', 'sm', 'md', 'lg'];\nlet ClrTooltipContent = /*#__PURE__*/(() => {\n  class ClrTooltipContent extends AbstractPopover {\n    constructor(injector, parentHost, uniqueId, tooltipIdService) {\n      super(injector, parentHost);\n      this.uniqueId = uniqueId;\n      this.tooltipIdService = tooltipIdService;\n\n      if (!parentHost) {\n        throw new Error('clr-tooltip-content should only be used inside of a clr-tooltip');\n      } // Defaults\n\n\n      this.position = 'right';\n      this.size = 'sm'; // Set the default id in case consumer does not supply a custom id.\n\n      this.updateId(uniqueId);\n    }\n\n    get id() {\n      return this._id;\n    }\n\n    set id(value) {\n      this.updateId(value || '');\n    }\n\n    updateId(id) {\n      this._id = id;\n      this.tooltipIdService.updateId(id);\n    }\n\n    get position() {\n      return this._position;\n    }\n\n    set position(position) {\n      // Ugh\n      this.renderer.removeClass(this.el.nativeElement, 'tooltip-' + this.position);\n\n      if (position && POSITIONS.indexOf(position) > -1) {\n        this._position = position;\n      } else {\n        this._position = 'right';\n      } // Ugh\n\n\n      this.renderer.addClass(this.el.nativeElement, 'tooltip-' + this.position); // set the popover values based on direction\n\n      switch (position) {\n        case 'top-right':\n          this.anchorPoint = Point.TOP_CENTER;\n          this.popoverPoint = Point.LEFT_BOTTOM;\n          break;\n\n        case 'top-left':\n          this.anchorPoint = Point.TOP_CENTER;\n          this.popoverPoint = Point.RIGHT_BOTTOM;\n          break;\n\n        case 'bottom-right':\n          this.anchorPoint = Point.BOTTOM_CENTER;\n          this.popoverPoint = Point.LEFT_TOP;\n          break;\n\n        case 'bottom-left':\n          this.anchorPoint = Point.BOTTOM_CENTER;\n          this.popoverPoint = Point.RIGHT_TOP;\n          break;\n\n        case 'right':\n          this.anchorPoint = Point.RIGHT_CENTER;\n          this.popoverPoint = Point.LEFT_TOP;\n          break;\n\n        case 'left':\n          this.anchorPoint = Point.LEFT_CENTER;\n          this.popoverPoint = Point.RIGHT_TOP;\n          break;\n\n        default:\n          this.anchorPoint = Point.RIGHT_CENTER;\n          this.popoverPoint = Point.LEFT_TOP;\n          break;\n      }\n    }\n\n    get size() {\n      return this._size;\n    }\n\n    set size(size) {\n      // Ugh\n      this.renderer.removeClass(this.el.nativeElement, 'tooltip-' + this.size);\n\n      if (size && SIZES.indexOf(size) > -1) {\n        this._size = size;\n      } else {\n        this._size = 'sm';\n      } // Ugh\n\n\n      this.renderer.addClass(this.el.nativeElement, 'tooltip-' + this.size);\n    }\n\n  }\n\n  ClrTooltipContent.ɵfac = function ClrTooltipContent_Factory(t) {\n    return new (t || ClrTooltipContent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector), ɵngcc0.ɵɵdirectiveInject(POPOVER_HOST_ANCHOR, 8), ɵngcc0.ɵɵdirectiveInject(UNIQUE_ID), ɵngcc0.ɵɵdirectiveInject(TooltipIdService));\n  };\n\n  ClrTooltipContent.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ClrTooltipContent,\n    selectors: [[\"clr-tooltip-content\"]],\n    hostVars: 6,\n    hostBindings: function ClrTooltipContent_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n        ɵngcc0.ɵɵattribute(\"role\", \"tooltip\");\n        ɵngcc0.ɵɵstyleProp(\"opacity\", 1);\n        ɵngcc0.ɵɵclassProp(\"tooltip-content\", true);\n      }\n    },\n    inputs: {\n      position: [\"clrPosition\", \"position\"],\n      size: [\"clrSize\", \"size\"],\n      id: \"id\"\n    },\n    features: [ɵngcc0.ɵɵInheritDefinitionFeature],\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function ClrTooltipContent_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2\n  });\n  return ClrTooltipContent;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrTooltipTrigger = /*#__PURE__*/(() => {\n  class ClrTooltipTrigger {\n    constructor(toggleService, tooltipIdService) {\n      this.toggleService = toggleService;\n      this.tooltipIdService = tooltipIdService;\n      this.subs = []; // The aria-described by comes from the id of content. It\n\n      this.subs.push(this.tooltipIdService.id.subscribe(tooltipId => this.ariaDescribedBy = tooltipId));\n    }\n\n    showTooltip() {\n      this.toggleService.open = true;\n    }\n\n    hideTooltip() {\n      this.toggleService.open = false;\n    }\n\n    ngOnDestroy() {\n      this.subs.forEach(sub => sub.unsubscribe());\n    }\n\n  }\n\n  ClrTooltipTrigger.ɵfac = function ClrTooltipTrigger_Factory(t) {\n    return new (t || ClrTooltipTrigger)(ɵngcc0.ɵɵdirectiveInject(ClrPopoverToggleService), ɵngcc0.ɵɵdirectiveInject(TooltipIdService));\n  };\n\n  ClrTooltipTrigger.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: ClrTooltipTrigger,\n    selectors: [[\"\", \"clrTooltipTrigger\", \"\"]],\n    hostAttrs: [\"tabindex\", \"0\"],\n    hostVars: 4,\n    hostBindings: function ClrTooltipTrigger_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"mouseenter\", function ClrTooltipTrigger_mouseenter_HostBindingHandler() {\n          return ctx.showTooltip();\n        })(\"focus\", function ClrTooltipTrigger_focus_HostBindingHandler() {\n          return ctx.showTooltip();\n        })(\"mouseleave\", function ClrTooltipTrigger_mouseleave_HostBindingHandler() {\n          return ctx.hideTooltip();\n        })(\"blur\", function ClrTooltipTrigger_blur_HostBindingHandler() {\n          return ctx.hideTooltip();\n        });\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-describedby\", ctx.ariaDescribedBy)(\"role\", \"button\");\n        ɵngcc0.ɵɵclassProp(\"tooltip-trigger\", true);\n      }\n    }\n  });\n  return ClrTooltipTrigger;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nconst CLR_TOOLTIP_DIRECTIVES = [ClrTooltip, ClrTooltipTrigger, ClrTooltipContent];\nlet ClrTooltipModule = /*#__PURE__*/(() => {\n  class ClrTooltipModule {}\n\n  ClrTooltipModule.ɵfac = function ClrTooltipModule_Factory(t) {\n    return new (t || ClrTooltipModule)();\n  };\n\n  ClrTooltipModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: ClrTooltipModule\n  });\n  ClrTooltipModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule], ClrConditionalModule, ClrIconModule]\n  });\n  return ClrTooltipModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ClrTooltipModule, {\n    declarations: function () {\n      return [ClrTooltip, ClrTooltipTrigger, ClrTooltipContent];\n    },\n    imports: function () {\n      return [CommonModule];\n    },\n    exports: function () {\n      return [ClrTooltip, ClrTooltipTrigger, ClrTooltipContent, ClrConditionalModule, ClrIconModule];\n    }\n  });\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrPopoverModule = /*#__PURE__*/(() => {\n  class ClrPopoverModule {}\n\n  ClrPopoverModule.ɵfac = function ClrPopoverModule_Factory(t) {\n    return new (t || ClrPopoverModule)();\n  };\n\n  ClrPopoverModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: ClrPopoverModule\n  });\n  ClrPopoverModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [ClrDropdownModule, ClrSignpostModule, ClrTooltipModule]\n  });\n  return ClrPopoverModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ClrPopoverModule, {\n    exports: [ClrDropdownModule, ClrSignpostModule, ClrTooltipModule]\n  });\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrProgressBar = /*#__PURE__*/(() => {\n  class ClrProgressBar {\n    constructor() {\n      this.externalId = ''; // Progress\n\n      this.max = 100;\n      this._value = 0;\n    }\n\n    set id(value) {\n      this._ID = value;\n      this.externalId = null;\n    }\n\n    get id() {\n      return this._ID;\n    }\n\n    get value() {\n      return this._value;\n    }\n\n    set value(value) {\n      /**\n       * No need to convert to `number` cause we could have\n       * floating point and parseInt will round the numbers\n       *\n       * working with string won't have any side-effects,\n       * we don't do any math so string will do the job.\n       */\n      this._value = value;\n    } // Styles\n\n\n    get progressClass() {\n      return true;\n    }\n\n    get labeledClass() {\n      return this._labeled;\n    }\n\n    set clrLabeled(value) {\n      this._labeled = isBooleanAttributeSet(value);\n    }\n\n    get fadeClass() {\n      return this._fade;\n    }\n\n    set clrFade(value) {\n      this._fade = isBooleanAttributeSet(value);\n    }\n\n    get loopClass() {\n      return this._loop;\n    }\n\n    set clrLoop(value) {\n      this._loop = isBooleanAttributeSet(value);\n    }\n\n    get successClass() {\n      return this._success;\n    }\n    /** @deprecated since 2.0, remove in 4.0 */\n\n\n    set clrSuccess(value) {\n      this._success = isBooleanAttributeSet(value);\n    }\n\n    get dangerClass() {\n      return this._danger;\n    }\n    /** @deprecated since 2.0, remove in 4.0 */\n\n\n    set clrDanger(value) {\n      this._danger = isBooleanAttributeSet(value);\n    }\n\n    get flashClass() {\n      return this._flash;\n    }\n\n    set clrFlash(value) {\n      this._flash = isBooleanAttributeSet(value);\n    }\n\n    get flashDangerClass() {\n      return this._flashDanger;\n    }\n    /** @deprecated since 2.0, remove in 4.0 */\n\n\n    set clrFlashDanger(value) {\n      this._flashDanger = isBooleanAttributeSet(value);\n    }\n    /**\n     * Display optional text only when labeled is eneabled\n     */\n\n\n    displayStringValue() {\n      return this._labeled;\n    }\n    /**\n     * Make sure that we always will have something that is readable\n     * for the screen reader\n     */\n\n\n    get displayValue() {\n      if (this.displayval) {\n        return this.displayval;\n      }\n\n      return `${this.value || 0}%`;\n    }\n\n  }\n\n  ClrProgressBar.ɵfac = function ClrProgressBar_Factory(t) {\n    return new (t || ClrProgressBar)();\n  };\n\n  ClrProgressBar.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ClrProgressBar,\n    selectors: [[\"clr-progress-bar\"]],\n    hostVars: 17,\n    hostBindings: function ClrProgressBar_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"id\", ctx.externalId);\n        ɵngcc0.ɵɵclassProp(\"progress\", ctx.progressClass)(\"labeled\", ctx.labeledClass)(\"progress-fade\", ctx.fadeClass)(\"loop\", ctx.loopClass)(\"success\", ctx.successClass)(\"danger\", ctx.dangerClass)(\"flash\", ctx.flashClass)(\"flash-danger\", ctx.flashDangerClass);\n      }\n    },\n    inputs: {\n      max: [\"clrMax\", \"max\"],\n      id: \"id\",\n      value: [\"clrValue\", \"value\"],\n      clrLabeled: \"clrLabeled\",\n      clrFade: \"clrFade\",\n      clrLoop: \"clrLoop\",\n      clrSuccess: \"clrSuccess\",\n      clrDanger: \"clrDanger\",\n      clrFlash: \"clrFlash\",\n      clrFlashDanger: \"clrFlashDanger\",\n      displayval: [\"clrDisplayval\", \"displayval\"]\n    },\n    decls: 2,\n    vars: 5,\n    consts: [[3, \"id\"], [4, \"ngIf\"]],\n    template: function ClrProgressBar_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelement(0, \"progress\", 0);\n        ɵngcc0.ɵɵtemplate(1, ClrProgressBar_span_1_Template, 2, 1, \"span\", 1);\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"id\", ctx.id);\n        ɵngcc0.ɵɵattribute(\"max\", ctx.max)(\"value\", ctx.value)(\"data-displayval\", ctx.displayValue);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.displayStringValue());\n      }\n    },\n    directives: [ɵngcc1.NgIf],\n    encapsulation: 2\n  });\n  return ClrProgressBar;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nconst CLR_PROGRESS_BAR_DIRECTIVES = [ClrProgressBar];\nlet ClrProgressBarModule = /*#__PURE__*/(() => {\n  class ClrProgressBarModule {}\n\n  ClrProgressBarModule.ɵfac = function ClrProgressBarModule_Factory(t) {\n    return new (t || ClrProgressBarModule)();\n  };\n\n  ClrProgressBarModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: ClrProgressBarModule\n  });\n  ClrProgressBarModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule]]\n  });\n  return ClrProgressBarModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ClrProgressBarModule, {\n    declarations: function () {\n      return [ClrProgressBar];\n    },\n    imports: function () {\n      return [CommonModule];\n    },\n    exports: function () {\n      return [ClrProgressBar];\n    }\n  });\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nvar ClrTimelineLayout = /*#__PURE__*/(() => {\n  (function (ClrTimelineLayout) {\n    ClrTimelineLayout[\"HORIZONTAL\"] = \"horizontal\";\n    ClrTimelineLayout[\"VERTICAL\"] = \"vertical\";\n  })(ClrTimelineLayout || (ClrTimelineLayout = {}));\n\n  return ClrTimelineLayout;\n})();\n\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nvar ClrTimelineStepState = /*#__PURE__*/(() => {\n  (function (ClrTimelineStepState) {\n    ClrTimelineStepState[\"NOT_STARTED\"] = \"not-started\";\n    ClrTimelineStepState[\"CURRENT\"] = \"current\";\n    ClrTimelineStepState[\"PROCESSING\"] = \"processing\";\n    ClrTimelineStepState[\"SUCCESS\"] = \"success\";\n    ClrTimelineStepState[\"ERROR\"] = \"error\";\n  })(ClrTimelineStepState || (ClrTimelineStepState = {}));\n\n  return ClrTimelineStepState;\n})();\n\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nlet TimelineIconAttributeService = /*#__PURE__*/(() => {\n  class TimelineIconAttributeService {\n    constructor(commonStrings) {\n      this.attributeMap = new Map();\n      this.attributeMap.set(ClrTimelineStepState.NOT_STARTED, {\n        iconShape: 'circle',\n        iconStatus: null,\n        ariaLabel: commonStrings.keys.timelineStepNotStarted\n      });\n      this.attributeMap.set(ClrTimelineStepState.CURRENT, {\n        iconShape: 'dot-circle',\n        iconStatus: 'info',\n        ariaLabel: commonStrings.keys.timelineStepCurrent\n      });\n      this.attributeMap.set(ClrTimelineStepState.PROCESSING, {\n        iconShape: undefined,\n        iconStatus: null,\n        ariaLabel: commonStrings.keys.timelineStepProcessing\n      });\n      this.attributeMap.set(ClrTimelineStepState.SUCCESS, {\n        iconShape: 'success-standard',\n        iconStatus: 'success',\n        ariaLabel: commonStrings.keys.timelineStepSuccess\n      });\n      this.attributeMap.set(ClrTimelineStepState.ERROR, {\n        iconShape: 'error-standard',\n        iconStatus: 'danger',\n        ariaLabel: commonStrings.keys.timelineStepError\n      });\n    }\n\n    getAriaLabel(step) {\n      return this.attributeMap.get(step).ariaLabel;\n    }\n\n    getIconShape(step) {\n      return this.attributeMap.get(step).iconShape;\n    }\n\n    getIconStatus(step) {\n      return this.attributeMap.get(step).iconStatus;\n    }\n\n  }\n\n  TimelineIconAttributeService.ɵfac = function TimelineIconAttributeService_Factory(t) {\n    return new (t || TimelineIconAttributeService)(ɵngcc0.ɵɵinject(ClrCommonStringsService));\n  };\n\n  TimelineIconAttributeService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: TimelineIconAttributeService,\n    factory: TimelineIconAttributeService.ɵfac\n  });\n  return TimelineIconAttributeService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrTimeline = /*#__PURE__*/(() => {\n  class ClrTimeline {\n    constructor() {\n      this.layout = ClrTimelineLayout.HORIZONTAL;\n    }\n\n    get isVertical() {\n      return this.layout === ClrTimelineLayout.VERTICAL;\n    }\n\n  }\n\n  ClrTimeline.ɵfac = function ClrTimeline_Factory(t) {\n    return new (t || ClrTimeline)();\n  };\n\n  ClrTimeline.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ClrTimeline,\n    selectors: [[\"clr-timeline\"]],\n    hostVars: 4,\n    hostBindings: function ClrTimeline_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"clr-timeline\", true)(\"clr-timeline-vertical\", ctx.isVertical);\n      }\n    },\n    inputs: {\n      layout: [\"clrLayout\", \"layout\"]\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([TimelineIconAttributeService])],\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function ClrTimeline_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2\n  });\n  return ClrTimeline;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/**\n * Note: Why does this component have aria-hidden attribute?\n *\n * tl;dr: we want screen readers to ignore this element when its reading out to blind users.\n *\n * In order to make a timeline step accessible to screen readers we need the title read out before the\n * icon. In order to do this, ClrTimeLine step has a ContentChild that queries for the ClrTimelineStepTitle and\n * then adds the projected text into a .clr-sr-only element that is a sibling element to the icon. See the\n * ClrTimlineStep template for the DOM structure.\n */\n\n\nlet ClrTimelineStepTitle = /*#__PURE__*/(() => {\n  class ClrTimelineStepTitle {}\n\n  ClrTimelineStepTitle.ɵfac = function ClrTimelineStepTitle_Factory(t) {\n    return new (t || ClrTimelineStepTitle)();\n  };\n\n  ClrTimelineStepTitle.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ClrTimelineStepTitle,\n    selectors: [[\"clr-timeline-step-title\"]],\n    hostVars: 3,\n    hostBindings: function ClrTimelineStepTitle_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-hidden\", true);\n        ɵngcc0.ɵɵclassProp(\"clr-timeline-step-title\", true);\n      }\n    },\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function ClrTimelineStepTitle_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2\n  });\n  return ClrTimelineStepTitle;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrTimelineStep = /*#__PURE__*/(() => {\n  class ClrTimelineStep {\n    constructor(iconAttributeService, platformId) {\n      this.iconAttributeService = iconAttributeService;\n      this.platformId = platformId;\n      this.state = ClrTimelineStepState.NOT_STARTED;\n    }\n\n    ngAfterContentInit() {\n      if (this.stepTitle && isPlatformBrowser(this.platformId)) {\n        this.stepTitleText = this.stepTitle.nativeElement.innerText;\n      }\n    }\n\n    get iconAriaCurrent() {\n      return this.state === ClrTimelineStepState.CURRENT;\n    }\n\n    get iconAriaLabel() {\n      return this.iconAttributeService.getAriaLabel(this.state);\n    }\n\n    get iconShape() {\n      return this.iconAttributeService.getIconShape(this.state);\n    }\n\n    get iconStatus() {\n      return this.iconAttributeService.getIconStatus(this.state);\n    }\n\n    get isProcessing() {\n      return this.state === ClrTimelineStepState.PROCESSING;\n    }\n\n  }\n\n  ClrTimelineStep.ɵfac = function ClrTimelineStep_Factory(t) {\n    return new (t || ClrTimelineStep)(ɵngcc0.ɵɵdirectiveInject(TimelineIconAttributeService), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID));\n  };\n\n  ClrTimelineStep.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ClrTimelineStep,\n    selectors: [[\"clr-timeline-step\"]],\n    contentQueries: function ClrTimelineStep_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, ClrTimelineStepTitle, 5, ElementRef);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.stepTitle = _t.first);\n      }\n    },\n    hostVars: 2,\n    hostBindings: function ClrTimelineStep_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"clr-timeline-step\", true);\n      }\n    },\n    inputs: {\n      state: [\"clrState\", \"state\"]\n    },\n    ngContentSelectors: _c97,\n    decls: 9,\n    vars: 3,\n    consts: [[1, \"clr-sr-only\"], [4, \"ngIf\", \"ngIfElse\"], [1, \"clr-timeline-step-body\"], [\"processing\", \"\"], [\"clrMedium\", \"\"]],\n    template: function ClrTimelineStep_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c96);\n        ɵngcc0.ɵɵprojection(0);\n        ɵngcc0.ɵɵelementStart(1, \"span\", 0);\n        ɵngcc0.ɵɵtext(2);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(3, ClrTimelineStep_ng_container_3_Template, 2, 4, \"ng-container\", 1);\n        ɵngcc0.ɵɵelementStart(4, \"div\", 2);\n        ɵngcc0.ɵɵprojection(5, 1);\n        ɵngcc0.ɵɵprojection(6, 2);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(7, ClrTimelineStep_ng_template_7_Template, 1, 1, \"ng-template\", null, 3, ɵngcc0.ɵɵtemplateRefExtractor);\n      }\n\n      if (rf & 2) {\n        const _r1 = ɵngcc0.ɵɵreference(8);\n\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵtextInterpolate(ctx.stepTitleText);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.isProcessing)(\"ngIfElse\", _r1);\n      }\n    },\n    directives: [ɵngcc1.NgIf, CdsIconCustomTag, ClrSpinner],\n    encapsulation: 2\n  });\n  return ClrTimelineStep;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrTimelineStepDescription = /*#__PURE__*/(() => {\n  class ClrTimelineStepDescription {}\n\n  ClrTimelineStepDescription.ɵfac = function ClrTimelineStepDescription_Factory(t) {\n    return new (t || ClrTimelineStepDescription)();\n  };\n\n  ClrTimelineStepDescription.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ClrTimelineStepDescription,\n    selectors: [[\"clr-timeline-step-description\"]],\n    hostVars: 2,\n    hostBindings: function ClrTimelineStepDescription_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"clr-timeline-step-description\", true);\n      }\n    },\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function ClrTimelineStepDescription_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2\n  });\n  return ClrTimelineStepDescription;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrTimelineStepHeader = /*#__PURE__*/(() => {\n  class ClrTimelineStepHeader {}\n\n  ClrTimelineStepHeader.ɵfac = function ClrTimelineStepHeader_Factory(t) {\n    return new (t || ClrTimelineStepHeader)();\n  };\n\n  ClrTimelineStepHeader.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ClrTimelineStepHeader,\n    selectors: [[\"clr-timeline-step-header\"]],\n    hostVars: 2,\n    hostBindings: function ClrTimelineStepHeader_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"clr-timeline-step-header\", true);\n      }\n    },\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function ClrTimelineStepHeader_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2\n  });\n  return ClrTimelineStepHeader;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nconst CLR_TIMELINE_DIRECTIVES = [ClrTimeline, ClrTimelineStep, ClrTimelineStepDescription, ClrTimelineStepHeader, ClrTimelineStepTitle];\nlet ClrTimelineModule = /*#__PURE__*/(() => {\n  class ClrTimelineModule {\n    constructor() {\n      ClarityIcons.addIcons(circleIcon, dotCircleIcon, errorStandardIcon, successStandardIcon);\n    }\n\n  }\n\n  ClrTimelineModule.ɵfac = function ClrTimelineModule_Factory(t) {\n    return new (t || ClrTimelineModule)();\n  };\n\n  ClrTimelineModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: ClrTimelineModule\n  });\n  ClrTimelineModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule, ClrIconModule, ClrSpinnerModule], ClrIconModule, ClrSpinnerModule]\n  });\n  return ClrTimelineModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ClrTimelineModule, {\n    declarations: function () {\n      return [ClrTimeline, ClrTimelineStep, ClrTimelineStepDescription, ClrTimelineStepHeader, ClrTimelineStepTitle];\n    },\n    imports: function () {\n      return [CommonModule, ClrIconModule, ClrSpinnerModule];\n    },\n    exports: function () {\n      return [ClrTimeline, ClrTimelineStep, ClrTimelineStepDescription, ClrTimelineStepHeader, ClrTimelineStepTitle, ClrIconModule, ClrSpinnerModule];\n    }\n  });\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ButtonHubService = /*#__PURE__*/(() => {\n  class ButtonHubService {\n    constructor() {\n      this.buttonsReady = false;\n      this._previousBtnClicked = new Subject();\n      this._nextBtnClicked = new Subject();\n      this._dangerBtnClicked = new Subject();\n      this._cancelBtnClicked = new Subject();\n      this._finishBtnClicked = new Subject();\n      this._customBtnClicked = new Subject();\n    }\n\n    get previousBtnClicked() {\n      return this._previousBtnClicked.asObservable();\n    }\n\n    get nextBtnClicked() {\n      return this._nextBtnClicked.asObservable();\n    }\n\n    get dangerBtnClicked() {\n      return this._dangerBtnClicked.asObservable();\n    }\n\n    get cancelBtnClicked() {\n      return this._cancelBtnClicked.asObservable();\n    }\n\n    get finishBtnClicked() {\n      return this._finishBtnClicked.asObservable();\n    }\n\n    get customBtnClicked() {\n      return this._customBtnClicked.asObservable();\n    }\n\n    buttonClicked(buttonType) {\n      if ('previous' === buttonType) {\n        this._previousBtnClicked.next();\n      } else if ('next' === buttonType) {\n        this._nextBtnClicked.next();\n      } else if ('finish' === buttonType) {\n        this._finishBtnClicked.next();\n      } else if ('danger' === buttonType) {\n        this._dangerBtnClicked.next();\n      } else if ('cancel' === buttonType) {\n        this._cancelBtnClicked.next();\n      } else {\n        this._customBtnClicked.next(buttonType);\n      }\n    }\n\n  }\n\n  ButtonHubService.ɵfac = function ButtonHubService_Factory(t) {\n    return new (t || ButtonHubService)();\n  };\n\n  ButtonHubService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: ButtonHubService,\n    factory: ButtonHubService.ɵfac\n  });\n  return ButtonHubService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/**\n * PageCollectionService manages the collection of pages assigned to the wizard and offers\n * a number of functions useful across the wizards providers and subcomponents -- all related\n * to essentially lookups on the collection of pages.\n *\n * The easiest way to access PageCollectionService is via the wizard. The\n * following example would allow you to access your instance of the wizard from your host\n * component and thereby access the page collection via YourHostComponent.wizard.pageCollection.\n *\n * @example\n * <clr-wizard #wizard ...>\n *\n * @example\n * export class YourHostComponent {\n *   @ViewChild(\"wizard\") wizard: Wizard;\n *   ...\n * }\n *\n * The heart of the page collection is the query list of pages, which it is assigned as a\n * reference to the Wizard.pages QueryList when the wizard is created.\n *\n */\n\n\nlet PageCollectionService = /*#__PURE__*/(() => {\n  class PageCollectionService {\n    constructor() {\n      // used by the navService to navigate back to first possible step after\n      // pages are reset\n\n      /**\n       *\n       * @memberof PageCollectionService\n       */\n      this._pagesReset = new Subject();\n    }\n    /**\n     * Converts the PageCollectionService.pages QueryList to an array and returns it.\n     *\n     * Useful for many instances when you would prefer a QueryList to act like an array.\n     *\n     * @memberof PageCollectionService\n     */\n\n\n    get pagesAsArray() {\n      return this.pages ? this.pages.toArray() : [];\n    }\n    /**\n     * Returns the length of the pages query list.\n     *\n     * @memberof PageCollectionService\n     */\n\n\n    get pagesCount() {\n      return this.pages ? this.pages.length : 0;\n    }\n    /**\n     * Returns the next-to-last page in the query list of pages. Operates as a getter\n     * so that it isn't working with stale data.\n     *\n     * @memberof PageCollectionService\n     */\n\n\n    get penultimatePage() {\n      const pageCount = this.pagesCount;\n\n      if (pageCount < 2) {\n        return null;\n      }\n\n      return this.pagesAsArray[pageCount - 2];\n    }\n    /**\n     * Returns the last page in the query list of pages. Operates as a getter\n     * so that it isn't working with stale data.\n     *\n     * @memberof PageCollectionService\n     */\n\n\n    get lastPage() {\n      const pageCount = this.pagesCount;\n\n      if (pageCount < 1) {\n        return null;\n      }\n\n      return this.pagesAsArray[pageCount - 1];\n    }\n    /**\n     * Returns the first page in the query list of pages. Operates as a getter\n     * so that it isn't working with stale data.\n     *\n     * @memberof PageCollectionService\n     */\n\n\n    get firstPage() {\n      if (!this.pagesCount) {\n        return null;\n      }\n\n      return this.pagesAsArray[0];\n    }\n    /**\n     * Used mostly internally, but accepts a string ID and returns a ClrWizardPage\n     * object that matches the ID passed. Note that IDs here should include the prefix\n     * \"clr-wizard-page-\".\n     *\n     * Returns the next-to-last page in the query list of pages. Operates as a getter\n     * so that it isn't working with stale data.\n     *\n     * @memberof PageCollectionService\n     */\n\n\n    getPageById(id) {\n      const foundPages = this.pages.filter(page => id === page.id);\n      return this.checkResults(foundPages, id);\n    }\n    /**\n     * Accepts s number as a parameter and treats that number as the index of the page\n     * you're looking for in the collection of pages. Returns a  wizard page object.\n     *\n     * @memberof PageCollectionService\n     */\n\n\n    getPageByIndex(index) {\n      const pageCount = this.pagesCount;\n      const pagesLastIndex = pageCount > 1 ? pageCount - 1 : 0;\n\n      if (index < 0) {\n        throw new Error('Cannot retrieve page with index of ' + index);\n      }\n\n      if (index > pagesLastIndex) {\n        throw new Error('Page index is greater than length of pages array.');\n      }\n\n      return this.pagesAsArray[index];\n    }\n    /**\n     * Takes a wizard page object as a parameter and returns its index in the\n     * collection of pages.\n     *\n     * @memberof PageCollectionService\n     */\n\n\n    getPageIndex(page) {\n      const index = this.pagesAsArray.indexOf(page);\n\n      if (index < 0) {\n        throw new Error('Requested page cannot be found in collection of pages.');\n      }\n\n      return index;\n    }\n    /**\n     * Consolidates guard logic that prevents a couple of unfortunate edge cases with\n     * look ups on the collection of pages.\n     *\n     * @memberof PageCollectionService\n     */\n\n\n    checkResults(results, requestedPageId) {\n      const foundPagesCount = results.length || 0;\n\n      if (foundPagesCount > 1) {\n        throw new Error('More than one page has the requested id ' + requestedPageId + '.');\n      } else if (foundPagesCount < 1) {\n        throw new Error('No page can be found with the id ' + requestedPageId + '.');\n      } else {\n        return results[0];\n      }\n    }\n    /**\n     * Accepts two numeric indexes and returns an array of wizard page objects that include\n     * all wizard pages in the page collection from the first index to the second.\n     *\n     * @memberof PageCollectionService\n     */\n\n\n    pageRange(start, end) {\n      let pages = [];\n\n      if (start < 0 || end < 0) {\n        return [];\n      }\n\n      if (start === null || typeof start === 'undefined' || isNaN(start)) {\n        return [];\n      }\n\n      if (end === null || typeof end === 'undefined' || isNaN(end)) {\n        return [];\n      }\n\n      if (end > this.pagesCount) {\n        end = this.pagesCount;\n      }\n\n      pages = this.pagesAsArray;\n\n      if (end - start === 0) {\n        // just return the one page they want\n        return [this.getPageByIndex(start)];\n      } // slice end does not include item referenced by end index, which is weird for users\n      // incrementing end index here to correct that so users and other methods\n      // don't have to think about it\n\n\n      end = end + 1; // slice does not return the last one in the range but it does include the first one\n      // does not modify original array\n\n      return pages.slice(start, end);\n    }\n    /**\n     * Accepts two wizard page objects and returns those page objects with all other page\n     * objects between them in the page collection. It doesn't care which page is ahead of the\n     * other in the parameters. It will be smart enough to figure that out  on its own.\n     *\n     * @memberof PageCollectionService\n     */\n\n\n    getPageRangeFromPages(page, otherPage) {\n      const pageIndex = this.getPageIndex(page);\n      const otherPageIndex = this.getPageIndex(otherPage);\n      let startIndex;\n      let endIndex;\n\n      if (pageIndex <= otherPageIndex) {\n        startIndex = pageIndex;\n        endIndex = otherPageIndex;\n      } else {\n        startIndex = otherPageIndex;\n        endIndex = pageIndex;\n      }\n\n      return this.pageRange(startIndex, endIndex);\n    }\n    /**\n     * Takes a wizard page object as a parameter and returns the wizard page object of\n     * the page immediately before it in the page collection. Returns null if there is\n     * no page before the page it is passed.\n     *\n     * @memberof PageCollectionService\n     */\n\n\n    getPreviousPage(page) {\n      const myPageIndex = this.getPageIndex(page);\n      const previousPageIndex = myPageIndex - 1;\n\n      if (previousPageIndex < 0) {\n        return null;\n      }\n\n      return this.getPageByIndex(previousPageIndex);\n    }\n    /**\n     * Accepts a wizard page object as a parameter and returns a Boolean that says if\n     * the page you sent it is complete.\n     *\n     * @memberof PageCollectionService\n     */\n\n\n    previousPageIsCompleted(page) {\n      if (!page) {\n        return false;\n      }\n\n      const previousPage = this.getPreviousPage(page);\n\n      if (null === previousPage) {\n        // page is the first page. no previous page.\n        return true;\n      }\n\n      return previousPage.completed;\n    }\n    /**\n     * Takes a wizard page object as a parameter and returns the wizard page object of\n     * the page immediately after it in the page collection. Returns null if there is\n     * no page after the page it is passed.\n     *\n     * @memberof PageCollectionService\n     */\n\n\n    getNextPage(page) {\n      const myPageIndex = this.getPageIndex(page);\n      const nextPageIndex = myPageIndex + 1;\n\n      if (nextPageIndex >= this.pagesAsArray.length) {\n        return null;\n      }\n\n      return this.getPageByIndex(nextPageIndex);\n    }\n    /**\n     * Takes a wizard page object as a parameter and generates a step item id from the\n     * page ID. Returns the generated step item ID as a string.\n     *\n     * @memberof PageCollectionService\n     */\n\n\n    getStepItemIdForPage(page) {\n      const pageId = page.id;\n      const pageIdParts = pageId.split('-').reverse();\n      pageIdParts[1] = 'step';\n      return pageIdParts.reverse().join('-');\n    }\n    /**\n     * Generally only used internally to mark that a specific page has been \"committed\".\n     * This involves marking the page complete and firing the ClrWizardPage.onCommit\n     * (clrWizardPageOnCommit) output. Takes the wizard page object that you intend to\n     * mark completed as a parameter.\n     *\n     * @memberof PageCollectionService\n     */\n\n\n    commitPage(page) {\n      const pageHasOverrides = page.stopNext || page.preventDefault;\n      page.completed = true;\n\n      if (!pageHasOverrides) {\n        // prevent loop of event emission; alternate flows work off\n        // of event emitters this is how they break that cycle.\n        page.onCommit.emit(page.id);\n      }\n    }\n    /**\n     * An observable that the navigation service listens to in order to know when\n     * the page collection completed states have been reset to false so that way it\n     * can also reset the navigation to make the first page in the page collection\n     * current/active.\n     *\n     * @memberof PageCollectionService\n     */\n\n\n    get pagesReset() {\n      return this._pagesReset.asObservable();\n    }\n    /**\n     * Sets all completed states of the pages in the page collection to false and\n     * notifies the navigation service to likewise reset the navigation.\n     *\n     * @memberof PageCollectionService\n     */\n\n\n    reset() {\n      this.pagesAsArray.forEach(page => {\n        page.completed = false;\n      });\n\n      this._pagesReset.next(true);\n    }\n    /**\n     * Rolls through all the pages in the page collection to make sure there are no\n     * incomplete pages sandwiched between completed pages in the workflow. Identifies\n     * the first incomplete page index and sets all pages behind it to a completed\n     * state of false.\n     *\n     * @memberof PageCollectionService\n     */\n\n\n    updateCompletedStates() {\n      const firstIncompleteIndex = this.findFirstIncompletePageIndex();\n\n      if (firstIncompleteIndex === this.pagesAsArray.length - 1) {\n        // all complete no need to do anything\n        return;\n      }\n\n      this.pagesAsArray.forEach((page, index) => {\n        if (index > firstIncompleteIndex) {\n          page.completed = false;\n        }\n      });\n    }\n    /**\n     * Retrieves the index of the first incomplete page in the page collection.\n     *\n     * @memberof PageCollectionService\n     */\n\n\n    findFirstIncompletePageIndex() {\n      let returnIndex = null;\n      this.pagesAsArray.forEach((page, index) => {\n        if (null === returnIndex && false === page.completed) {\n          returnIndex = index;\n        }\n      }); // fallthrough, all completed, return last page\n\n      if (null === returnIndex) {\n        returnIndex = this.pagesCount - 1;\n      }\n\n      return returnIndex;\n    }\n\n    findFirstIncompletePage() {\n      const myIncompleteIndex = this.findFirstIncompletePageIndex();\n      return this.pagesAsArray[myIncompleteIndex];\n    }\n\n  }\n\n  PageCollectionService.ɵfac = function PageCollectionService_Factory(t) {\n    return new (t || PageCollectionService)();\n  };\n\n  PageCollectionService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: PageCollectionService,\n    factory: PageCollectionService.ɵfac\n  });\n  return PageCollectionService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/**\n * Performs navigation functions for a wizard and manages the current page. Presented as a\n * separate service to encapsulate the behavior of navigating and completing the wizard so\n * that it can be shared across the wizard and its sub-components.\n *\n * The easiest way to access the navigation service is there a reference on your wizard. The\n * Following example would allow you to access your instance of the wizard from your host\n * component and thereby access the navigation service via YourHostComponent.wizard.navService.\n *\n * @example\n * <clr-wizard #wizard ...>\n *\n * @example\n * export class YourHostComponent {\n *   @ViewChild(\"wizard\") wizard: Wizard;\n *   ...\n * }\n *\n */\n\n\nlet WizardNavigationService = /*#__PURE__*/(() => {\n  class WizardNavigationService {\n    /**\n     * Creates an instance of WizardNavigationService. Also sets up subscriptions\n     * that listen to the button service to determine when a button has been clicked\n     * in the wizard. Is also responsible for taking action when the page collection\n     * requests that navigation be reset to its pristine state.\n     *\n     * @memberof WizardNavigationService\n     */\n    constructor(pageCollection, buttonService) {\n      this.pageCollection = pageCollection;\n      this.buttonService = buttonService;\n      /**\n       *\n       * @memberof WizardNavigationService\n       */\n\n      this._currentChanged = new Subject();\n      /**\n       * A Boolean flag used by the ClrWizardPage to avoid a race condition when pages are\n       * loading and there is no current page defined.\n       *\n       * @memberof WizardNavigationService\n       */\n\n      this.navServiceLoaded = false;\n      /**\n       * A boolean flag shared across the Wizard subcomponents that follows the value\n       * of the Wizard.forceForward (clrWizardForceForwardNavigation) input. When true,\n       * navigating backwards in the stepnav menu will reset any skipped pages' completed\n       * state to false.\n       *\n       * This is useful when a wizard executes validation on a page-by-page basis when\n       * the next button is clicked.\n       *\n       * @memberof WizardNavigationService\n       */\n\n      this.forceForwardNavigation = false;\n      /**\n       * @memberof WizardNavigationService\n       */\n\n      this._movedToNextPage = new Subject();\n      /**\n       * @memberof WizardNavigationService\n       */\n\n      this._wizardFinished = new Subject();\n      /**\n       * @memberof WizardNavigationService\n       */\n\n      this._movedToPreviousPage = new Subject();\n      /**\n       * @memberof WizardNavigationService\n       */\n\n      this._cancelWizard = new Subject();\n      /**\n       * A boolean flag shared across the Wizard subcomponents that follows the value\n       * of the Wizard.stopCancel (clrWizardPreventDefaultCancel) input. When true, the cancel\n       * routine is subverted and must be reinstated in the host component calling Wizard.close()\n       * at some point.\n       *\n       * @memberof WizardNavigationService\n       */\n\n      this.wizardHasAltCancel = false;\n      /**\n       * A boolean flag shared across the Wizard subcomponents that follows the value\n       * of the Wizard.stopNext (clrWizardPreventDefaultNext) input. When true, the next and finish\n       * routines are subverted and must be reinstated in the host component calling Wizard.next(),\n       * Wizard.forceNext(), Wizard.finish(), or Wizard.forceFinish().\n       *\n       * @memberof WizardNavigationService\n       */\n\n      this.wizardHasAltNext = false;\n      /**\n       * A boolean flag shared across the Wizard subcomponents that follows the value\n       * of the Wizard.stopNavigation (clrWizardPreventNavigation) input. When true, all\n       * navigational elements in the wizard are disabled.\n       *\n       * This is intended to freeze the wizard in place. Events are not fired so this is\n       * not a way to implement alternate functionality for navigation.\n       *\n       * @memberof WizardNavigationService\n       */\n\n      this.wizardStopNavigation = false;\n      /**\n       * A boolean flag shared with the stepnav items that prevents user clicks on\n       * stepnav items from navigating the wizard.\n       *\n       * @memberof WizardNavigationService\n       */\n\n      this.wizardDisableStepnav = false;\n      this.previousButtonSubscription = this.buttonService.previousBtnClicked.subscribe(() => {\n        const currentPage = this.currentPage;\n\n        if (this.currentPageIsFirst || currentPage.previousStepDisabled) {\n          return;\n        }\n\n        currentPage.previousButtonClicked.emit(currentPage);\n\n        if (!currentPage.preventDefault) {\n          this.previous();\n        }\n      });\n      this.nextButtonSubscription = this.buttonService.nextBtnClicked.subscribe(() => {\n        this.checkAndCommitCurrentPage('next');\n      });\n      this.dangerButtonSubscription = this.buttonService.dangerBtnClicked.subscribe(() => {\n        this.checkAndCommitCurrentPage('danger');\n      });\n      this.finishButtonSubscription = this.buttonService.finishBtnClicked.subscribe(() => {\n        this.checkAndCommitCurrentPage('finish');\n      });\n      this.customButtonSubscription = this.buttonService.customBtnClicked.subscribe(type => {\n        if (!this.wizardStopNavigation) {\n          this.currentPage.customButtonClicked.emit(type);\n        }\n      });\n      this.cancelButtonSubscription = this.buttonService.cancelBtnClicked.subscribe(() => {\n        if (this.wizardStopNavigation) {\n          return;\n        }\n\n        if (this.currentPage.preventDefault) {\n          this.currentPage.pageOnCancel.emit(this.currentPage);\n        } else {\n          this.cancel();\n        }\n      });\n      this.pagesResetSubscription = this.pageCollection.pagesReset.subscribe(() => {\n        this.setFirstPageCurrent();\n      });\n    }\n    /**\n     *\n     * @memberof WizardNavigationService\n     */\n\n\n    ngOnDestroy() {\n      this.previousButtonSubscription.unsubscribe();\n      this.nextButtonSubscription.unsubscribe();\n      this.dangerButtonSubscription.unsubscribe();\n      this.finishButtonSubscription.unsubscribe();\n      this.customButtonSubscription.unsubscribe();\n      this.cancelButtonSubscription.unsubscribe();\n      this.pagesResetSubscription.unsubscribe();\n    }\n    /**\n     * An Observable that is predominantly used amongst the subcomponents and services\n     * of the wizard. It is recommended that users listen to the ClrWizardPage.onLoad\n     * (clrWizardPageOnLoad) output instead of this Observable.\n     *\n     * @memberof WizardNavigationService\n     */\n\n\n    get currentPageChanged() {\n      // TODO: MAKE SURE EXTERNAL OUTPUTS SAY 'CHANGE' NOT 'CHANGED'\n      // A BREAKING CHANGE SO AWAITING MINOR RELEASE\n      return this._currentChanged.asObservable();\n    }\n    /**\n     * @memberof WizardNavigationService\n     */\n\n\n    get currentPageTitle() {\n      // when the querylist of pages is empty. this is the first place it fails...\n      if (!this.currentPage) {\n        return null;\n      }\n\n      return this.currentPage.title;\n    }\n    /**\n     * Returns a Boolean that tells you whether or not the current page is the first\n     * page in the Wizard.\n     *\n     * This is helpful for determining whether a page is navigable.\n     *\n     * @memberof WizardNavigationService\n     */\n\n\n    get currentPageIsFirst() {\n      return this.pageCollection.firstPage === this.currentPage;\n    }\n    /**\n     * Returns a Boolean that tells you whether or not the current page is the\n     * last page in the Wizard.\n     *\n     * This is used to determine which buttons should display in the wizard footer.\n     *\n     * @memberof WizardNavigationService\n     */\n\n\n    get currentPageIsLast() {\n      return this.pageCollection.lastPage === this.currentPage;\n    }\n    /**\n     * Returns the ClrWizardPage object of the current page or null.\n     *\n     * @memberof WizardNavigationService\n     */\n\n\n    get currentPage() {\n      if (!this._currentPage) {\n        return null;\n      }\n\n      return this._currentPage;\n    }\n    /**\n     * Accepts a ClrWizardPage object, since that object to be the current/active\n     * page in the wizard, and emits the ClrWizardPage.onLoad (clrWizardPageOnLoad)\n     * event for that page.\n     *\n     * Note that all of this work is bypassed if the ClrWizardPage object is already\n     * the current page.\n     *\n     * @memberof WizardNavigationService\n     */\n\n\n    set currentPage(page) {\n      if (this._currentPage !== page && !this.wizardStopNavigation) {\n        this._currentPage = page;\n        page.onLoad.emit(page.id);\n\n        this._currentChanged.next(page);\n      }\n    }\n    /**\n     * An observable used internally to alert the wizard that forward navigation\n     * has occurred. It is recommended that you use the Wizard.onMoveNext\n     * (clrWizardOnNext) output instead of this one.\n     *\n     * @memberof WizardNavigationService\n     */\n\n\n    get movedToNextPage() {\n      return this._movedToNextPage.asObservable();\n    }\n    /**\n     * An observable used internally to alert the wizard that the nav service\n     * has approved completion of the wizard.\n     *\n     * It is recommended that you use the Wizard.wizardFinished (clrWizardOnFinish)\n     * output instead of this one.\n     *\n     * @memberof WizardNavigationService\n     */\n\n\n    get wizardFinished() {\n      return this._wizardFinished.asObservable();\n    }\n    /**\n     * This is a public function that can be used to programmatically advance\n     * the user to the next page.\n     *\n     * When invoked, this method will move the wizard to the next page after\n     * successful validation. Note that this method goes through all checks\n     * and event emissions as if Wizard.next(false) had been called.\n     *\n     * In most cases, it makes more sense to use Wizard.next(false).\n     *\n     * @memberof WizardNavigationService\n     */\n\n\n    next() {\n      if (this.currentPageIsLast) {\n        this.checkAndCommitCurrentPage('finish');\n      } else {\n        this.checkAndCommitCurrentPage('next');\n      }\n    }\n    /**\n     * Bypasses checks and most event emissions to force a page to navigate forward.\n     *\n     * Comparable to calling Wizard.next() or Wizard.forceNext().\n     *\n     * @memberof WizardNavigationService\n     */\n\n\n    forceNext() {\n      const currentPage = this.currentPage;\n      const nextPage = this.pageCollection.getNextPage(currentPage); // catch errant null or undefineds that creep in\n\n      if (!nextPage) {\n        throw new Error('The wizard has no next page to go to.');\n      }\n\n      if (this.wizardStopNavigation) {\n        return;\n      }\n\n      if (!currentPage.completed) {\n        // this is a state that alt next flows can get themselves in...\n        this.pageCollection.commitPage(currentPage);\n      }\n\n      this.currentPage = nextPage;\n    }\n    /**\n     * Accepts a button/action type as a parameter. Encapsulates all logic for\n     * event emissions, state of the current page, and wizard and page level overrides.\n     *\n     * Avoid calling this function directly unless you really know what you're doing.\n     *\n     * @memberof WizardNavigationService\n     */\n\n\n    checkAndCommitCurrentPage(buttonType) {\n      const currentPage = this.currentPage;\n\n      if (!currentPage.readyToComplete || this.wizardStopNavigation) {\n        return;\n      }\n\n      const iAmTheLastPage = this.currentPageIsLast;\n      const isNext = buttonType === 'next';\n      const isDanger = buttonType === 'danger';\n      const isDangerNext = isDanger && !iAmTheLastPage;\n      const isDangerFinish = isDanger && iAmTheLastPage;\n      const isFinish = buttonType === 'finish' || isDangerFinish;\n\n      if (isFinish && !iAmTheLastPage) {\n        return;\n      }\n\n      currentPage.primaryButtonClicked.emit(buttonType);\n\n      if (isFinish) {\n        currentPage.finishButtonClicked.emit(currentPage);\n      } else if (isDanger) {\n        currentPage.dangerButtonClicked.emit();\n      } else if (isNext) {\n        currentPage.nextButtonClicked.emit();\n      }\n\n      if (currentPage.stopNext || currentPage.preventDefault) {\n        currentPage.onCommit.emit(currentPage.id);\n        return;\n      } // order is very important with these emitters!\n\n\n      if (isFinish) {\n        // mark page as complete\n        if (!this.wizardHasAltNext) {\n          this.pageCollection.commitPage(currentPage);\n        }\n\n        this._wizardFinished.next();\n      }\n\n      if (this.wizardHasAltNext) {\n        this.pageCollection.commitPage(currentPage);\n\n        if (isNext || isDangerNext) {\n          this._movedToNextPage.next(true);\n        } // jump out here, no matter what type we're looking at\n\n\n        return;\n      }\n\n      if (isNext || isDangerNext) {\n        this.forceNext();\n      }\n\n      if (!this.wizardHasAltNext && !this.wizardStopNavigation) {\n        this._movedToNextPage.next(true);\n      }\n    }\n    /**\n     * This is a public function that can be used to programmatically conclude\n     * the wizard.\n     *\n     * When invoked, this method will  initiate the work involved with finalizing\n     * and finishing the wizard workflow. Note that this method goes through all\n     * checks and event emissions as if Wizard.finish(false) had been called.\n     *\n     * In most cases, it makes more sense to use Wizard.finish(false).\n     *\n     * @memberof WizardNavigationService\n     */\n\n\n    finish() {\n      this.checkAndCommitCurrentPage('finish');\n    }\n    /**\n     * Notifies the wizard when backwards navigation has occurred via the\n     * previous button.\n     *\n     * @memberof WizardNavigationService\n     */\n\n\n    get movedToPreviousPage() {\n      return this._movedToPreviousPage.asObservable();\n    }\n    /**\n     * Programmatically moves the wizard to the page before the current page.\n     *\n     * In most instances, it makes more sense to call Wizard.previous()\n     * which does the same thing.\n     *\n     * @memberof WizardNavigationService\n     */\n\n\n    previous() {\n      if (this.currentPageIsFirst || this.wizardStopNavigation) {\n        return;\n      }\n\n      const previousPage = this.pageCollection.getPreviousPage(this.currentPage);\n\n      if (!previousPage) {\n        return;\n      }\n\n      this._movedToPreviousPage.next(true);\n\n      if (this.forceForwardNavigation) {\n        this.currentPage.completed = false;\n      }\n\n      this.currentPage = previousPage;\n    }\n    /**\n     * Notifies the wizard that a user is trying to cancel it.\n     *\n     * @memberof WizardNavigationService\n     */\n\n\n    get notifyWizardCancel() {\n      return this._cancelWizard.asObservable();\n    }\n    /**\n     * Allows a hook into the cancel workflow of the wizard from the nav service. Note that\n     * this route goes through all checks and event emissions as if a cancel button had\n     * been clicked.\n     *\n     * In most cases, users looking for a hook into the cancel routine are actually looking\n     * for a way to close the wizard from their host component because they have prevented\n     * the default cancel action.\n     *\n     * In this instance, it is recommended that you use Wizard.close() to avoid any event\n     * emission loop resulting from an event handler calling back into routine that will\n     * again evoke the events it handles.\n     *\n     * @memberof WizardNavigationService\n     */\n\n\n    cancel() {\n      this._cancelWizard.next();\n    }\n    /**\n     * Performs all required checks to determine if a user can navigate to a page. Checking at each\n     * point if a page is navigable -- completed where the page immediately after the last completed\n     * page.\n     *\n     * Takes two parameters. The first one must be either the ClrWizardPage object or the ID of the\n     * ClrWizardPage object that you want to make the current page.\n     *\n     * The second parameter is optional and is a Boolean flag for \"lazy completion\". What this means\n     * is the Wizard will mark all pages between the current page and the page you want to navigate\n     * to as completed. This is useful for informational wizards that do not require user action,\n     * allowing an easy means for users to jump ahead.\n     *\n     * To avoid checks on navigation, use ClrWizardPage.makeCurrent() instead.\n     *\n     * @memberof WizardNavigationService\n     */\n\n\n    goTo(pageToGoToOrId, lazyComplete = false) {\n      const myPages = this.pageCollection;\n      const pageToGoTo = typeof pageToGoToOrId === 'string' ? myPages.getPageById(pageToGoToOrId) : pageToGoToOrId;\n      const currentPage = this.currentPage; // no point in going to the current page. you're there already!\n      // also hard block on any navigation when stopNavigation is true\n\n      if (pageToGoTo === currentPage || this.wizardStopNavigation) {\n        return;\n      }\n\n      const currentPageIndex = myPages.getPageIndex(currentPage);\n      const goToPageIndex = myPages.getPageIndex(pageToGoTo);\n      const goingForward = goToPageIndex > currentPageIndex;\n      const pagesToCheck = myPages.getPageRangeFromPages(this.currentPage, pageToGoTo);\n      const okayToMove = lazyComplete || this.canGoTo(pagesToCheck);\n\n      if (!okayToMove) {\n        return;\n      }\n\n      if (goingForward && lazyComplete) {\n        pagesToCheck.forEach(page => {\n          if (page !== pageToGoTo) {\n            page.completed = true;\n          }\n        });\n      } else if (!goingForward && this.forceForwardNavigation) {\n        pagesToCheck.forEach(page => {\n          page.completed = false;\n        });\n      }\n\n      this.currentPage = pageToGoTo;\n    }\n    /**\n     * Accepts a range of ClrWizardPage objects as a parameter. Performs the work of checking\n     * those objects to determine if navigation can be accomplished.\n     *\n     * @memberof WizardNavigationService\n     */\n\n\n    canGoTo(pagesToCheck) {\n      let okayToMove = true;\n      const myPages = this.pageCollection; // previous page can be important when moving because if it's completed it\n      // allows us to move to the page even if it's incomplete...\n\n      let previousPagePasses;\n\n      if (!pagesToCheck || pagesToCheck.length < 1) {\n        return false;\n      }\n\n      pagesToCheck.forEach(page => {\n        if (!okayToMove) {\n          return;\n        }\n\n        if (page.completed) {\n          // default is true. just jump out instead of complicating it.\n          return;\n        } // so we know our page is not completed...\n\n\n        const previousPage = myPages.getPageIndex(page) > 0 ? myPages.getPreviousPage(page) : null;\n        previousPagePasses = previousPage === null || previousPage.completed === true; // we are false if not the current page AND previous page is not completed\n        // (but must have a previous page)\n\n        if (!page.current && !previousPagePasses) {\n          okayToMove = false;\n        } // falls through to true as default\n\n      });\n      return okayToMove;\n    }\n    /**\n     * Looks through the collection of pages to find the first one that is incomplete\n     * and makes that page the current/active page.\n     *\n     * @memberof WizardNavigationService\n     */\n\n\n    setLastEnabledPageCurrent() {\n      const allPages = this.pageCollection.pagesAsArray;\n      let lastCompletedPageIndex = null;\n      allPages.forEach((page, index) => {\n        if (page.completed) {\n          lastCompletedPageIndex = index;\n        }\n      });\n\n      if (lastCompletedPageIndex === null) {\n        // always is at least the first item...\n        lastCompletedPageIndex = 0;\n      } else if (lastCompletedPageIndex + 1 < allPages.length) {\n        lastCompletedPageIndex = lastCompletedPageIndex + 1;\n      }\n\n      this.currentPage = allPages[lastCompletedPageIndex];\n    }\n    /**\n     * Finds the first page in the collection of pages and makes that page the\n     * current/active page.\n     *\n     * @memberof WizardNavigationService\n     */\n\n\n    setFirstPageCurrent() {\n      this.currentPage = this.pageCollection.pagesAsArray[0];\n    }\n    /**\n     * Updates the stepnav on the left side of the wizard when pages are dynamically\n     * added or removed from the collection of pages.\n     *\n     * @memberof WizardNavigationService\n     */\n\n\n    updateNavigation() {\n      let toSetCurrent;\n      this.pageCollection.updateCompletedStates();\n      const currentPageRemoved = this.pageCollection.pagesAsArray.indexOf(this.currentPage) < 0;\n\n      if (currentPageRemoved) {\n        toSetCurrent = this.pageCollection.findFirstIncompletePage();\n        this.currentPage = toSetCurrent;\n      }\n    }\n\n  }\n\n  WizardNavigationService.ɵfac = function WizardNavigationService_Factory(t) {\n    return new (t || WizardNavigationService)(ɵngcc0.ɵɵinject(PageCollectionService), ɵngcc0.ɵɵinject(ButtonHubService));\n  };\n\n  WizardNavigationService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: WizardNavigationService,\n    factory: WizardNavigationService.ɵfac\n  });\n  return WizardNavigationService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet HeaderActionService = /*#__PURE__*/(() => {\n  class HeaderActionService {\n    // this service communicates information about the presence/display of header actions\n    // across the wizard\n    constructor(navService) {\n      this.navService = navService;\n    }\n\n    get wizardHasHeaderActions() {\n      const wizardHdrActions = this.wizardHeaderActions;\n\n      if (!wizardHdrActions) {\n        return false;\n      }\n\n      return wizardHdrActions.toArray().length > 0;\n    }\n\n    get currentPageHasHeaderActions() {\n      return this.navService.currentPage ? this.navService.currentPage.hasHeaderActions : false;\n    }\n\n    get showWizardHeaderActions() {\n      return !this.currentPageHasHeaderActions && this.wizardHasHeaderActions;\n    }\n\n    get displayHeaderActionsWrapper() {\n      return this.currentPageHasHeaderActions || this.wizardHasHeaderActions;\n    }\n\n  }\n\n  HeaderActionService.ɵfac = function HeaderActionService_Factory(t) {\n    return new (t || HeaderActionService)(ɵngcc0.ɵɵinject(WizardNavigationService));\n  };\n\n  HeaderActionService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: HeaderActionService,\n    factory: HeaderActionService.ɵfac\n  });\n  return HeaderActionService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet wizardHeaderActionIndex = 0;\nlet ClrWizardHeaderAction = /*#__PURE__*/(() => {\n  class ClrWizardHeaderAction {\n    constructor() {\n      // title is explanatory text added to the header action\n      this.title = ''; // If our host has an ID attribute, we use this instead of our index.\n\n      this._id = (wizardHeaderActionIndex++).toString();\n      this.disabled = false;\n      this.headerActionClicked = new EventEmitter(false);\n    }\n\n    get id() {\n      return `clr-wizard-header-action-${this._id}`;\n    }\n\n    click() {\n      if (this.disabled) {\n        return;\n      } // passing the header action id allows users to have one method that\n      // routes to many different actions based on the type of header action\n      // clicked. this is further aided by users being able to specify ids\n      // for their header actions.\n\n\n      this.headerActionClicked.emit(this._id);\n    }\n\n  }\n\n  ClrWizardHeaderAction.ɵfac = function ClrWizardHeaderAction_Factory(t) {\n    return new (t || ClrWizardHeaderAction)();\n  };\n\n  ClrWizardHeaderAction.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ClrWizardHeaderAction,\n    selectors: [[\"clr-wizard-header-action\"]],\n    hostAttrs: [1, \"clr-wizard-header-action-wrapper\"],\n    inputs: {\n      title: \"title\",\n      _id: [\"id\", \"_id\"],\n      disabled: [\"clrWizardHeaderActionDisabled\", \"disabled\"]\n    },\n    outputs: {\n      headerActionClicked: \"actionClicked\"\n    },\n    ngContentSelectors: _c0,\n    decls: 2,\n    vars: 4,\n    consts: [[\"type\", \"button\", 1, \"btn\", \"clr-wizard-header-action\", \"btn-link\", 3, \"id\", \"title\", \"click\"]],\n    template: function ClrWizardHeaderAction_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"button\", 0);\n        ɵngcc0.ɵɵlistener(\"click\", function ClrWizardHeaderAction_Template_button_click_0_listener() {\n          return ctx.click();\n        });\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"disabled\", ctx.disabled);\n        ɵngcc0.ɵɵproperty(\"id\", ctx.id)(\"title\", ctx.title);\n      }\n    },\n    encapsulation: 2\n  });\n  return ClrWizardHeaderAction;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrWizardPageButtons = /*#__PURE__*/(() => {\n  class ClrWizardPageButtons {\n    constructor(pageButtonsTemplateRef) {\n      this.pageButtonsTemplateRef = pageButtonsTemplateRef;\n    }\n\n  }\n\n  ClrWizardPageButtons.ɵfac = function ClrWizardPageButtons_Factory(t) {\n    return new (t || ClrWizardPageButtons)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef));\n  };\n\n  ClrWizardPageButtons.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: ClrWizardPageButtons,\n    selectors: [[\"\", \"clrPageButtons\", \"\"]]\n  });\n  return ClrWizardPageButtons;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrWizardPageHeaderActions = /*#__PURE__*/(() => {\n  class ClrWizardPageHeaderActions {\n    constructor(pageHeaderActionsTemplateRef) {\n      this.pageHeaderActionsTemplateRef = pageHeaderActionsTemplateRef;\n    }\n\n  }\n\n  ClrWizardPageHeaderActions.ɵfac = function ClrWizardPageHeaderActions_Factory(t) {\n    return new (t || ClrWizardPageHeaderActions)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef));\n  };\n\n  ClrWizardPageHeaderActions.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: ClrWizardPageHeaderActions,\n    selectors: [[\"\", \"clrPageHeaderActions\", \"\"]]\n  });\n  return ClrWizardPageHeaderActions;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrWizardPageNavTitle = /*#__PURE__*/(() => {\n  class ClrWizardPageNavTitle {\n    constructor(pageNavTitleTemplateRef) {\n      this.pageNavTitleTemplateRef = pageNavTitleTemplateRef;\n    }\n\n  }\n\n  ClrWizardPageNavTitle.ɵfac = function ClrWizardPageNavTitle_Factory(t) {\n    return new (t || ClrWizardPageNavTitle)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef));\n  };\n\n  ClrWizardPageNavTitle.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: ClrWizardPageNavTitle,\n    selectors: [[\"\", \"clrPageNavTitle\", \"\"]]\n  });\n  return ClrWizardPageNavTitle;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrWizardPageTitle = /*#__PURE__*/(() => {\n  class ClrWizardPageTitle {\n    constructor(pageTitleTemplateRef) {\n      this.pageTitleTemplateRef = pageTitleTemplateRef;\n    }\n\n  }\n\n  ClrWizardPageTitle.ɵfac = function ClrWizardPageTitle_Factory(t) {\n    return new (t || ClrWizardPageTitle)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef));\n  };\n\n  ClrWizardPageTitle.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: ClrWizardPageTitle,\n    selectors: [[\"\", \"clrPageTitle\", \"\"]]\n  });\n  return ClrWizardPageTitle;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet wizardPageIndex = 0;\n/**\n * The ClrWizardPage component is responsible for displaying the content of each step\n * in the wizard workflow.\n *\n * ClrWizardPage component has hooks into the navigation service (ClrWizardPage.navService),\n * page collection (ClrWizardPage.pageCollection), and button service\n * (ClrWizardPage.buttonService). These three providers are shared across the components\n * within each instance of a Wizard.\n *\n */\n\nlet ClrWizardPage = /*#__PURE__*/(() => {\n  class ClrWizardPage {\n    /**\n     * Creates an instance of ClrWizardPage.\n     *\n     * @memberof WizardPage\n     */\n    constructor(navService, pageCollection, buttonService) {\n      this.navService = navService;\n      this.pageCollection = pageCollection;\n      this.buttonService = buttonService;\n      /**\n       *\n       * @memberof WizardPage\n       *\n       */\n\n      this._nextStepDisabled = false;\n      /**\n       * Emits when the value of ClrWizardPage.nextStepDisabled changes.\n       * Should emit the new value of nextStepDisabled.\n       *\n       * @memberof WizardPage\n       *\n       */\n\n      this.nextStepDisabledChange = new EventEmitter();\n      /**\n       *\n       * @memberof WizardPage\n       *\n       */\n\n      this._previousStepDisabled = false;\n      /**\n       * Emits when the value of ClrWizardPage.previousStepDisabled changes.\n       * Should emit the new value of previousStepDisabled.\n       *\n       * @memberof WizardPage\n       *\n       */\n\n      this.previousStepDisabledChange = new EventEmitter();\n      /**\n       *\n       * @memberof WizardPage\n       *\n       */\n\n      this._hasError = false;\n      /**\n       * Overrides all actions from the page level, so you can use an alternate function for\n       * validation or data-munging with a ClrWizardPage.onCommit (clrWizardPageOnCommit output),\n       * ClrWizardPage.onCancel (clrWizardPageOnCancel output), or one\n       * of the granular page-level button click event emitters.\n       *\n       * @memberof WizardPage\n       *\n       */\n\n      this.preventDefault = false;\n      /**\n       *\n       * @memberof WizardPage\n       *\n       */\n\n      this._stopCancel = false;\n      /**\n       *\n       * @memberof WizardPage\n       *\n       */\n\n      this.stopCancelChange = new EventEmitter();\n      /**\n       *\n       * @memberof WizardPage\n       *\n       */\n\n      this._stopNext = false;\n      /**\n       * An event emitter carried over from a legacy version of ClrWizardPage.\n       * Fires an event on ClrWizardPage whenever the next or finish buttons\n       * are clicked and the page is the current page of the Wizard.\n       *\n       * Note that this does not automatically emit an event when a custom\n       * button is used in place of a next or finish button.\n       *\n       * @memberof WizardPage\n       *\n       */\n\n      this.onCommit = new EventEmitter(false);\n      /**\n       * Emits an event when ClrWizardPage becomes the current page of the\n       * Wizard.\n       *\n       * @memberof WizardPage\n       *\n       */\n\n      this.onLoad = new EventEmitter();\n      /**\n       * Emits an event when the ClrWizardPage invokes the cancel routine for the wizard.\n       *\n       * Can be used in conjunction with the ClrWizardPage.stopCancel\n       * (clrWizardPagePreventDefaultCancel) or ClrWizardPage.preventDefault\n       * (clrWizardPagePagePreventDefault) inputs to implement custom cancel\n       * functionality at the page level. This is useful if you would like to do\n       * validation, save data, or warn users before cancelling the wizard.\n       *\n       * Note that this requires you to call Wizard.close() from the host component.\n       * This constitues a full replacement of the cancel functionality.\n       *\n       * @memberof WizardPage\n       *\n       */\n\n      this.pageOnCancel = new EventEmitter();\n      /**\n       * Emits an event when the finish button is clicked and the ClrWizardPage is\n       * the wizard's current page.\n       *\n       * Can be used in conjunction with the ClrWizardPage.preventDefault\n       * (clrWizardPagePagePreventDefault) input to implement custom finish\n       * functionality at the page level. This is useful if you would like to do\n       * validation, save data, or warn users before allowing them to complete\n       * the wizard.\n       *\n       * Note that this requires you to call Wizard.finish() or Wizard.forceFinish()\n       * from the host component. This combination creates a full replacement of\n       * the finish functionality.\n       *\n       * @memberof WizardPage\n       *\n       */\n\n      this.finishButtonClicked = new EventEmitter();\n      /**\n       * Emits an event when the previous button is clicked and the ClrWizardPage is\n       * the wizard's current page.\n       *\n       * Can be used in conjunction with the ClrWizardPage.preventDefault\n       * (clrWizardPagePagePreventDefault) input to implement custom backwards\n       * navigation at the page level. This is useful if you would like to do\n       * validation, save data, or warn users before allowing them to go\n       * backwards in the wizard.\n       *\n       * Note that this requires you to call Wizard.previous()\n       * from the host component. This combination creates a full replacement of\n       * the backwards navigation functionality.\n       *\n       * @memberof WizardPage\n       *\n       */\n\n      this.previousButtonClicked = new EventEmitter();\n      /**\n       * Emits an event when the next button is clicked and the ClrWizardPage is\n       * the wizard's current page.\n       *\n       * Can be used in conjunction with the ClrWizardPage.preventDefault\n       * (clrWizardPagePagePreventDefault) input to implement custom forwards\n       * navigation at the page level. This is useful if you would like to do\n       * validation, save data, or warn users before allowing them to go\n       * to the next page in the wizard.\n       *\n       * Note that this requires you to call Wizard.forceNext() or Wizard.next()\n       * from the host component. This combination creates a full replacement of\n       * the forward navigation functionality.\n       *\n       * @memberof WizardPage\n       *\n       */\n\n      this.nextButtonClicked = new EventEmitter();\n      /**\n       * Emits an event when a danger button is clicked and the ClrWizardPage is\n       * the wizard's current page. By default, a danger button will act as\n       * either a \"next\" or \"finish\" button depending on if the ClrWizardPage is the\n       * last page or not.\n       *\n       * Can be used in conjunction with the ClrWizardPage.preventDefault\n       * (clrWizardPagePagePreventDefault) input to implement custom forwards\n       * or finish navigation at the page level when the danger button is clicked.\n       * This is useful if you would like to do validation, save data, or warn\n       * users before allowing them to go to the next page in the wizard or\n       * finish the wizard.\n       *\n       * Note that this requires you to call Wizard.finish(), Wizard.forceFinish(),\n       * Wizard.forceNext() or Wizard.next() from the host component. This\n       * combination creates a full replacement of the forward navigation and\n       * finish functionality.\n       *\n       * @memberof WizardPage\n       *\n       */\n\n      this.dangerButtonClicked = new EventEmitter();\n      /**\n       * Emits an event when a next, finish, or danger button is clicked and the\n       * ClrWizardPage is the wizard's current page.\n       *\n       * Can be used in conjunction with the ClrWizardPage.preventDefault\n       * (clrWizardPagePagePreventDefault) input to implement custom forwards\n       * or finish navigation at the page level, regardless of the type of\n       * primary button.\n       *\n       * This is useful if you would like to do validation, save data, or warn\n       * users before allowing them to go to the next page in the wizard or\n       * finish the wizard.\n       *\n       * Note that this requires you to call Wizard.finish(), Wizard.forceFinish(),\n       * Wizard.forceNext() or Wizard.next() from the host component. This\n       * combination creates a full replacement of the forward navigation and\n       * finish functionality.\n       *\n       * @memberof WizardPage\n       *\n       */\n\n      this.primaryButtonClicked = new EventEmitter();\n      this.customButtonClicked = new EventEmitter();\n      /**\n       * An input value that is used internally to generate the ClrWizardPage ID as\n       * well as the step nav item ID.\n       *\n       * Typed as any because it should be able to accept numbers as well as\n       * strings. Passing an index for wizard whose pages are created with an\n       * ngFor loop is a common use case.\n       *\n       * @memberof WizardPage\n       *\n       */\n\n      this._id = (wizardPageIndex++).toString();\n      /**\n       *\n       * @memberof WizardPage\n       *\n       */\n\n      this._complete = false;\n    }\n    /**\n     * A getter that tells whether or not the wizard should be allowed\n     * to move to the next page.\n     *\n     * Useful for in-page validation because it prevents forward navigation\n     * and visibly disables the next button.\n     *\n     * Does not require that you re-implement navigation routines like you\n     * would if you were using ClrWizardPage.preventDefault or\n     * Wizard.preventDefault.\n     *\n     * @memberof WizardPage\n     *\n     */\n\n\n    get nextStepDisabled() {\n      return this._nextStepDisabled;\n    }\n    /**\n     * Sets whether the page should allow forward navigation.\n     *\n     * @memberof WizardPage\n     *\n     */\n\n\n    set nextStepDisabled(val) {\n      const valBool = !!val;\n\n      if (valBool !== this._nextStepDisabled) {\n        this._nextStepDisabled = valBool;\n        this.nextStepDisabledChange.emit(valBool);\n      }\n    }\n    /**\n     * A getter that tells whether or not the wizard should be allowed\n     * to move to the previous page.\n     *\n     * Useful for in-page validation because it prevents backward navigation\n     * and visibly disables the previous button.\n     *\n     * Does not require that you re-implement navigation routines like you\n     * would if you were using ClrWizardPage.preventDefault or\n     * Wizard.preventDefault.\n     *\n     * @memberof WizardPage\n     *\n     */\n\n\n    get previousStepDisabled() {\n      return this._previousStepDisabled;\n    }\n    /**\n     * Sets whether the page should allow backward navigation.\n     *\n     * @memberof WizardPage\n     *\n     */\n\n\n    set previousStepDisabled(val) {\n      const valBool = !!val;\n\n      if (valBool !== this._previousStepDisabled) {\n        this._previousStepDisabled = valBool;\n        this.previousStepDisabledChange.emit(valBool);\n      }\n    }\n    /**\n     * A getter that tells whether or not the page has an error.\n     *\n     * @memberof WizardPage\n     *\n     */\n\n\n    get hasError() {\n      return this._hasError;\n    }\n    /**\n     * Sets whether the page has an error and also resolve the \"falsy\" value. The\n     * current logic treat a \"0\" or an empty string as false and likewise will treat any\n     * \"truthy\" value as true.\n     *\n     * @memberof WizardPage\n     *\n     */\n\n\n    set hasError(val) {\n      const valBool = !!val;\n\n      if (valBool !== this._hasError) {\n        this._hasError = valBool;\n      }\n    }\n    /**\n     * A getter that retrieves whether the page is preventing the cancel action.\n     *\n     * @memberof WizardPage\n     *\n     */\n\n\n    get stopCancel() {\n      return this._stopCancel;\n    }\n    /**\n     * Overrides the cancel action from the page level. Allows you to use an\n     * alternate function for validation or data-munging before cancelling the\n     * wizard when combined with the ClrWizardPage.onCancel\n     * (the clrWizardPageOnCancel output).\n     *\n     * Requires that you manually close the wizard from your host component,\n     * usually with a call to Wizard.forceNext() or wizard.next();\n     *\n     * @memberof ClrWizardPage\n     */\n\n\n    set stopCancel(val) {\n      const valBool = !!val;\n\n      if (valBool !== this._stopCancel) {\n        this._stopCancel = valBool;\n        this.stopCancelChange.emit(valBool);\n      }\n    }\n    /**\n     * A getter that tells you whether the page is preventing the next action.\n     *\n     * @memberof WizardPage\n     *\n     */\n\n\n    get stopNext() {\n      return this._stopNext;\n    }\n    /**\n     * Overrides forward navigation from the page level. Allows you to use an\n     * alternate function for validation or data-munging before moving the\n     * wizard to the next pagewhen combined with the ClrWizardPage.onCommit\n     * (clrWizardPageOnCommit) or ClrWizardPage.nextButtonClicked\n     * (clrWizardPageNext) outputs.\n     *\n     * Requires that you manually tell the wizard to navigate forward from\n     * the hostComponent, usually with a call to Wizard.forceNext() or\n     * wizard.next();\n     *\n     * @memberof ClrWizardPage\n     */\n\n\n    set stopNext(val) {\n      const valBool = !!val;\n\n      if (valBool !== this._stopNext) {\n        this._stopNext = valBool;\n      }\n    }\n    /**\n     * A read-only getter that generates an ID string for the wizard page from\n     * either the value passed to the ClrWizardPage \"id\" input or a wizard page\n     * counter shared across all wizard pages in the application.\n     *\n     * Note that the value passed into the ID input Will be prefixed with\n     * \"clr-wizard-page-\".\n     *\n     * @readonly\n     *\n     * @memberof ClrWizardPage\n     */\n\n\n    get id() {\n      // covers things like null, undefined, false, and empty string\n      // while allowing zero to pass\n      const idIsNonZeroFalsy = !this._id && this._id !== 0; // in addition to non-zero falsy we also want to make sure _id is not a negative\n      // number.\n\n      if (idIsNonZeroFalsy || this._id < 0) {\n        // guard here in the event that input becomes undefined or null by accident\n        this._id = (wizardPageIndex++).toString();\n      }\n\n      return `clr-wizard-page-${this._id}`;\n    }\n    /**\n     * A read-only getter that serves as a convenience for those who would rather\n     * not think in the terms of !ClrWizardPage.nextStepDisabled. For some use cases,\n     * ClrWizardPage.readyToComplete is more logical and declarative.\n     *\n     * @memberof WizardPage\n     *\n     */\n\n\n    get readyToComplete() {\n      return !this.nextStepDisabled;\n    }\n    /**\n     * A page is marked as completed if it is both readyToComplete and completed,\n     * as in the next or finish action has been executed while this page was current.\n     *\n     * Note there is and open question about how to handle pages that are marked\n     * complete but who are no longer readyToComplete. This might indicate an error\n     * state for the ClrWizardPage. Currently, the wizard does not acknowledge this state\n     * and only returns that the page is incomplete.\n     *\n     * @memberof WizardPage\n     *\n     */\n\n\n    get completed() {\n      return this._complete && this.readyToComplete; // FOR V2: UNWIND COMPLETED, READYTOCOMPLETE, AND ERRORS\n      // SUCH THAT ERRORS IS ITS OWN INPUT. IF A STEP IS\n      // INCOMPLETE AND ERRORED, ERRORED WILL NOT SHOW.\n      // FIRST QUESTION: AM I GREY OR COLORED?\n      // SECOND QUESTION: AM I GREEN OR RED?\n    }\n    /**\n     * A ClrWizardPage can be manually set to completed using this boolean setter.\n     * It is recommended that users rely on the convenience functions in the wizard\n     * and navigation service instead of manually setting pages’ completion state.\n     *\n     * @memberof ClrWizardPage\n     */\n\n\n    set completed(value) {\n      this._complete = value;\n    }\n    /**\n     * Checks with the navigation service to see if it is the current page.\n     *\n     * @memberof WizardPage\n     *\n     */\n\n\n    get current() {\n      return this.navService.currentPage === this;\n    }\n\n    get disabled() {\n      return !this.enabled;\n    }\n    /**\n     * A read-only getter that returns whether or not the page is navigable\n     * in the wizard. A wizard page can be navigated to if it is completed\n     * or the page before it is completed.\n     *\n     * This getter handles the logic for enabling or disabling the links in\n     * the step nav on the left Side of the wizard.\n     *\n     * @memberof WizardPage\n     *\n     */\n\n\n    get enabled() {\n      return this.current || this.completed || this.previousCompleted;\n    }\n    /**\n     * A read-only getter that returns whether or not the page before this\n     * ClrWizardPage is completed. This is useful for determining whether or not\n     * a page is navigable if it is not current or already completed.\n     *\n     * @memberof WizardPage\n     *\n     */\n\n\n    get previousCompleted() {\n      const previousPage = this.pageCollection.getPreviousPage(this);\n\n      if (!previousPage) {\n        return true;\n      }\n\n      return previousPage.completed;\n    }\n    /**\n     *\n     * @memberof WizardPage\n     *\n     */\n\n\n    get title() {\n      return this.pageTitle.pageTitleTemplateRef;\n    }\n    /**\n     *\n     * @memberof WizardPage\n     *\n     */\n\n\n    get navTitle() {\n      if (this.pageNavTitle) {\n        return this.pageNavTitle.pageNavTitleTemplateRef;\n      }\n\n      return this.pageTitle.pageTitleTemplateRef;\n    }\n    /**\n     *\n     * @memberof WizardPage\n     *\n     */\n\n\n    get headerActions() {\n      if (!this._headerActions) {\n        return undefined;\n      }\n\n      return this._headerActions.pageHeaderActionsTemplateRef;\n    }\n    /**\n     *\n     * @memberof WizardPage\n     *\n     */\n\n\n    get hasHeaderActions() {\n      return !!this._headerActions;\n    }\n    /**\n     *\n     * @memberof WizardPage\n     *\n     */\n\n\n    get buttons() {\n      if (!this._buttons) {\n        return undefined;\n      }\n\n      return this._buttons.pageButtonsTemplateRef;\n    }\n    /**\n     * A read-only getter that returns a boolean that says whether or\n     * not the ClrWizardPage includes buttons. Used to determine if the\n     * Wizard should override the default button set defined as\n     * its direct children.\n     *\n     * @memberof WizardPage\n     *\n     */\n\n\n    get hasButtons() {\n      return !!this._buttons;\n    }\n    /**\n     * Uses the nav service to make the ClrWizardPage the current page in the\n     * wizard. Bypasses all checks but still emits the ClrWizardPage.onLoad\n     * (clrWizardPageOnLoad) output.\n     *\n     * In most cases, it is better to use the default navigation functions\n     * in Wizard.\n     *\n     * @memberof WizardPage\n     *\n     */\n\n\n    makeCurrent() {\n      this.navService.currentPage = this;\n    }\n    /**\n     * Links the nav service and establishes the current page if one is not defined.\n     *\n     * @memberof WizardPage\n     *\n     */\n\n\n    ngOnInit() {\n      const navService = this.navService;\n\n      if (!navService.currentPage && !navService.navServiceLoaded) {\n        this.makeCurrent();\n        this.navService.navServiceLoaded = true;\n      }\n    }\n    /**\n     * A read-only getter that returns the id used by the step nav item associated with the page.\n     *\n     * ClrWizardPage needs this ID string for aria information.\n     *\n     * @memberof WizardPage\n     *\n     */\n\n\n    get stepItemId() {\n      return this.pageCollection.getStepItemIdForPage(this);\n    }\n\n  }\n\n  ClrWizardPage.ɵfac = function ClrWizardPage_Factory(t) {\n    return new (t || ClrWizardPage)(ɵngcc0.ɵɵdirectiveInject(WizardNavigationService), ɵngcc0.ɵɵdirectiveInject(PageCollectionService), ɵngcc0.ɵɵdirectiveInject(ButtonHubService));\n  };\n\n  ClrWizardPage.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ClrWizardPage,\n    selectors: [[\"clr-wizard-page\"]],\n    contentQueries: function ClrWizardPage_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, ClrWizardPageTitle, 7);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, ClrWizardPageNavTitle, 7);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, ClrWizardPageButtons, 7);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, ClrWizardPageHeaderActions, 7);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.pageTitle = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.pageNavTitle = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._buttons = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._headerActions = _t.first);\n      }\n    },\n    hostVars: 7,\n    hostBindings: function ClrWizardPage_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n        ɵngcc0.ɵɵattribute(\"aria-hidden\", !ctx.current)(\"aria-labelledby\", ctx.stepItemId);\n        ɵngcc0.ɵɵclassProp(\"active\", ctx.current)(\"clr-wizard-page\", true);\n      }\n    },\n    inputs: {\n      preventDefault: [\"clrWizardPagePreventDefault\", \"preventDefault\"],\n      _id: [\"id\", \"_id\"],\n      nextStepDisabled: [\"clrWizardPageNextDisabled\", \"nextStepDisabled\"],\n      previousStepDisabled: [\"clrWizardPagePreviousDisabled\", \"previousStepDisabled\"],\n      hasError: [\"clrWizardPageHasError\", \"hasError\"],\n      stopCancel: [\"clrWizardPagePreventDefaultCancel\", \"stopCancel\"],\n      stopNext: [\"clrWizardPagePreventDefaultNext\", \"stopNext\"]\n    },\n    outputs: {\n      nextStepDisabledChange: \"clrWizardPageNextDisabledChange\",\n      previousStepDisabledChange: \"clrWizardPagePreviousDisabledChange\",\n      stopCancelChange: \"clrWizardPagePreventDefaultCancelChange\",\n      onCommit: \"clrWizardPageOnCommit\",\n      onLoad: \"clrWizardPageOnLoad\",\n      pageOnCancel: \"clrWizardPageOnCancel\",\n      finishButtonClicked: \"clrWizardPageFinish\",\n      previousButtonClicked: \"clrWizardPagePrevious\",\n      nextButtonClicked: \"clrWizardPageNext\",\n      dangerButtonClicked: \"clrWizardPageDanger\",\n      primaryButtonClicked: \"clrWizardPagePrimary\",\n      customButtonClicked: \"clrWizardPageCustomButton\"\n    },\n    ngContentSelectors: _c0,\n    decls: 1,\n    vars: 0,\n    template: function ClrWizardPage_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n      }\n    },\n    encapsulation: 2\n  });\n  return ClrWizardPage;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrWizard = /*#__PURE__*/(() => {\n  class ClrWizard {\n    constructor(platformId, navService, pageCollection, buttonService, headerActionService, elementRef, differs) {\n      this.platformId = platformId;\n      this.navService = navService;\n      this.pageCollection = pageCollection;\n      this.buttonService = buttonService;\n      this.headerActionService = headerActionService;\n      this.elementRef = elementRef;\n      /**\n       * Set the modal size of the wizard. Set using `[clrWizardSize]` input.\n       */\n\n      this.size = 'xl';\n      /**\n       * Tells the modal part of the wizard whether it should have a close \"X\"\n       * in the top right corner. Set using `[clrWizardClosable]` input.\n       */\n\n      this.closable = true;\n      this._forceForward = false;\n      this._open = false;\n      this._stopNext = false;\n      this._stopCancel = false;\n      this._stopNavigation = false;\n      this._disableStepnav = false;\n      /**\n       * Used to communicate to the underlying modal that animations are not\n       * wanted. Primary use is for the display of static/inline wizards.\n       * Set using `[clrWizardPreventModalAnimation]` input.\n       */\n\n      /** @deprecated since 3.0, input should be removed in 4.0 because is only related to inline wizards */\n\n      this._stopModalAnimations = false;\n      /**\n       * Emits when the wizard is opened or closed.\n       * Listen via `(clrWizardOpenChange)` event.\n       */\n\n      this._openChanged = new EventEmitter(false);\n      /**\n       * Emits when the wizard is canceled. Listen via `(clrWizardOnCancel)` event.\n       * Can be combined with the `[clrWizardPreventDefaultCancel]` input to create\n       * wizard-level custom cancel routines.\n       */\n\n      this.onCancel = new EventEmitter(false);\n      /**\n       * Emits when the wizard is completed. Listen via `(clrWizardOnFinish)` event.\n       * Can be combined with the `[clrWizardPreventDefaultNext]` input to create\n       * wizard-level custom completion routines.\n       */\n\n      this.wizardFinished = new EventEmitter(false);\n      /**\n       * Emits when the wizard is reset. Listen via `(clrWizardOnReset)` event.\n       */\n\n      this.onReset = new EventEmitter(false);\n      /**\n       * Emits when the current page has changed. Listen via `(clrWizardCurrentPageChanged)` event.\n       * output. Useful for non-blocking validation.\n       */\n\n      this.currentPageChanged = new EventEmitter(false);\n      /**\n       * Emits when the wizard moves to the next page. Listen via `(clrWizardOnNext)` event.\n       * Can be combined with the `[clrWizardPreventDefaultNext]` input to create\n       * wizard-level custom navigation routines, which are useful for validation.\n       */\n\n      this.onMoveNext = new EventEmitter(false);\n      /**\n       * Emits when the wizard moves to the previous page. Can be useful for validation.\n       * Listen via `(clrWizardOnPrevious)` event.\n       */\n\n      this.onMovePrevious = new EventEmitter(false);\n      this.subscriptions = [];\n      this.subscriptions.push(this.listenForNextPageChanges(), this.listenForPreviousPageChanges(), this.listenForCancelChanges(), this.listenForFinishedChanges(), this.listenForPageChanges());\n      this.differ = differs.find([]).create(null);\n    }\n    /**\n     * Resets page completed states when navigating backwards.\n     * Set using `[clrWizardForceForwardNavigation]` input.\n     */\n\n\n    set forceForward(value) {\n      this._forceForward = !!value;\n      this.navService.forceForwardNavigation = value;\n    }\n\n    get forceForward() {\n      return this._forceForward;\n    }\n    /**\n     * Toggles open/close of the wizard component.\n     * Set using the `[clrWizardOpen]` input.\n     */\n\n\n    set clrWizardOpen(open) {\n      if (open) {\n        this.buttonService.buttonsReady = true;\n      }\n\n      this._open = open;\n    }\n    /**\n     * Prevents ClrWizard from moving to the next page or closing itself on finishing.\n     * Set using the `[clrWizardPreventDefaultNext]` input. Note that using stopNext\n     * will require you to create your own calls to .next() and .finish() in your\n     * host component to make the ClrWizard work as expected.\n     */\n\n\n    set stopNext(value) {\n      this._stopNext = !!value;\n      this.navService.wizardHasAltNext = value;\n    }\n\n    get stopNext() {\n      return this._stopNext;\n    }\n    /**\n     * Prevents ClrWizard from closing when the cancel button or close \"X\" is clicked.\n     * Set using the `[clrWizardPreventDefaultCancel]` input.\n     *\n     * Note that using stopCancel will require you to create your own calls to `close()` in your host compone`nt\n     * to make the ClrWizard work as expected. Useful for doing checks or prompts\n     * before closing a ClrWizard.\n     */\n\n\n    set stopCancel(value) {\n      this._stopCancel = !!value;\n      this.navService.wizardHasAltCancel = value;\n    }\n\n    get stopCancel() {\n      return this._stopCancel;\n    }\n    /**\n     * Prevents ClrWizard from performing any form of navigation away from the current\n     * page. Set using the `[clrWizardPreventNavigation]` input.\n     * Note that stopNavigation is meant to freeze the wizard in place, typically\n     * during a long validation or background action where you want the wizard to\n     * display loading content but not allow the user to execute navigation in\n     * the stepnav, close X, or the  back, finish, or next buttons.\n     */\n\n\n    set stopNavigation(value) {\n      this._stopNavigation = !!value;\n      this.navService.wizardStopNavigation = value;\n    }\n\n    get stopNavigation() {\n      return this._stopNavigation;\n    }\n    /**\n     * Prevents clicks on the links in the stepnav from working.\n     * Set using `[clrWizardDisableStepnav]` input.\n     * A more granular bypassing of navigation which can be useful when your\n     * ClrWizard is in a state of completion and you don't want users to be\n     * able to jump backwards and change things.\n     */\n\n\n    set disableStepnav(value) {\n      this._disableStepnav = !!value;\n      this.navService.wizardDisableStepnav = value;\n    }\n\n    get disableStepnav() {\n      return this._disableStepnav;\n    }\n\n    get stopModalAnimations() {\n      return this._stopModalAnimations ? 'true' : 'false';\n    }\n\n    get currentPage() {\n      return this.navService.currentPage;\n    }\n\n    set currentPage(page) {\n      this.navService.goTo(page, true);\n    }\n\n    get isLast() {\n      return this.navService.currentPageIsLast;\n    }\n\n    get isFirst() {\n      return this.navService.currentPageIsFirst;\n    }\n\n    get isStatic() {\n      return this.elementRef.nativeElement.classList.contains('clr-wizard--inline');\n    }\n\n    ngAfterContentInit() {\n      this.pageCollection.pages = this.pages;\n      this.headerActionService.wizardHeaderActions = this.headerActions;\n      this.initializeButtons();\n    }\n\n    ngDoCheck() {\n      this.updateNavOnPageChanges();\n    }\n\n    ngOnDestroy() {\n      this.subscriptions.forEach(s => s.unsubscribe());\n    }\n    /**\n     * Marks Wizard as finished. By default it does not execute event\n     * emissions or checks before completing and closing. This method is commonly\n     * used as part of an alternative navigation with `[clrWizardPreventDefaultNext]`.\n     *\n     * If `skipChecksAndEmits` is true, the wizard will complete and close\n     * regardless of the state of its current page. This is useful for alternative\n     * navigation where event emissions have already been done and firing them again\n     * may cause an event loop.\n     */\n\n\n    finish(skipChecksAndEmits = true) {\n      if (skipChecksAndEmits) {\n        this.forceFinish();\n      } else {\n        this.navService.finish();\n      }\n    }\n    /**\n     * Marks the wizard as finished but does run checks and emissions.\n     * Good for a last step in an alternate workflow. Does the same thing as\n     * calling `ClrWizard.finish(true)` or `ClrWizard.finish()` without a parameter.\n     */\n\n\n    forceFinish() {\n      if (this.stopNavigation) {\n        return;\n      }\n\n      this.close();\n    }\n    /**\n     * Opens the wizard. If there is no current page defined, sets the first page in the wizard to be current.\n     */\n\n\n    open() {\n      this._open = true;\n\n      if (!this.currentPage) {\n        this.navService.setFirstPageCurrent();\n      } // Only render buttons when wizard is opened, to avoid chocolate errors\n\n\n      this.buttonService.buttonsReady = true;\n\n      this._openChanged.emit(true);\n    }\n    /**\n     * Closes the wizard. Call this directly instead of `cancel()` to implement alternative cancel functionality.\n     */\n\n\n    close() {\n      if (this.stopNavigation) {\n        return;\n      }\n\n      this._open = false;\n\n      this._openChanged.emit(false);\n    }\n    /**\n     * Used to open and close the wizard. By default the wizard will\n     * close if invoked with no parameter. If parameter is true wizard will open\n     * else if false will close.\n     */\n\n\n    toggle(open) {\n      if (open) {\n        this.open();\n      } else {\n        this.close();\n      }\n    }\n    /**\n     * Moves the wizard to the previous page.\n     */\n\n\n    previous() {\n      this.navService.previous();\n    }\n    /**\n     * By default, `next()` does not execute event emissions.\n     * This method is commonly called as part of an alternative navigation\n     * with `[clrWizardPreventDefaultNext]`. The wizard will move to the next page\n     * regardless of the state of its current page. This is useful for alternative\n     * navigation where event emissions have already been done and firing them again\n     * may cause an event loop.\n     *\n     * If `skipChecksAndEmits` is false, the wizard will execute default checks\n     * and emit events as normal. This is useful for custom buttons or programmatic\n     * workflows that are not executing the wizards default checks and emissions.\n     * It is another way to navigate without having to rewrite the wizard’s default\n     * functionality from scratch.\n     */\n\n\n    next(skipChecksAndEmits = true) {\n      if (skipChecksAndEmits) {\n        this.forceNext();\n      } else {\n        this.navService.next();\n      }\n    }\n    /**\n     * Moves the wizard to the next page without the checks and emissions.\n     * Good for a last step in an alternate workflow.\n     * Alias for `ClrWizard.next(true)` or `ClrWizard.next()`\n     */\n\n\n    forceNext() {\n      this.navService.forceNext();\n    }\n    /**\n     * Cancels and closes the wizard. Do not use this for an override of the cancel\n     * the functionality with `[clrWizardPreventDefaultCancel]`, `[clrWizardPreventPageDefaultCancel]`,\n     * or `[clrWizardPagePreventDefault]` because it will initiate the same checks\n     * and event emissions that invoked your event handler. Use `ClrWizard.close()` instead.\n     */\n\n\n    cancel() {\n      this.navService.cancel();\n    }\n    /**\n     * Overrides behavior of the underlying modal to avoid collisions with\n     * alternative cancel functionality. In most cases, use `ClrWizard.cancel()` instead.\n     */\n\n\n    modalCancel() {\n      if (this.closable) {\n        this.checkAndCancel();\n      }\n    }\n    /**\n     * Checks for alternative cancel flows defined at the current page or\n     * wizard level. Performs a canceled if not. Emits events that initiate\n     * the alternative cancel outputs `(clrWizardPageOnCancel)` and `(clrWizardOnCancel)`.\n     */\n\n\n    checkAndCancel() {\n      const currentPage = this.currentPage;\n      const currentPageHasOverrides = currentPage.stopCancel || currentPage.preventDefault;\n\n      if (this.stopNavigation) {\n        return;\n      }\n\n      currentPage.pageOnCancel.emit();\n\n      if (!currentPageHasOverrides) {\n        this.onCancel.emit();\n      }\n\n      if (!this.stopCancel && !currentPageHasOverrides) {\n        this.close();\n      }\n    }\n    /**\n     * Navigates to a given page in the Wizard. Navigation will invoke the wizard’s default\n     * checks and event emissions.\n     *\n     * The format of the expected ID parameter can be found in the return of the\n     * ClrWizardPage.id getter, usually prefixed with `clr-wizard-page-` and then either a\n     * numeric ID or the ID specified for the `ClrWizardPage` component’s `id` input.\n     */\n\n\n    goTo(pageId) {\n      if (!pageId) {\n        return;\n      }\n\n      this.navService.goTo(pageId);\n    }\n    /**\n     * Reset sets all WizardPages to incomplete and sets the first page in the `ClrWizard` to\n     * be the current page, resetting the wizard navigation.\n     * Use `(clrWizardOnReset)` event to reset the data or model of your wizard.\n     */\n\n\n    reset() {\n      this.pageCollection.reset();\n      this.onReset.next();\n    }\n\n    listenForNextPageChanges() {\n      return this.navService.movedToNextPage.pipe(filter(() => isPlatformBrowser(this.platformId))).subscribe(() => {\n        this.onMoveNext.emit();\n        this.wizardTitle.nativeElement.focus();\n      });\n    }\n\n    listenForPreviousPageChanges() {\n      return this.navService.movedToPreviousPage.pipe(filter(() => isPlatformBrowser(this.platformId))).subscribe(() => {\n        this.onMovePrevious.emit();\n        this.wizardTitle.nativeElement.focus();\n      });\n    }\n\n    listenForCancelChanges() {\n      return this.navService.notifyWizardCancel.subscribe(() => this.checkAndCancel());\n    }\n\n    listenForFinishedChanges() {\n      return this.navService.wizardFinished.subscribe(() => this.emitWizardFinished());\n    }\n\n    listenForPageChanges() {\n      return this.navService.currentPageChanged.subscribe(() => {\n        var _a; // Added to address VPAT-749:\n        //   When clicking on a wizard tab, focus should move to that\n        //   tabs content to make the wizard more accessible.\n\n\n        (_a = this.wizardTitle) === null || _a === void 0 ? void 0 : _a.nativeElement.focus();\n        this.currentPageChanged.emit();\n      });\n    }\n\n    updateNavOnPageChanges() {\n      const changes = this.differ.diff(this.pages);\n\n      if (changes) {\n        changes.forEachAddedItem(() => this.navService.updateNavigation());\n        changes.forEachRemovedItem(() => this.navService.updateNavigation());\n      }\n    }\n\n    initializeButtons() {\n      // Only trigger buttons ready if default is open (inlined)\n      if (this._open) {\n        this.buttonService.buttonsReady = true;\n      }\n    }\n\n    emitWizardFinished() {\n      if (!this.stopNext) {\n        this.forceFinish();\n      }\n\n      this.wizardFinished.emit();\n    }\n\n  }\n\n  ClrWizard.ɵfac = function ClrWizard_Factory(t) {\n    return new (t || ClrWizard)(ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID), ɵngcc0.ɵɵdirectiveInject(WizardNavigationService), ɵngcc0.ɵɵdirectiveInject(PageCollectionService), ɵngcc0.ɵɵdirectiveInject(ButtonHubService), ɵngcc0.ɵɵdirectiveInject(HeaderActionService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers));\n  };\n\n  ClrWizard.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ClrWizard,\n    selectors: [[\"clr-wizard\"]],\n    contentQueries: function ClrWizard_ContentQueries(rf, ctx, dirIndex) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, ClrWizardPage, 5);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, ClrWizardHeaderAction, 4);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.pages = _t);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.headerActions = _t);\n      }\n    },\n    viewQuery: function ClrWizard_Query(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c98, 5);\n      }\n\n      if (rf & 2) {\n        let _t;\n\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.wizardTitle = _t.first);\n      }\n    },\n    hostVars: 10,\n    hostBindings: function ClrWizard_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"clr-wizard\", true)(\"wizard-md\", ctx.size == \"md\")(\"wizard-lg\", ctx.size == \"lg\")(\"wizard-xl\", ctx.size == \"xl\")(\"lastPage\", ctx.navService.currentPageIsLast);\n      }\n    },\n    inputs: {\n      size: [\"clrWizardSize\", \"size\"],\n      closable: [\"clrWizardClosable\", \"closable\"],\n      _stopModalAnimations: [\"clrWizardPreventModalAnimation\", \"_stopModalAnimations\"],\n      forceForward: [\"clrWizardForceForwardNavigation\", \"forceForward\"],\n      clrWizardOpen: \"clrWizardOpen\",\n      stopNext: [\"clrWizardPreventDefaultNext\", \"stopNext\"],\n      stopCancel: [\"clrWizardPreventDefaultCancel\", \"stopCancel\"],\n      stopNavigation: [\"clrWizardPreventNavigation\", \"stopNavigation\"],\n      disableStepnav: [\"clrWizardDisableStepnav\", \"disableStepnav\"]\n    },\n    outputs: {\n      _openChanged: \"clrWizardOpenChange\",\n      onCancel: \"clrWizardOnCancel\",\n      wizardFinished: \"clrWizardOnFinish\",\n      onReset: \"clrWizardOnReset\",\n      currentPageChanged: \"clrWizardCurrentPageChanged\",\n      onMoveNext: \"clrWizardOnNext\",\n      onMovePrevious: \"clrWizardOnPrevious\"\n    },\n    features: [ɵngcc0.ɵɵProvidersFeature([WizardNavigationService, PageCollectionService, ButtonHubService, HeaderActionService])],\n    ngContentSelectors: _c100,\n    decls: 17,\n    vars: 11,\n    consts: [[3, \"clrModalOpen\", \"clrModalSize\", \"clrModalClosable\", \"clrModalStaticBackdrop\", \"clrModalSkipAnimation\", \"clrModalOverrideScrollService\", \"clrModalPreventClose\", \"clrModalAlternateClose\"], [1, \"modal-nav\", \"clr-wizard-stepnav-wrapper\"], [1, \"clr-wizard-title\"], [1, \"modal-title\"], [\"tabindex\", \"-1\", 1, \"modal-title-text\"], [\"wizardTitle\", \"\"], [3, \"ngTemplateOutlet\"], [\"class\", \"modal-header-actions-wrapper\", 4, \"ngIf\"], [1, \"modal-body\"], [\"clr-wizard-pages-wrapper\", \"\", 1, \"clr-wizard-content\"], [1, \"modal-footer\", \"clr-wizard-footer\"], [1, \"clr-wizard-footer-buttons\"], [\"class\", \"clr-wizard-footer-buttons-wrapper\", 4, \"ngIf\"], [1, \"modal-header-actions-wrapper\"], [4, \"ngIf\"], [1, \"clr-wizard-footer-buttons-wrapper\"]],\n    template: function ClrWizard_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c99);\n        ɵngcc0.ɵɵelementStart(0, \"clr-modal\", 0);\n        ɵngcc0.ɵɵlistener(\"clrModalAlternateClose\", function ClrWizard_Template_clr_modal_clrModalAlternateClose_0_listener() {\n          return ctx.modalCancel();\n        });\n        ɵngcc0.ɵɵelementStart(1, \"nav\", 1);\n        ɵngcc0.ɵɵelementStart(2, \"h1\", 2);\n        ɵngcc0.ɵɵprojection(3);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelement(4, \"clr-wizard-stepnav\");\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(5, \"h2\", 3);\n        ɵngcc0.ɵɵelementStart(6, \"span\", 4, 5);\n        ɵngcc0.ɵɵtemplate(8, ClrWizard_ng_template_8_Template, 0, 0, \"ng-template\", 6);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(9, ClrWizard_div_9_Template, 3, 2, \"div\", 7);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(10, \"div\", 8);\n        ɵngcc0.ɵɵelementStart(11, \"main\", 9);\n        ɵngcc0.ɵɵprojection(12, 1);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(13, \"div\", 10);\n        ɵngcc0.ɵɵelementStart(14, \"div\", 11);\n        ɵngcc0.ɵɵtemplate(15, ClrWizard_div_15_Template, 2, 0, \"div\", 12);\n        ɵngcc0.ɵɵtemplate(16, ClrWizard_div_16_Template, 2, 1, \"div\", 12);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"clrModalOpen\", ctx._open)(\"clrModalSize\", ctx.size)(\"clrModalClosable\", ctx.closable)(\"clrModalStaticBackdrop\", true)(\"clrModalSkipAnimation\", ctx.stopModalAnimations)(\"clrModalOverrideScrollService\", ctx.isStatic)(\"clrModalPreventClose\", true);\n        ɵngcc0.ɵɵadvance(8);\n        ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx.navService.currentPageTitle);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.headerActionService.displayHeaderActionsWrapper);\n        ɵngcc0.ɵɵadvance(6);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.navService.currentPage && !ctx.navService.currentPage.hasButtons);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.navService.currentPage && ctx.navService.currentPage.hasButtons);\n      }\n    },\n    directives: function () {\n      return [ClrModal, ClrWizardStepnav, ɵngcc1.NgTemplateOutlet, ɵngcc1.NgIf, ClrModalBody];\n    },\n    encapsulation: 2\n  });\n  return ClrWizard;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nconst DEFAULT_BUTTON_TYPES = {\n  cancel: 'cancel',\n  previous: 'previous',\n  next: 'next',\n  finish: 'finish',\n  danger: 'danger'\n};\nconst CUSTOM_BUTTON_TYPES = {\n  cancel: 'custom-cancel',\n  previous: 'custom-previous',\n  next: 'custom-next',\n  finish: 'custom-finish',\n  danger: 'custom-danger'\n};\nlet ClrWizardButton = /*#__PURE__*/(() => {\n  class ClrWizardButton {\n    constructor(navService, buttonService) {\n      this.navService = navService;\n      this.buttonService = buttonService;\n      this.type = '';\n      this.disabled = false;\n      this.hidden = false; // EventEmitter which is emitted when a button is clicked.\n\n      this.wasClicked = new EventEmitter(false);\n    }\n\n    checkDefaultAndCustomType(valueToCheck = '', typeToLookUp) {\n      if (DEFAULT_BUTTON_TYPES[typeToLookUp] === valueToCheck) {\n        return true;\n      }\n\n      if (CUSTOM_BUTTON_TYPES[typeToLookUp] === valueToCheck) {\n        return true;\n      }\n\n      return false;\n    }\n\n    get isCancel() {\n      return this.checkDefaultAndCustomType(this.type, 'cancel');\n    }\n\n    get isNext() {\n      return this.checkDefaultAndCustomType(this.type, 'next');\n    }\n\n    get isPrevious() {\n      return this.checkDefaultAndCustomType(this.type, 'previous');\n    }\n\n    get isFinish() {\n      return this.checkDefaultAndCustomType(this.type, 'finish');\n    }\n\n    get isDanger() {\n      return this.checkDefaultAndCustomType(this.type, 'danger');\n    }\n\n    get isPrimaryAction() {\n      return this.isNext || this.isDanger || this.isFinish;\n    }\n\n    get _disabledAttribute() {\n      if (this.isDisabled) {\n        return '';\n      }\n\n      return null;\n    }\n\n    get isDisabled() {\n      // dealing with negatives here. cognitively easier to think of it like this...\n      const disabled = true;\n      const nav = this.navService;\n      const page = this.navService.currentPage; // Ensure we don't change the response until buttons are ready to avoid chocolate\n\n      if (!this.buttonService.buttonsReady) {\n        return !disabled;\n      }\n\n      if (this.disabled || nav.wizardStopNavigation || !page) {\n        return true;\n      }\n\n      if (this.isCancel) {\n        return !disabled;\n      }\n\n      if (this.isPrevious && (nav.currentPageIsFirst || page.previousStepDisabled)) {\n        return disabled;\n      }\n\n      if (this.isDanger && !page.readyToComplete) {\n        return disabled;\n      }\n\n      if (this.isNext && (nav.currentPageIsLast || !page.readyToComplete)) {\n        return disabled;\n      }\n\n      if (this.isFinish && (!nav.currentPageIsLast || !page.readyToComplete)) {\n        return disabled;\n      }\n\n      return !disabled;\n    }\n\n    get isHidden() {\n      // dealing with negatives here. cognitively easier to think of it like this...\n      const hidden = true;\n      const nav = this.navService; // Ensure we don't change the response until buttons are ready to avoid chocolate\n\n      if (!this.buttonService.buttonsReady) {\n        return !hidden;\n      }\n\n      if (this.hidden) {\n        return true;\n      }\n\n      if (this.isCancel) {\n        return !hidden;\n      }\n\n      if (this.isPrevious && nav.currentPageIsFirst) {\n        return hidden;\n      }\n\n      if (this.isNext && nav.currentPageIsLast) {\n        return hidden;\n      }\n\n      if (this.isFinish && !nav.currentPageIsLast) {\n        return hidden;\n      }\n\n      return !hidden;\n    }\n\n    click() {\n      if (this.isDisabled) {\n        return;\n      }\n\n      this.wasClicked.emit(this.type);\n      this.buttonService.buttonClicked(this.type);\n    }\n\n  }\n\n  ClrWizardButton.ɵfac = function ClrWizardButton_Factory(t) {\n    return new (t || ClrWizardButton)(ɵngcc0.ɵɵdirectiveInject(WizardNavigationService), ɵngcc0.ɵɵdirectiveInject(ButtonHubService));\n  };\n\n  ClrWizardButton.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ClrWizardButton,\n    selectors: [[\"clr-wizard-button\"]],\n    hostAttrs: [1, \"clr-wizard-btn-wrapper\"],\n    hostVars: 1,\n    hostBindings: function ClrWizardButton_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"aria-hidden\", ctx.isHidden);\n      }\n    },\n    inputs: {\n      type: \"type\",\n      disabled: [\"clrWizardButtonDisabled\", \"disabled\"],\n      hidden: [\"clrWizardButtonHidden\", \"hidden\"]\n    },\n    outputs: {\n      wasClicked: \"clrWizardButtonClicked\"\n    },\n    ngContentSelectors: _c0,\n    decls: 2,\n    vars: 19,\n    consts: [[\"type\", \"button\", 1, \"btn\", \"clr-wizard-btn\", 3, \"click\"]],\n    template: function ClrWizardButton_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"button\", 0);\n        ɵngcc0.ɵɵlistener(\"click\", function ClrWizardButton_Template_button_click_0_listener() {\n          return ctx.click();\n        });\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"btn-link\", ctx.isCancel)(\"clr-wizard-btn--tertiary\", ctx.isCancel)(\"btn-outline\", ctx.isPrevious)(\"clr-wizard-btn--secondary\", ctx.isPrevious)(\"btn-primary\", ctx.isPrimaryAction)(\"clr-wizard-btn--primary\", ctx.isPrimaryAction)(\"btn-success\", ctx.isFinish)(\"btn-danger\", ctx.isDanger)(\"disabled\", ctx.isDisabled);\n        ɵngcc0.ɵɵattribute(\"disabled\", ctx._disabledAttribute);\n      }\n    },\n    encapsulation: 2\n  });\n  return ClrWizardButton;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrWizardCustomTags = /*#__PURE__*/(() => {\n  class ClrWizardCustomTags {}\n\n  ClrWizardCustomTags.ɵfac = function ClrWizardCustomTags_Factory(t) {\n    return new (t || ClrWizardCustomTags)();\n  };\n\n  ClrWizardCustomTags.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: ClrWizardCustomTags,\n    selectors: [[\"clr-wizard-title\"], [\"clr-wizard-pagetitle\"]]\n  });\n  return ClrWizardCustomTags;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrWizardStepnav = /*#__PURE__*/(() => {\n  class ClrWizardStepnav {\n    constructor(pageService) {\n      this.pageService = pageService;\n    }\n\n  }\n\n  ClrWizardStepnav.ɵfac = function ClrWizardStepnav_Factory(t) {\n    return new (t || ClrWizardStepnav)(ɵngcc0.ɵɵdirectiveInject(PageCollectionService));\n  };\n\n  ClrWizardStepnav.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ClrWizardStepnav,\n    selectors: [[\"clr-wizard-stepnav\"]],\n    hostAttrs: [1, \"clr-wizard-stepnav\"],\n    decls: 2,\n    vars: 1,\n    consts: [[1, \"clr-wizard-stepnav-list\"], [\"clr-wizard-stepnav-item\", \"\", \"class\", \"clr-wizard-stepnav-item\", 3, \"page\", 4, \"ngFor\", \"ngForOf\"], [\"clr-wizard-stepnav-item\", \"\", 1, \"clr-wizard-stepnav-item\", 3, \"page\"]],\n    template: function ClrWizardStepnav_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"div\", 0);\n        ɵngcc0.ɵɵtemplate(1, ClrWizardStepnav_div_1_Template, 2, 2, \"div\", 1);\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.pageService.pages);\n      }\n    },\n    directives: function () {\n      return [ɵngcc1.NgForOf, ClrWizardStepnavItem];\n    },\n    encapsulation: 2\n  });\n  return ClrWizardStepnav;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClrWizardStepnavItem = /*#__PURE__*/(() => {\n  class ClrWizardStepnavItem {\n    constructor(navService, pageCollection) {\n      this.navService = navService;\n      this.pageCollection = pageCollection;\n    }\n\n    pageGuard() {\n      if (!this.page) {\n        throw new Error('Wizard stepnav item is not associated with a wizard page.');\n      }\n    }\n\n    get id() {\n      this.pageGuard();\n      return this.pageCollection.getStepItemIdForPage(this.page);\n    }\n\n    get stepAriaCurrent() {\n      return this.isCurrent && 'step';\n    }\n\n    get isDisabled() {\n      this.pageGuard();\n      return this.page.disabled || this.navService.wizardStopNavigation || this.navService.wizardDisableStepnav;\n    }\n\n    get isCurrent() {\n      this.pageGuard();\n      return this.page.current;\n    }\n\n    get isComplete() {\n      this.pageGuard();\n      return this.page.completed;\n    }\n\n    get hasError() {\n      this.pageGuard();\n      return this.page.hasError && this.isComplete;\n    }\n\n    get canNavigate() {\n      this.pageGuard();\n      return this.pageCollection.previousPageIsCompleted(this.page);\n    }\n\n    click() {\n      this.pageGuard(); // if we click on our own stepnav or a disabled stepnav, we don't want to do anything\n\n      if (this.isDisabled || this.isCurrent) {\n        return;\n      }\n\n      this.navService.goTo(this.page);\n    }\n\n  }\n\n  ClrWizardStepnavItem.ɵfac = function ClrWizardStepnavItem_Factory(t) {\n    return new (t || ClrWizardStepnavItem)(ɵngcc0.ɵɵdirectiveInject(WizardNavigationService), ɵngcc0.ɵɵdirectiveInject(PageCollectionService));\n  };\n\n  ClrWizardStepnavItem.ɵcmp = /*@__PURE__*/ɵngcc0.ɵɵdefineComponent({\n    type: ClrWizardStepnavItem,\n    selectors: [[\"\", \"clr-wizard-stepnav-item\", \"\"]],\n    hostVars: 17,\n    hostBindings: function ClrWizardStepnavItem_HostBindings(rf, ctx) {\n      if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n        ɵngcc0.ɵɵattribute(\"aria-current\", ctx.stepAriaCurrent)(\"aria-controls\", ctx.id);\n        ɵngcc0.ɵɵclassProp(\"clr-nav-link\", true)(\"nav-item\", true)(\"active\", ctx.isCurrent)(\"disabled\", ctx.isDisabled)(\"no-click\", !ctx.canNavigate)(\"complete\", ctx.isComplete)(\"error\", ctx.hasError);\n      }\n    },\n    inputs: {\n      page: \"page\"\n    },\n    attrs: _c101,\n    ngContentSelectors: _c0,\n    decls: 6,\n    vars: 4,\n    consts: [[\"type\", \"button\", 1, \"btn\", \"btn-link\", \"clr-wizard-stepnav-link\", 3, \"click\"], [1, \"clr-wizard-stepnav-link-suffix\"], [\"shape\", \"error-standard\", \"status\", \"danger\", \"class\", \"clr-wizard-stepnav-item-error-icon\", 4, \"ngIf\"], [4, \"ngIf\"], [1, \"clr-wizard-stepnav-link-title\"], [3, \"ngTemplateOutlet\"], [\"shape\", \"error-standard\", \"status\", \"danger\", 1, \"clr-wizard-stepnav-item-error-icon\"]],\n    template: function ClrWizardStepnavItem_Template(rf, ctx) {\n      if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"button\", 0);\n        ɵngcc0.ɵɵlistener(\"click\", function ClrWizardStepnavItem_Template_button_click_0_listener() {\n          return ctx.click();\n        });\n        ɵngcc0.ɵɵelementStart(1, \"span\", 1);\n        ɵngcc0.ɵɵtemplate(2, ClrWizardStepnavItem_cds_icon_2_Template, 1, 0, \"cds-icon\", 2);\n        ɵngcc0.ɵɵtemplate(3, ClrWizardStepnavItem_ng_content_3_Template, 1, 0, \"ng-content\", 3);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(4, \"span\", 4);\n        ɵngcc0.ɵɵtemplate(5, ClrWizardStepnavItem_ng_template_5_Template, 0, 0, \"ng-template\", 5);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"disabled\", ctx.isDisabled ? \"\" : null);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx.hasError);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngIf\", !ctx.hasError);\n        ɵngcc0.ɵɵadvance(2);\n        ɵngcc0.ɵɵproperty(\"ngTemplateOutlet\", ctx.page.navTitle);\n      }\n    },\n    directives: [ɵngcc1.NgIf, ɵngcc1.NgTemplateOutlet, CdsIconCustomTag],\n    encapsulation: 2\n  });\n  return ClrWizardStepnavItem;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nconst CLR_WIZARD_DIRECTIVES = [ClrWizard, ClrWizardPage, ClrWizardStepnav, ClrWizardStepnavItem, ClrWizardButton, ClrWizardHeaderAction, ClrWizardCustomTags, ClrWizardPageTitle, ClrWizardPageNavTitle, ClrWizardPageButtons, ClrWizardPageHeaderActions];\nlet ClrWizardModule = /*#__PURE__*/(() => {\n  class ClrWizardModule {\n    constructor() {\n      ClarityIcons.addIcons(errorStandardIcon);\n    }\n\n  }\n\n  ClrWizardModule.ɵfac = function ClrWizardModule_Factory(t) {\n    return new (t || ClrWizardModule)();\n  };\n\n  ClrWizardModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: ClrWizardModule\n  });\n  ClrWizardModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [[CommonModule, ClrModalModule, ClrAlertModule]]\n  });\n  return ClrWizardModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ClrWizardModule, {\n    declarations: function () {\n      return [ClrWizard, ClrWizardPage, ClrWizardStepnav, ClrWizardStepnavItem, ClrWizardButton, ClrWizardHeaderAction, ClrWizardCustomTags, ClrWizardPageTitle, ClrWizardPageNavTitle, ClrWizardPageButtons, ClrWizardPageHeaderActions];\n    },\n    imports: function () {\n      return [CommonModule, ClrModalModule, ClrAlertModule];\n    },\n    exports: function () {\n      return [ClrWizard, ClrWizardPage, ClrWizardStepnav, ClrWizardStepnavItem, ClrWizardButton, ClrWizardHeaderAction, ClrWizardCustomTags, ClrWizardPageTitle, ClrWizardPageNavTitle, ClrWizardPageButtons, ClrWizardPageHeaderActions];\n    }\n  });\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nlet ClarityModule = /*#__PURE__*/(() => {\n  class ClarityModule {}\n\n  ClarityModule.ɵfac = function ClarityModule_Factory(t) {\n    return new (t || ClarityModule)();\n  };\n\n  ClarityModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: ClarityModule\n  });\n  ClarityModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [ClrEmphasisModule, ClrDataModule, ClrIconModule, ClrModalModule, ClrLoadingModule, ClrConditionalModule, ClrFocusTrapModule, ClrFocusOnViewInitModule, ClrButtonModule, ClrFormsModule, ClrLayoutModule, ClrPopoverModule, ClrWizardModule, ClrDragAndDropModule, ClrStepperModule, ClrSpinnerModule, ClrProgressBarModule, ClrPopoverModuleNext, ClrTimelineModule]\n  });\n  return ClarityModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ClarityModule, {\n    exports: [ClrEmphasisModule, ClrDataModule, ClrIconModule, ClrModalModule, ClrLoadingModule, ClrConditionalModule, ClrFocusTrapModule, ClrFocusOnViewInitModule, ClrButtonModule, ClrFormsModule, ClrLayoutModule, ClrPopoverModule, ClrWizardModule, ClrDragAndDropModule, ClrStepperModule, ClrSpinnerModule, ClrProgressBarModule, ClrPopoverModuleNext, ClrTimelineModule]\n  });\n})();\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n\nconst CLR_MENU_POSITIONS = ['bottom-left', 'bottom-right', 'top-left', 'top-right', 'left-bottom', 'left-top', 'right-bottom', 'right-top'];\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/*\n * Copyright (c) 2016-2022 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CLR_ALERT_DIRECTIVES, CLR_BUTTON_GROUP_DIRECTIVES, CLR_DATAGRID_DIRECTIVES, CLR_DATEPICKER_DIRECTIVES, CLR_DRAG_AND_DROP_DIRECTIVES, CLR_DROPDOWN_DIRECTIVES, CLR_ICON_DIRECTIVES, CLR_LAYOUT_DIRECTIVES, CLR_LOADING_BUTTON_DIRECTIVES, CLR_LOADING_DIRECTIVES, CLR_MENU_POSITIONS, CLR_MODAL_DIRECTIVES, CLR_NAVIGATION_DIRECTIVES, CLR_PROGRESS_BAR_DIRECTIVES, CLR_SIGNPOST_DIRECTIVES, CLR_SPINNER_DIRECTIVES, CLR_STACK_VIEW_DIRECTIVES, CLR_TABS_DIRECTIVES, CLR_TOOLTIP_DIRECTIVES, CLR_TREE_VIEW_DIRECTIVES, CLR_VERTICAL_NAV_DIRECTIVES, CLR_WIZARD_DIRECTIVES, CONDITIONAL_DIRECTIVES, CUSTOM_BUTTON_TYPES, CdsIconCustomTag, ClarityModule, ClrAbstractContainer, ClrAccordion, ClrAccordionContent, ClrAccordionDescription, ClrAccordionModule, ClrAccordionPanel, ClrAccordionTitle, ClrAlert, ClrAlertItem, ClrAlertModule, ClrAlertText, ClrAlerts, ClrAlertsPager, ClrAlignment, ClrAriaLivePoliteness, ClrAriaLiveService, ClrAxis, ClrButton, ClrButtonGroup, ClrButtonGroupModule, ClrButtonModule, ClrCalendar, ClrCheckbox, ClrCheckboxContainer, ClrCheckboxModule, ClrCheckboxWrapper, ClrCombobox, ClrComboboxContainer, ClrComboboxModule, ClrCommonFormsModule, ClrCommonStringsService, ClrConditionalModule, ClrControl, ClrControlContainer, ClrControlError, ClrControlHelper, ClrControlSuccess, ClrDataModule, ClrDatagrid, ClrDatagridActionBar, ClrDatagridActionOverflow, ClrDatagridCell, ClrDatagridColumn, ClrDatagridColumnSeparator, ClrDatagridColumnToggle, ClrDatagridColumnToggleButton, ClrDatagridColumnToggleTitle, ClrDatagridDetail, ClrDatagridDetailBody, ClrDatagridDetailHeader, ClrDatagridFilter, ClrDatagridFooter, ClrDatagridHideableColumn, ClrDatagridItems, ClrDatagridItemsTrackBy, ClrDatagridModule, ClrDatagridPageSize, ClrDatagridPagination, ClrDatagridPlaceholder, ClrDatagridRow, ClrDatagridRowDetail, ClrDatagridSortOrder, ClrDatalist, ClrDatalistContainer, ClrDatalistInput, ClrDatalistModule, ClrDateContainer, ClrDateInput, ClrDatepickerModule, ClrDatepickerViewManager, ClrDay, ClrDaypicker, ClrDragAndDropModule, ClrDragEvent, ClrDragHandle, ClrDraggable, ClrDraggableGhost, ClrDropdown, ClrDropdownItem, ClrDropdownMenu, ClrDropdownModule, ClrDropdownTrigger, ClrDroppable, ClrEmphasisModule, ClrExpandableAnimation, ClrFocusOnViewInit, ClrFocusOnViewInitModule, ClrForm, ClrFormLayout, ClrFormsModule, ClrHeader, ClrIconCustomTag, ClrIconModule, ClrIfActive, ClrIfDetail, ClrIfDragged, ClrIfError, ClrIfExpanded, ClrIfOpen, ClrIfSuccess, ClrInput, ClrInputContainer, ClrInputModule, ClrLabel, ClrLayout, ClrLayoutModule, ClrLoading, ClrLoadingButton, ClrLoadingButtonModule, ClrLoadingModule, ClrLoadingState, ClrMainContainer, ClrMainContainerModule, ClrModal, ClrModalBody, ClrModalModule, ClrMonthpicker, ClrNavLevel, ClrNavigationModule, ClrOption, ClrOptionItems, ClrOptionSelected, ClrOptions, ClrPassword, ClrPasswordContainer, ClrPasswordModule, ClrPopoverAnchor, ClrPopoverContent, ClrPopoverEventsService, ClrPopoverModule, ClrPopoverPositionService, ClrPopoverToggleService, ClrProgressBar, ClrProgressBarModule, ClrRadio, ClrRadioContainer, ClrRadioModule, ClrRadioWrapper, ClrRange, ClrRangeContainer, ClrRangeModule, ClrRecursiveForOf, ClrSelect, ClrSelectContainer, ClrSelectModule, ClrSelectedState, ClrSide, ClrSignpost, ClrSignpostContent, ClrSignpostModule, ClrSignpostTrigger, ClrSpinner, ClrSpinnerModule, ClrStackBlock, ClrStackContentInput, ClrStackHeader, ClrStackInput, ClrStackSelect, ClrStackView, ClrStackViewCustomTags, ClrStackViewLabel, ClrStackViewModule, ClrStepButton, ClrStepButtonType, ClrStepper, ClrStepperModule, ClrStepperPanel, ClrTab, ClrTabContent, ClrTabLink, ClrTabOverflowContent, ClrTabs, ClrTabsModule, ClrTextarea, ClrTextareaContainer, ClrTextareaModule, ClrTimeline, ClrTimelineLayout, ClrTimelineModule, ClrTimelineStep, ClrTimelineStepDescription, ClrTimelineStepHeader, ClrTimelineStepState, ClrTimelineStepTitle, ClrTooltip, ClrTooltipContent, ClrTooltipModule, ClrTooltipTrigger, ClrTree, ClrTreeNode, ClrTreeNodeLink, ClrTreeViewModule, ClrVerticalNav, ClrVerticalNavGroup, ClrVerticalNavGroupChildren, ClrVerticalNavIcon, ClrVerticalNavLink, ClrVerticalNavModule, ClrWizard, ClrWizardButton, ClrWizardCustomTags, ClrWizardHeaderAction, ClrWizardModule, ClrWizardPage, ClrWizardPageButtons, ClrWizardPageHeaderActions, ClrWizardPageNavTitle, ClrWizardPageTitle, ClrWizardStepnav, ClrWizardStepnavItem, ClrYearpicker, DEFAULT_BUTTON_TYPES, DatagridNumericFilter, DatagridPropertyComparator, DatagridPropertyNumericFilter, DatagridPropertyStringFilter, DatagridStringFilter, EXPANDABLE_ANIMATION_DIRECTIVES, FOCUS_ON_VIEW_INIT, FOCUS_ON_VIEW_INIT_DIRECTIVES, IS_TOGGLE, IS_TOGGLE_PROVIDER, LoadingListener, MainContainerWillyWonka, NavDetectionOompaLoompa, TOGGLE_SERVICE, TOGGLE_SERVICE_PROVIDER, ToggleServiceFactory, WrappedFormControl, collapse, commonStringsDefault, fade, fadeSlide, isToggleFactory, slide, AccordionOompaLoompa as ÇlrAccordionOompaLoompa, AccordionWillyWonka as ÇlrAccordionWillyWonka, ActionableOompaLoompa as ÇlrActionableOompaLoompa, ActiveOompaLoompa as ÇlrActiveOompaLoompa, ClrFocusTrapModule as ÇlrClrFocusTrapModule, ClrPopoverCloseButton as ÇlrClrPopoverCloseButton, ClrPopoverModuleNext as ÇlrClrPopoverModuleNext, ClrPopoverOpenCloseButton as ÇlrClrPopoverOpenCloseButton, DatagridCellRenderer as ÇlrDatagridCellRenderer, DatagridDetailRegisterer as ÇlrDatagridDetailRegisterer, DatagridHeaderRenderer as ÇlrDatagridHeaderRenderer, DatagridMainRenderer as ÇlrDatagridMainRenderer, DatagridRowRenderer as ÇlrDatagridRowRenderer, DatagridWillyWonka as ÇlrDatagridWillyWonka, ExpandableOompaLoompa as ÇlrExpandableOompaLoompa, FocusTrapDirective as ÇlrFocusTrapDirective, FocusTrapTracker as ÇlrFocusTrapTracker, StepperOompaLoompa as ÇlrStepperOompaLoompa, StepperWillyWonka as ÇlrStepperWillyWonka, TabsWillyWonka as ÇlrTabsWillyWonka, WrappedCell as ÇlrWrappedCell, WrappedColumn as ÇlrWrappedColumn, WrappedRow as ÇlrWrappedRow, ɵ0, domAdapterFactory as ɵa, LayoutService as ɵb, AlertIconAndTypesService as ɵba, MultiAlertService as ɵbb, ControlIdService as ɵbc, NgControlService as ɵbd, ClrAbstractControl as ɵbe, ContainerIdService as ɵbf, AbstractIfState as ɵbg, IfControlStateService as ɵbh, MarkControlService as ɵbi, ControlClassService as ɵbj, ClrHostWrappingModule as ɵbk, EmptyAnchor as ɵbl, ClrKeyFocusModule as ɵbm, ClrKeyFocus as ɵbn, ClrKeyFocusItem as ɵbo, ClrRovingTabindex as ɵbp, OptionSelectionService as ɵbq, AriaService as ɵbr, ComboboxFocusHandler as ɵbs, COMBOBOX_FOCUS_HANDLER_PROVIDER as ɵbt, ComboboxContainerService as ɵbu, DateNavigationService as ɵbv, DateFormControlService as ɵbw, LocaleHelperService as ɵbx, FocusService as ɵby, DateIOService as ɵbz, FOCUS_ON_VIEW_INIT_PROVIDER as ɵc, DatepickerEnabledService as ɵca, ViewManagerService as ɵcb, DatepickerFocusService as ɵcc, DatalistIdService as ɵcd, ClrOutsideClickModule as ɵce, OUSTIDE_CLICK_DIRECTIVES as ɵcf, OutsideClick as ɵcg, ClrExpandableAnimationModule as ɵch, DomAdapter as ɵci, DragEventListenerService as ɵcj, DragAndDropEventBusService as ɵck, DragHandleRegistrarService as ɵcl, DraggableSnapshotService as ɵcm, GlobalDragModeService as ɵcn, Selection as ɵco, Items as ɵcp, FiltersProvider as ɵcq, Page as ɵcr, StateDebouncer as ɵcs, Sort as ɵct, DatagridRenderOrganizer as ɵcu, RowActionService as ɵcv, ExpandableRowsCount as ɵcw, DetailService as ɵcx, StateProvider as ɵcy, TableSizeService as ɵcz, FOCUS_TRAP_DIRECTIVES as ɵd, ColumnsService as ɵda, DisplayModeService as ɵdb, KeyNavigationGridController as ɵdc, DatagridFilterRegistrar as ɵdd, CustomFilter as ɵde, DatagridIfExpandService as ɵdf, SignpostFocusManager as ɵdg, SignpostIdService as ɵdh, ColumnResizerService as ɵdi, COLUMN_STATE as ɵdj, columnStateFactory as ɵdk, COLUMN_STATE_PROVIDER as ɵdl, WillyWonka as ɵdn, OompaLoompa as ɵdo, StackControl as ɵdp, TreeFeaturesService as ɵdq, treeFeaturesFactory as ɵdr, TREE_FEATURES_PROVIDER as ɵds, TreeFocusManagerService as ɵdt, RecursiveChildren as ɵdu, ScrollingService as ɵdv, ButtonInGroupService as ɵdw, ResponsiveNavigationService as ɵdx, FocusTrap as ɵdz, RootDropdownService as ɵe, ClrTemplateRefModule as ɵea, TEMPLATE_REF_DIRECTIVES as ɵeb, TemplateRefContainer as ɵec, TabsService as ɵed, TABS_ID as ɵee, tokenFactory as ɵef, TABS_ID_PROVIDER as ɵeg, VerticalNavService as ɵeh, VerticalNavIconService as ɵei, VerticalNavGroupRegistrationService as ɵej, VerticalNavGroupService as ɵek, TooltipIdService as ɵel, WizardNavigationService as ɵem, PageCollectionService as ɵen, ButtonHubService as ɵeo, HeaderActionService as ɵep, AccordionService as ɵeq, panelAnimation as ɵer, stepAnimation as ɵes, defaultAnimationTiming as ɵet, StepperService as ɵeu, TimelineIconAttributeService as ɵev, clrRootDropdownFactory as ɵf, ROOT_DROPDOWN_PROVIDER as ɵg, POPOVER_HOST_ANCHOR as ɵh, FocusService$1 as ɵi, clrFocusServiceFactory as ɵj, FOCUS_SERVICE_PROVIDER as ɵk, DropdownFocusHandler as ɵl, DROPDOWN_FOCUS_HANDLER_PROVIDER as ɵm, customFocusableItemProvider as ɵn, UNIQUE_ID as ɵo, uniqueIdFactory as ɵp, UNIQUE_ID_PROVIDER as ɵq, FocusableItem as ɵr, AbstractPopover as ɵs, BasicFocusableItem as ɵt, BASIC_FOCUSABLE_ITEM_PROVIDER as ɵu, IF_ACTIVE_ID as ɵv, tokenFactory$1 as ɵw, IF_ACTIVE_ID_PROVIDER as ɵx, IfActiveService as ɵy, IfExpandService as ɵz }; //# sourceMappingURL=clr-angular.js.map","map":null,"metadata":{},"sourceType":"module"}