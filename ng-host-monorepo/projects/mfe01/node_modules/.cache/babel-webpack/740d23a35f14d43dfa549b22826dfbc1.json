{"ast":null,"code":"import n from \"ramda/es/is.js\";\nimport t from \"ramda/es/isEmpty.js\";\nimport r from \"ramda/es/isNil.js\";\n\nfunction u(n) {\n  return r(n) || t(n);\n}\n\nfunction e(t) {\n  return n(String, t);\n}\n\nfunction i(n) {\n  return e(n) && !t(n.trim()) && +n == +n;\n}\n\nfunction o(t) {\n  return n(String, t) || r(t);\n}\n\nfunction f(n) {\n  return e(n) && !r(n) && !t(n);\n}\n\nfunction c(t) {\n  return n(Object, t);\n}\n\nfunction s(t) {\n  return n(Map, t);\n}\n\nfunction a(n) {\n  return !u(n) && c(n);\n}\n\nfunction l(n, t) {\n  return n !== t;\n}\n\nfunction m(n, t) {\n  return o(n) && l(n, t);\n}\n\nfunction p(n, t) {\n  return !u(n) && l(n, t);\n}\n\nfunction g(n) {\n  return Object.values(n);\n}\n\nfunction d(n = \"_\") {\n  return `${n}${Math.random().toString(36).substr(2, 9)}`;\n}\n\nfunction h(n) {\n  const t = new Map();\n\n  for (const [r, u] of n) s(u) ? t.set(r, h(u)) : t.set(r, u);\n\n  return t;\n}\n\nfunction j(n) {\n  return s(n) ? h(n) : JSON.parse(JSON.stringify(n));\n}\n\nfunction S(n) {\n  return n.split(\" \").map(n => n.split(\":\")).map(n => {\n    const [t, r] = n;\n    return \"true\" === r ? [t, !0] : \"false\" === r ? [t, !1] : \"null\" === r ? [t, null] : \"undefined\" === r ? [t, void 0] : i(r) ? [t, +r] : [t, r];\n  });\n}\n\nfunction b(n, t, r) {\n  if (!t) return !0;\n  const u = S(t);\n  if (!n) return !1;\n  if (u.length < 1) return !0;\n  {\n    const t = u.filter(t => {\n      const [r, u] = t;\n      return !1 === u ? !n[r] : n[r] === u;\n    });\n    return \"all\" === r ? t.length === u.length : t.length > 0;\n  }\n}\n\nfunction N(n, t) {\n  return b(n, t, \"all\");\n}\n\nfunction O(n, t) {\n  return b(n, t, \"any\");\n}\n\nfunction y(n) {\n  return r(n) ? 0 : 1e3 * Number(n);\n}\n\nexport { N as allPropertiesPass, b as anyOrAllPropertiesPass, O as anyPropertiesPass, S as convertStringPropValuePairsToTuple, d as createId, j as deepClone, g as getEnumValues, y as getMillisecondsFromSeconds, l as hasPropertyChanged, m as hasStringPropertyChanged, p as hasStringPropertyChangedAndNotNil, s as isMap, u as isNilOrEmpty, i as isNumericString, c as isObject, a as isObjectAndNotNilOrEmpty, e as isString, f as isStringAndNotNilOrEmpty, o as isStringOrNil }; //# sourceMappingURL=identity.js.map","map":null,"metadata":{},"sourceType":"module"}