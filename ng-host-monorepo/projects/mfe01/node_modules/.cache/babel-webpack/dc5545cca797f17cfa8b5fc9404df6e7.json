{"ast":null,"code":"import { isNumericString as t, isNilOrEmpty as r } from \"./identity.js\";\n\nfunction n(t, r, ...n) {\n  return r.map(t => t(...n)).join(t).trim();\n}\n\nfunction e(t, ...r) {\n  return n(\" \", t, ...r);\n}\n\nfunction u(t, ...r) {\n  return n(\"\", t, ...r);\n}\n\nfunction i(t) {\n  return t.replace(/[A-Z]/g, t => \"-\" + t.toLowerCase());\n}\n\nfunction f(t) {\n  return t.split(\"-\").map((t, r) => r ? t.charAt(0).toUpperCase() + t.slice(1).toLowerCase() : t).join(\"\");\n}\n\nfunction o(t) {\n  return a(f(t));\n}\n\nfunction s(t) {\n  return p(Object.keys(t), t);\n}\n\nfunction c(t) {\n  return p(Object.keys(t).filter(t => t.startsWith(\"--\")), t);\n}\n\nfunction p(t, r) {\n  return t.reduce((t, n) => `${t}${r[n] ? `${n}:${r[n]};` : \"\"}`, \"\");\n}\n\nfunction a(t) {\n  return t.charAt(0).toUpperCase() + t.slice(1);\n}\n\nconst l = \"CSS Custom Properties\",\n      h = \"Default Properties\";\n\nfunction x(r) {\n  if (!r || !r.match(/(\\d+)?\\.?(\\d+)?s/g)) return 0;\n  const n = r.substr(0, r.length - 1);\n  return t(n) ? Number(n) : 0;\n}\n\nfunction g(t, n, e = \"prefix\") {\n  return !r(n) && !r(t) && (\"prefix\" === e ? t.substr(0, n.length) : t.substr(-1 * n.length)) === n;\n}\n\nfunction m(t, r) {\n  return g(t, r, \"prefix\");\n}\n\nfunction b(t, r) {\n  return g(t, r, \"suffix\");\n}\n\nfunction j(t, n, e = \"prefix\") {\n  if (r(t)) return \"\";\n  if (r(n) || !g(t, n, e)) return t;\n\n  switch (e) {\n    case \"prefix\":\n      return t.substr(n.length);\n\n    case \"suffix\":\n      return t.substr(0, t.length - n.length);\n\n    default:\n      return t;\n  }\n}\n\nfunction C(t, r) {\n  return j(t, r, \"prefix\");\n}\n\nfunction d(t, r) {\n  return j(t, r, \"suffix\");\n}\n\nfunction $(t, r, n = \"\") {\n  const e = t.split(\" \"),\n        u = \"\" === n ? e.filter(t => t !== r) : e.map(t => t === r ? n : t);\n  return u.length > 0 ? u.join(\" \") : \"\";\n}\n\nexport { i as camelCaseToKebabCase, a as capitalizeFirstLetter, l as cssGroup, x as getNumericValueFromCssSecondsStyleValue, m as isPrefixedBy, g as isPrefixedOrSuffixedBy, b as isSuffixedBy, f as kebabCaseToCamelCase, o as kebabCaseToPascalCase, h as propertiesGroup, C as removePrefix, j as removePrefixOrSuffix, d as removeSuffix, $ as replaceWord, c as setPropStyles, s as setStyles, e as transformToSpacedString, n as transformToString, u as transformToUnspacedString }; //# sourceMappingURL=string.js.map","map":null,"metadata":{},"sourceType":"module"}