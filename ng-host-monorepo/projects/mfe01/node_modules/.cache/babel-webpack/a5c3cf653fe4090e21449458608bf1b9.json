{"ast":null,"code":"import { __decorate as t } from \"tslib\";\nimport { LitElement as o, html as e } from \"lit\";\nimport { FocusTrap as r } from \"../utils/focus-trap.js\";\nimport { property as s, state as i } from \"../decorators/property.js\";\nimport { createId as a } from \"../utils/identity.js\";\n\nclass p extends o {\n  constructor() {\n    super();\n    this.hidden = !1, this.demoMode = !1, this.focusTrapId = a(), this.focusTrap = new r(this);\n  }\n\n  connectedCallback() {\n    super.connectedCallback(), this.toggleFocusTrap();\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback(), this.focusTrap.removeFocusTrap();\n  }\n\n  attributeChangedCallback(t, o, e) {\n    super.attributeChangedCallback(t, o, e), \"hidden\" === t && o !== e && this.toggleFocusTrap();\n  }\n\n  render() {\n    return e`<slot></slot>`;\n  }\n\n  toggleFocusTrap() {\n    this.demoMode || this.hasAttribute(\"hidden\") ? this.focusTrap.removeFocusTrap() : this.focusTrap.enableFocusTrap();\n  }\n\n}\n\nt([s({\n  type: Boolean\n})], p.prototype, \"hidden\", void 0), t([i({\n  type: Boolean,\n  reflect: !0\n})], p.prototype, \"demoMode\", void 0), t([s({\n  type: String\n})], p.prototype, \"focusTrapId\", void 0);\nexport { p as CdsBaseFocusTrap }; //# sourceMappingURL=focus-trap.base.js.map","map":null,"metadata":{},"sourceType":"module"}