{"ast":null,"code":"import { __decorate as e } from \"tslib\";\nimport { LitElement as t, html as i, render as r } from \"lit\";\nimport { ifDefined as s } from \"lit/directives/if-defined.js\";\nimport { property as o, state as a } from \"../decorators/property.js\";\nimport { querySlot as n } from \"../decorators/query-slot.js\";\nimport { onAnyKey as h } from \"../utils/keycodes.js\";\nimport { stopEvent as d } from \"../utils/events.js\";\n\nclass l extends t {\n  constructor() {\n    super(...arguments);\n    this.readonly = !1, this.disabled = !1, this.focused = !1, this.active = !1, this.isAnchor = !1, this.explicitClick = !1, this.markerSignificantProperties = [\"type\", \"name\", \"value\", \"disabled\"];\n  }\n\n  render() {\n    return i`<slot></slot>`;\n  }\n\n  connectedCallback() {\n    super.connectedCallback(), this.tabIndex = 0, this.role = \"button\";\n  }\n\n  updated(e) {\n    this.hasMarkerSignificantProperty(e) && (this.markerAttached && this.marker.remove(), this.createMarker()), super.updated(e), this.updateButtonAttributes(), this.addDefaultSubmitBehavior(), e.has(\"readonly\") && this.setupNativeButtonBehavior();\n  }\n\n  emulateActiveMouseDown() {\n    this.disabled || this.readonly || (this.active = !0);\n  }\n\n  emulateActiveMouseUp() {\n    this.active = !1, this.explicitClick = !0;\n  }\n\n  setupNativeButtonBehavior() {\n    this.readonly ? (this.removeEventListener(\"keyup\", this.emulateActiveMouseUp), this.removeEventListener(\"keydown\", this.emulateActiveMouseDown), this.removeEventListener(\"mouseup\", this.emulateActiveMouseUp), this.removeEventListener(\"mousedown\", this.emulateActiveMouseDown), this.removeEventListener(\"click\", this.triggerNativeButtonBehavior), this.removeEventListener(\"keyup\", this.emulateKeyBoardEventBehavior)) : (this.addEventListener(\"keyup\", this.emulateActiveMouseUp), this.addEventListener(\"keydown\", this.emulateActiveMouseDown), this.addEventListener(\"mouseup\", this.emulateActiveMouseUp), this.addEventListener(\"mousedown\", this.emulateActiveMouseDown), this.addEventListener(\"click\", this.triggerNativeButtonBehavior), this.addEventListener(\"keyup\", this.emulateKeyBoardEventBehavior));\n  }\n\n  triggerNativeButtonBehavior(e) {\n    var t;\n    this.readonly || (this.disabled ? d(e) : !e.defaultPrevented && this.marker && this.explicitClick && (this.markerAttached || this.appendChild(this.marker), null === (t = this.querySelector(\"button[aria-hidden]\")) || void 0 === t || t.dispatchEvent(new MouseEvent(\"click\", {\n      relatedTarget: this,\n      composed: !0\n    })), \"submit\" !== this.type && this.marker.remove())), this.explicitClick = !1;\n  }\n\n  createMarker() {\n    const e = i`<button aria-hidden=\"true\" role=\"presentation\" ?disabled=\"${this.disabled}\" tabindex=\"-1\" style=\"display:none!important\" value=\"${s(this.value)}\" name=\"${s(this.name)}\" type=\"${s(this.type)}\"></button>`,\n          t = document.createElement(\"div\");\n    t.style.display = \"none\", r(e, t), this.marker = t;\n  }\n\n  get markerAttached() {\n    return !(!this.marker || !this.marker.parentElement);\n  }\n\n  hasMarkerSignificantProperty(e) {\n    for (const t of this.markerSignificantProperties) if (e.has(t)) return !0;\n\n    return !1;\n  }\n\n  emulateKeyBoardEventBehavior(e) {\n    h([\"enter\", \"space\"], e, () => {\n      this.readonly || (this.click(), d(e));\n    });\n  }\n\n  updateButtonAttributes() {\n    var e;\n    this.isAnchor = \"A\" === (null === (e = this.parentElement) || void 0 === e ? void 0 : e.tagName), this.isAnchor && this.parentElement && (this.parentElement.style.lineHeight = \"0\", this.parentElement.style.textDecoration = \"none\"), this.readonly = this.readonly || this.isAnchor, this.readonly ? (this.role = null, this.tabIndexAttr = null, this.ariaDisabled = null) : (this.role = \"button\", this.tabIndexAttr = this.disabled ? -1 : 0, this.ariaDisabled = this.disabled ? \"true\" : \"false\");\n  }\n\n  addDefaultSubmitBehavior() {\n    !this.type && this.closest(\"form\") && (this.type = \"submit\"), \"submit\" !== this.type || this.markerAttached || this.appendChild(this.marker);\n  }\n\n}\n\ne([o({\n  type: Boolean\n})], l.prototype, \"readonly\", void 0), e([o({\n  type: String\n})], l.prototype, \"type\", void 0), e([o({\n  type: String\n})], l.prototype, \"name\", void 0), e([o({\n  type: String\n})], l.prototype, \"value\", void 0), e([o({\n  type: Boolean\n})], l.prototype, \"disabled\", void 0), e([a({\n  type: Number,\n  attribute: \"tabindex\",\n  reflect: !0\n})], l.prototype, \"tabIndexAttr\", void 0), e([a({\n  type: Boolean,\n  reflect: !0\n})], l.prototype, \"focused\", void 0), e([a({\n  type: Boolean,\n  reflect: !0\n})], l.prototype, \"active\", void 0), e([a({\n  type: Boolean,\n  reflect: !0\n})], l.prototype, \"isAnchor\", void 0), e([n(\"cds-icon\")], l.prototype, \"icon\", void 0), e([n(\"cds-badge\")], l.prototype, \"badge\", void 0);\nexport { l as CdsBaseButton }; //# sourceMappingURL=button.base.js.map","map":null,"metadata":{},"sourceType":"module"}