{"ast":null,"code":"import { LogService as t } from \"../services/log.service.js\";\nimport { isString as e } from \"./identity.js\";\n\nfunction r(t, ...e) {\n  return e.filter(e => t.classList.contains(e)).length === e.length;\n}\n\nfunction n(t, ...e) {\n  return e.forEach(e => {\n    t.classList.add(e);\n  }), t;\n}\n\nfunction o(t, ...e) {\n  return e.forEach(e => {\n    t.classList.remove(e);\n  }), t;\n}\n\nfunction c(t, e, r) {\n  return o(t, ...e.filter(t => r.indexOf(t) < 0));\n}\n\nfunction u(t, ...e) {\n  return e.forEach(([e, r]) => {\n    t.style[e] = r;\n  }), t;\n}\n\nfunction i(t, ...e) {\n  return e.forEach(e => {\n    t.style[e] = \"\";\n  }), t;\n}\n\nfunction s(t) {\n  return `calc((${t} / var(--cds-global-base)) * 1rem)`;\n}\n\nfunction l(e, r = document.body, n = null) {\n  try {\n    return getComputedStyle(r, n).getPropertyValue(e).trim();\n  } catch (e) {\n    return t.warn(\"Container element passed to getCustomPropertyValue must be an element.\"), \"\";\n  }\n}\n\nfunction a(t) {\n  return !!t && e(t) && \"--\" === t.slice(0, 2);\n}\n\nexport { n as addClassnames, l as getCssPropertyValue, r as hasClassnames, a as isCssPropertyName, s as pxToRem, o as removeClassnames, c as removeClassnamesUnless, i as unsetElementStyles, u as updateElementStyles }; //# sourceMappingURL=css.js.map","map":null,"metadata":{},"sourceType":"module"}