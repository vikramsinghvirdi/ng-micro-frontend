{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nconst t = window,\n      e = t.ShadowRoot && (void 0 === t.ShadyCSS || t.ShadyCSS.nativeShadow) && \"adoptedStyleSheets\" in Document.prototype && \"replace\" in CSSStyleSheet.prototype,\n      s = Symbol(),\n      n = new WeakMap();\n\nclass o {\n  constructor(t, e, n) {\n    if (this._$cssResult$ = !0, n !== s) throw Error(\"CSSResult is not constructable. Use `unsafeCSS` or `css` instead.\");\n    this.cssText = t, this.t = e;\n  }\n\n  get styleSheet() {\n    let t = this.o;\n    const s = this.t;\n\n    if (e && void 0 === t) {\n      const e = void 0 !== s && 1 === s.length;\n      e && (t = n.get(s)), void 0 === t && ((this.o = t = new CSSStyleSheet()).replaceSync(this.cssText), e && n.set(s, t));\n    }\n\n    return t;\n  }\n\n  toString() {\n    return this.cssText;\n  }\n\n}\n\nconst r = t => new o(\"string\" == typeof t ? t : t + \"\", void 0, s),\n      i = (t, ...e) => {\n  const n = 1 === t.length ? t[0] : e.reduce((e, s, n) => e + (t => {\n    if (!0 === t._$cssResult$) return t.cssText;\n    if (\"number\" == typeof t) return t;\n    throw Error(\"Value passed to 'css' function must be a 'css' function result: \" + t + \". Use 'unsafeCSS' to pass non-literal values, but take care to ensure page security.\");\n  })(s) + t[n + 1], t[0]);\n  return new o(n, t, s);\n},\n      S = (s, n) => {\n  e ? s.adoptedStyleSheets = n.map(t => t instanceof CSSStyleSheet ? t : t.styleSheet) : n.forEach(e => {\n    const n = document.createElement(\"style\"),\n          o = t.litNonce;\n    void 0 !== o && n.setAttribute(\"nonce\", o), n.textContent = e.cssText, s.appendChild(n);\n  });\n},\n      c = e ? t => t : t => t instanceof CSSStyleSheet ? (t => {\n  let e = \"\";\n\n  for (const s of t.cssRules) e += s.cssText;\n\n  return r(e);\n})(t) : t;\n\nexport { o as CSSResult, S as adoptStyles, i as css, c as getCompatibleStyle, e as supportsAdoptingStyleSheets, r as unsafeCSS }; //# sourceMappingURL=css-tag.js.map","map":null,"metadata":{},"sourceType":"module"}